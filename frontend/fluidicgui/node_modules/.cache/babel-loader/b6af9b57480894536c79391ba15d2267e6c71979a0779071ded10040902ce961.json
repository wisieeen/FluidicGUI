{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\SpectrometerMQTT.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport DraggablePanel from './DraggablePanel';\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\nimport { backgroundVariants } from '../../styles/backgroundStyles';\nimport styles from './styles/USBSpectrometerStyles';\nimport { WS_URL } from '../../config'; // Import WS_URL\nimport spectralConfig from './SpectrometerMQTT/spectral_config.json'; // Import spectral config\n\n// Import subcomponents\nimport MQTTCameraComponent from './SpectrometerMQTT/MQTTCameraComponent';\nimport MQTTGraphComponent from './SpectrometerMQTT/MQTTGraphComponent';\nimport MQTTWaterfallComponent from './SpectrometerMQTT/MQTTWaterfallComponent';\nimport MQTTSettingsComponent from './SpectrometerMQTT/MQTTSettingsComponent';\n\n// Add MQTT-specific styles to complement the existing styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mqttStyles = {\n  cameraSettings: {\n    marginTop: '10px',\n    padding: '8px',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderRadius: '4px'\n  },\n  mqttInputs: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '8px'\n  },\n  inputLabel: {\n    width: '90px',\n    color: '#ccc',\n    fontSize: '14px'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: 'rgba(60, 60, 60, 0.7)',\n    border: '1px solid rgba(100, 100, 100, 0.5)',\n    borderRadius: '4px',\n    padding: '4px 8px',\n    color: 'white',\n    fontSize: '14px'\n  }\n};\n\n// Available waterfall color schemes\nconst waterfallColorSchemeOptions = {\n  grayscale: 'Grayscale',\n  viridis: 'Viridis',\n  plasma: 'Plasma',\n  inferno: 'Inferno',\n  cividis: 'Cividis',\n  turbo: 'Turbo'\n};\nconst SpectrometerMQTT = ({\n  detector,\n  readings = [],\n  onClose,\n  initialPosition = {\n    x: 150,\n    y: 100\n  },\n  detectorId,\n  detectorName,\n  isVisible,\n  position,\n  onMove,\n  onResize,\n  detectorStatus\n}) => {\n  _s();\n  const buttonVariants = useButtonStyles();\n  const [detectorReadings, setDetectorReadings] = useState([]);\n\n  // Panel resizing state\n  const [panelSize, setPanelSize] = useState({\n    width: 1100,\n    height: 750\n  });\n  const [isResizingPanel, setIsResizingPanel] = useState(false);\n  const panelRef = useRef(null);\n\n  // Add state for resize feedback\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n\n  // Subcomponent visibility toggles\n  const [showCamera, setShowCamera] = useState(true);\n  const [showGraph, setShowGraph] = useState(true);\n  const [showWaterfall, setShowWaterfall] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Data state - replace lineData with spectrumData\n  const [spectrumData, setSpectrumData] = useState(null); // Data from spectrometer\n  const [processedData, setProcessedData] = useState(null); // Data from crop processing\n\n  // Track if we're currently using processed crop data\n  const [usingCropData, setUsingCropData] = useState(false);\n\n  // Save/load settings state\n  const [saveMessage, setSaveMessage] = useState('');\n  const [cameraSettings, setCameraSettings] = useState(null);\n  const [calibrationSettings, setCalibrationSettings] = useState(null);\n\n  // Frame accumulation state (shared between Graph and Waterfall)\n  const [frameAccumCount, setFrameAccumCount] = useState(10);\n  const [isAccumulating, setIsAccumulating] = useState(true);\n\n  // Waterfall color scheme state\n  const [waterfallColorScheme, setWaterfallColorScheme] = useState('cividis');\n  const [showWaterfallColorMenu, setShowWaterfallColorMenu] = useState(false);\n\n  // References to component methods\n  const wsRef = useRef(null); // Ref to hold the WebSocket instance\n  const mqttTopicRef = useRef('spectrometer_1'); // Ref to hold the current MQTT topic\n  const cameraRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Handle frame accumulation change\n  const handleFrameAccumCountChange = count => {\n    setFrameAccumCount(count);\n  };\n\n  // Handle accumulation mode toggle\n  const handleAccumulationToggle = isActive => {\n    setIsAccumulating(isActive);\n  };\n\n  // Handle waterfall color scheme change\n  const handleWaterfallColorSchemeChange = scheme => {\n    setWaterfallColorScheme(scheme);\n    setShowWaterfallColorMenu(false);\n  };\n\n  // Process readings when they change\n  useEffect(() => {\n    var _detector$data;\n    if (readings && readings.length > 0 && detector !== null && detector !== void 0 && (_detector$data = detector.data) !== null && _detector$data !== void 0 && _detector$data.properties) {\n      // Process readings here\n      setDetectorReadings(readings);\n    }\n  }, [readings, detector]);\n\n  // Effect for WebSocket connection and message handling\n  useEffect(() => {\n    if (!detectorId) return; // Need detectorId to form topic\n\n    const mainDataTopic = `${detectorId}/response/data`; // Default data topic\n    mqttTopicRef.current = mainDataTopic;\n\n    // Flag to track if the component is still mounted\n    let isMounted = true;\n    console.log('[SpectrometerMQTT] Connecting WebSocket...', WS_URL);\n    const newWs = new WebSocket(WS_URL);\n    wsRef.current = newWs;\n    newWs.onopen = () => {\n      // Check if the component is still mounted and connection wasn't closed\n      if (!isMounted || newWs.readyState !== WebSocket.OPEN) {\n        console.log('[SpectrometerMQTT] WebSocket connected but component unmounted or connection closed');\n        return;\n      }\n      console.log('[SpectrometerMQTT] WebSocket connected');\n      try {\n        // Subscribe to the data topic\n        const subscribeData = {\n          topic: \"common/subscribe\",\n          payload: mainDataTopic\n        };\n\n        // Make sure WebSocket is still valid before sending\n        if (newWs && newWs.readyState === WebSocket.OPEN) {\n          newWs.send(JSON.stringify(subscribeData));\n          console.log(`[SpectrometerMQTT] Subscribed to: ${mainDataTopic}`);\n        } else {\n          console.warn('[SpectrometerMQTT] Cannot subscribe: WebSocket not available or not open');\n        }\n      } catch (err) {\n        console.error('[SpectrometerMQTT] Error in onopen handler:', err);\n      }\n    };\n    newWs.onmessage = event => {\n      if (!isMounted) return;\n      try {\n        const data = JSON.parse(event.data);\n\n        // Check if the message is on the subscribed data topic\n        if (data.topic === mqttTopicRef.current) {\n          let parsedPayload = null;\n          if (data.payload && typeof data.payload === 'string') {\n            try {\n              parsedPayload = JSON.parse(data.payload);\n            } catch (e) {/* Ignore if not JSON */}\n          } else if (data.payload && typeof data.payload === 'object') {\n            parsedPayload = data.payload;\n          }\n\n          // Check if payload contains spectral data\n          if (parsedPayload) {\n            // Check if this is processed graph data (from crop)\n            if (parsedPayload.red && parsedPayload.green && parsedPayload.blue && parsedPayload.intensities) {\n              console.log('[SpectrometerMQTT] Received processed graph data from crop');\n\n              // Transform data to expected format for the graph\n              const graphData = {\n                pixelData: {\n                  timestamp: parsedPayload.timestamp,\n                  positions: parsedPayload.wavelengths,\n                  red: parsedPayload.red,\n                  green: parsedPayload.green,\n                  blue: parsedPayload.blue,\n                  intensity: parsedPayload.intensities,\n                  lineLength: parsedPayload.wavelengths.length\n                }\n              };\n              setProcessedData(graphData);\n              setUsingCropData(true); // Flag that we're using crop data\n            } else if (parsedPayload.red && parsedPayload.green && parsedPayload.blue) {\n              console.log('[SpectrometerMQTT] Received processed graph data from crop');\n\n              // Get calibration data from graph component if available\n              let minWavelength = 450; // Default min wavelength\n              let maxWavelength = 650; // Default max wavelength\n\n              // Try to use calibration points from graph component if it exists\n              if (graphRef.current && graphRef.current.getCalibrationSettings) {\n                const calibrationSettings = graphRef.current.getCalibrationSettings();\n                if (calibrationSettings.calibrationPoints && calibrationSettings.calibrationPoints.length >= 2) {\n                  // Get wavelengths from calibration points\n                  const wavelengths = calibrationSettings.calibrationPoints.map(p => p.wavelength);\n                  minWavelength = Math.min(...wavelengths);\n                  maxWavelength = Math.max(...wavelengths);\n                  console.log('wavelengths:', wavelengths);\n                }\n              }\n              console.log('[SpectrometerMQTT] Calibration settings:', calibrationSettings);\n\n              // Define channel wavelength ranges from spectral_config.json\n              const CHANNEL_RANGES = spectralConfig.CHANNEL_RANGES;\n\n              // Calculate intensity by selecting the appropriate channel based on wavelength\n              const intensity = parsedPayload.wavelengths.map((wavelength, idx) => {\n                // Determine which channel to use based on wavelength\n                if (wavelength >= CHANNEL_RANGES.b[0] && wavelength < CHANNEL_RANGES.b[1]) {\n                  return parsedPayload.blue[idx]; // Blue channel\n                } else if (wavelength >= CHANNEL_RANGES.g[0] && wavelength < CHANNEL_RANGES.g[1]) {\n                  return parsedPayload.green[idx]; // Green channel\n                } else if (wavelength >= CHANNEL_RANGES.r[0] && wavelength <= CHANNEL_RANGES.r[1]) {\n                  return parsedPayload.red[idx]; // Red channel\n                } else {\n                  // Fallback to average if outside defined ranges\n                  return (parsedPayload.red[idx] + parsedPayload.green[idx] + parsedPayload.blue[idx]) / 3;\n                }\n              });\n\n              // Transform data to expected format for the graph\n              const graphData = {\n                pixelData: {\n                  timestamp: parsedPayload.timestamp,\n                  positions: parsedPayload.wavelengths,\n                  red: parsedPayload.red,\n                  green: parsedPayload.green,\n                  blue: parsedPayload.blue,\n                  intensity: intensity,\n                  lineLength: parsedPayload.wavelengths.length\n                }\n              };\n              setProcessedData(graphData);\n              setUsingCropData(true); // Flag that we're using crop data\n            }\n\n            // Check if this has raw data from crop\n            else if (parsedPayload.raw_data) {\n              console.log('[SpectrometerMQTT] Received raw pixel data from crop');\n\n              // Process raw data based on data_type\n              if (parsedPayload.data_type === 'raw_mono') {\n                // Extract first row if raw_data is 2D array, otherwise use as is\n                const rawIntensity = Array.isArray(parsedPayload.raw_data[0]) ? parsedPayload.raw_data[0] : parsedPayload.raw_data;\n                const graphData = {\n                  pixelData: {\n                    timestamp: parsedPayload.timestamp,\n                    positions: parsedPayload.wavelengths,\n                    // Use raw data as the intensity values\n                    red: rawIntensity,\n                    green: rawIntensity,\n                    blue: rawIntensity,\n                    intensity: rawIntensity,\n                    lineLength: rawIntensity.length,\n                    isRawData: true,\n                    bitDepth: parsedPayload.bit_depth || 12,\n                    dataType: parsedPayload.data_type\n                  }\n                };\n                setProcessedData(graphData);\n                setUsingCropData(true);\n              }\n            }\n            // Check if this is raw spectral data (wavelengths + raw channels)\n            else if (parsedPayload.wavelengths && (parsedPayload.raw_data || parsedPayload.raw_red)) {\n              console.log('[SpectrometerMQTT] Received raw spectral data');\n              setSpectrumData(parsedPayload);\n\n              // Only switch to spectral data if we're not actively using crop data\n              if (!usingCropData) {\n                // Create graph data format for raw data\n                const graphData = {\n                  pixelData: {\n                    timestamp: parsedPayload.timestamp || Date.now(),\n                    positions: parsedPayload.wavelengths,\n                    isRawData: true,\n                    bitDepth: parsedPayload.bit_depth || 12,\n                    dataType: parsedPayload.data_type\n                  }\n                };\n\n                // Handle different raw data formats\n                if (parsedPayload.data_type === 'raw_mono' && parsedPayload.raw_data) {\n                  // For monochrome, use raw_data for all channels\n                  graphData.pixelData.red = parsedPayload.raw_data;\n                  graphData.pixelData.green = parsedPayload.raw_data;\n                  graphData.pixelData.blue = parsedPayload.raw_data;\n                  graphData.pixelData.intensity = parsedPayload.raw_data;\n                  graphData.pixelData.lineLength = parsedPayload.raw_data.length;\n                } else if ((parsedPayload.data_type === 'raw_rgb' || parsedPayload.data_type === 'raw_rgba') && parsedPayload.raw_red && parsedPayload.raw_green && parsedPayload.raw_blue) {\n                  // For RGB, use separate channels\n                  graphData.pixelData.red = parsedPayload.raw_red;\n                  graphData.pixelData.green = parsedPayload.raw_green;\n                  graphData.pixelData.blue = parsedPayload.raw_blue;\n                  // Calculate intensity as average of RGB channels\n                  const intensity = parsedPayload.red.map((val, idx) => (val + parsedPayload.green[idx] + parsedPayload.blue[idx]) / 3);\n                  graphData.pixelData.intensity = intensity;\n                  graphData.pixelData.lineLength = parsedPayload.raw_red.length;\n                }\n                setProcessedData(graphData);\n              }\n            }\n            // Legacy support for traditional spectral data (wavelengths + intensities)\n            else if (parsedPayload.wavelengths && parsedPayload.intensities) {\n              console.log('[SpectrometerMQTT] Received traditional spectral data');\n              setSpectrumData(parsedPayload);\n\n              // Only switch to spectral data if we're not actively using crop data\n              if (!usingCropData) {\n                // Normalize positions to 0-1 range\n                const wavelengthRange = [Math.min(...parsedPayload.wavelengths), Math.max(...parsedPayload.wavelengths)];\n                const positions = parsedPayload.wavelengths.map(w => (w - wavelengthRange[0]) / (wavelengthRange[1] - wavelengthRange[0]));\n\n                // Create uniform intensity arrays for RGB\n                const intensity = parsedPayload.intensities;\n\n                // Create graph data format\n                const graphData = {\n                  pixelData: {\n                    timestamp: parsedPayload.timestamp || Date.now(),\n                    positions: positions,\n                    red: intensity,\n                    green: intensity,\n                    blue: intensity,\n                    intensity: intensity,\n                    lineLength: intensity.length,\n                    isRawData: false\n                  }\n                };\n                setProcessedData(graphData);\n              }\n            } else if (parsedPayload.error) {\n              console.warn(`[SpectrometerMQTT] Received error from backend: ${parsedPayload.error}`);\n              // Don't clear data on error - just leave the previous data\n            } else {\n              console.warn('[SpectrometerMQTT] Received data message with unexpected payload:', parsedPayload);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('[SpectrometerMQTT] Error processing WebSocket message:', error, 'Raw:', event.data);\n      }\n    };\n    newWs.onerror = error => {\n      if (!isMounted) return;\n      console.error('[SpectrometerMQTT] WebSocket error:', error);\n    };\n    newWs.onclose = event => {\n      if (!isMounted) return;\n      console.log('[SpectrometerMQTT] WebSocket closed:', event.code, event.reason);\n      if (wsRef.current === newWs) {\n        wsRef.current = null;\n      }\n      // Don't clear data on disconnect - just keep the last values\n    };\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n\n      // Store a reference to the current WebSocket\n      const ws = wsRef.current;\n\n      // Important: Set wsRef.current to null BEFORE closing\n      // This prevents race conditions with the onopen callback\n      wsRef.current = null;\n      if (ws) {\n        console.log('[SpectrometerMQTT] Closing WebSocket connection...');\n        try {\n          // Only close if it's still in a state that can be closed\n          if (ws.readyState === WebSocket.CONNECTING || ws.readyState === WebSocket.OPEN) {\n            ws.close();\n          }\n        } catch (err) {\n          console.error('[SpectrometerMQTT] Error closing WebSocket:', err);\n        }\n      }\n    };\n  }, [detectorId]); // Reconnect if detectorId changes\n\n  // Handle crop data toggle\n  const handleCropDataToggle = isEnabled => {\n    setUsingCropData(isEnabled);\n  };\n\n  // Save camera and calibration settings\n  const saveSettings = () => {\n    try {\n      var _cameraRef$current, _cameraRef$current2, _graphRef$current, _graphRef$current2, _graphRef$current2$ge;\n      // Get camera settings\n      const camSettings = (_cameraRef$current = cameraRef.current) === null || _cameraRef$current === void 0 ? void 0 : _cameraRef$current.getSettings();\n\n      // Get crop frame settings\n      const cropSettings = (_cameraRef$current2 = cameraRef.current) === null || _cameraRef$current2 === void 0 ? void 0 : _cameraRef$current2.getCropSettings();\n\n      // Get calibration settings from graph component\n      const calSettings = (_graphRef$current = graphRef.current) === null || _graphRef$current === void 0 ? void 0 : _graphRef$current.getCalibrationSettings();\n      if (!camSettings && !calSettings && !cropSettings) {\n        console.warn('No settings to save - components may not be mounted');\n        setSaveMessage('No settings to save');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Create a settings object to save\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        cropFrame: cropSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Save waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        },\n        // Save frame accumulation settings\n        frameAccumulation: {\n          count: frameAccumCount,\n          isEnabled: isAccumulating\n        },\n        // Save peak markers settings if available from graph component\n        peakMarkers: ((_graphRef$current2 = graphRef.current) === null || _graphRef$current2 === void 0 ? void 0 : (_graphRef$current2$ge = _graphRef$current2.getPeakSettings) === null || _graphRef$current2$ge === void 0 ? void 0 : _graphRef$current2$ge.call(_graphRef$current2)) || {\n          count: 3,\n          showMarkers: true\n        },\n        // Save component visibility states\n        visibilityState: {\n          camera: showCamera,\n          graph: showGraph,\n          waterfall: showWaterfall,\n          settings: showSettings\n        },\n        // Save crop data state\n        usingCropData: usingCropData\n      };\n\n      // Save to localStorage\n      localStorage.setItem(`detector_settings_${detectorId || 'default'}`, JSON.stringify(settings));\n\n      // Set save message for user feedback\n      setSaveMessage('Settings saved successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n      setSaveMessage('Error saving settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      var _cameraRef$current3, _cameraRef$current4, _graphRef$current3, _graphRef$current4, _graphRef$current4$ge;\n      // Get camera settings\n      const camSettings = (_cameraRef$current3 = cameraRef.current) === null || _cameraRef$current3 === void 0 ? void 0 : _cameraRef$current3.getSettings();\n\n      // Get crop frame settings\n      const cropSettings = (_cameraRef$current4 = cameraRef.current) === null || _cameraRef$current4 === void 0 ? void 0 : _cameraRef$current4.getCropSettings();\n\n      // Get calibration settings from graph component\n      const calSettings = (_graphRef$current3 = graphRef.current) === null || _graphRef$current3 === void 0 ? void 0 : _graphRef$current3.getCalibrationSettings();\n      if (!camSettings && !calSettings && !cropSettings) {\n        console.warn('No settings to export - components may not be mounted');\n        setSaveMessage('No settings to export');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Create a settings object to export\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        cropFrame: cropSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Export waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        },\n        // Export frame accumulation settings\n        frameAccumulation: {\n          count: frameAccumCount,\n          isEnabled: isAccumulating\n        },\n        // Export peak markers settings if available from graph component\n        peakMarkers: ((_graphRef$current4 = graphRef.current) === null || _graphRef$current4 === void 0 ? void 0 : (_graphRef$current4$ge = _graphRef$current4.getPeakSettings) === null || _graphRef$current4$ge === void 0 ? void 0 : _graphRef$current4$ge.call(_graphRef$current4)) || {\n          count: 3,\n          showMarkers: true\n        },\n        // Export component visibility states\n        visibilityState: {\n          camera: showCamera,\n          graph: showGraph,\n          waterfall: showWaterfall,\n          settings: showSettings\n        },\n        // Export crop data state\n        usingCropData: usingCropData\n      };\n\n      // Create a file name with timestamp\n      const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\\./g, '_');\n      const fileName = `detector_settings_${detectorId || 'default'}_${timestamp}.json`;\n\n      // Create a Blob with the JSON data\n      const blob = new Blob([JSON.stringify(settings, null, 2)], {\n        type: 'application/json'\n      });\n\n      // Create a URL for the Blob\n      const url = URL.createObjectURL(blob);\n\n      // Create a temporary link element to trigger the download\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Append to the document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Set save message for user feedback\n      setSaveMessage('Settings exported to file');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    try {\n      var _cameraRef$current5, _savedSettings$waterf, _graphRef$current5;\n      // Get settings from localStorage\n      const savedSettingsStr = localStorage.getItem(`detector_settings_${detectorId || 'default'}`);\n      if (!savedSettingsStr) {\n        setSaveMessage('No saved settings found');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Parse the settings\n      const savedSettings = JSON.parse(savedSettingsStr);\n\n      // Apply camera settings if available\n      if (savedSettings.camera && cameraRef.current) {\n        try {\n          cameraRef.current.applySettings(savedSettings.camera);\n        } catch (err) {\n          console.error('Error applying camera settings:', err);\n        }\n      }\n\n      // Apply crop frame settings if available\n      if (savedSettings.cropFrame && (_cameraRef$current5 = cameraRef.current) !== null && _cameraRef$current5 !== void 0 && _cameraRef$current5.applyCropSettings) {\n        try {\n          cameraRef.current.applyCropSettings(savedSettings.cropFrame);\n        } catch (err) {\n          console.error('Error applying crop frame settings:', err);\n        }\n      }\n\n      // Apply calibration settings if available\n      if (savedSettings.calibration && graphRef.current) {\n        try {\n          graphRef.current.applyCalibrationSettings(savedSettings.calibration);\n        } catch (err) {\n          console.error('Error applying calibration settings:', err);\n        }\n      }\n\n      // Apply waterfall settings if available\n      if ((_savedSettings$waterf = savedSettings.waterfall) !== null && _savedSettings$waterf !== void 0 && _savedSettings$waterf.colorScheme) {\n        setWaterfallColorScheme(savedSettings.waterfall.colorScheme);\n      }\n\n      // Apply frame accumulation settings if available\n      if (savedSettings.frameAccumulation) {\n        if (typeof savedSettings.frameAccumulation.count === 'number') {\n          setFrameAccumCount(savedSettings.frameAccumulation.count);\n        }\n        if (typeof savedSettings.frameAccumulation.isEnabled === 'boolean') {\n          setIsAccumulating(savedSettings.frameAccumulation.isEnabled);\n        }\n      }\n\n      // Apply peak markers settings if available\n      if (savedSettings.peakMarkers && (_graphRef$current5 = graphRef.current) !== null && _graphRef$current5 !== void 0 && _graphRef$current5.applyPeakSettings) {\n        try {\n          graphRef.current.applyPeakSettings(savedSettings.peakMarkers);\n        } catch (err) {\n          console.error('Error applying peak markers settings:', err);\n        }\n      }\n\n      // Apply component visibility state if available\n      if (savedSettings.visibilityState) {\n        if (typeof savedSettings.visibilityState.camera === 'boolean') {\n          setShowCamera(savedSettings.visibilityState.camera);\n        }\n        if (typeof savedSettings.visibilityState.graph === 'boolean') {\n          setShowGraph(savedSettings.visibilityState.graph);\n        }\n        if (typeof savedSettings.visibilityState.waterfall === 'boolean') {\n          setShowWaterfall(savedSettings.visibilityState.waterfall);\n        }\n        if (typeof savedSettings.visibilityState.settings === 'boolean') {\n          setShowSettings(savedSettings.visibilityState.settings);\n        }\n      }\n\n      // Apply crop data state if available\n      if (typeof savedSettings.usingCropData === 'boolean') {\n        setUsingCropData(savedSettings.usingCropData);\n      }\n\n      // Make sure camera is started automatically\n      setTimeout(async () => {\n        if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n          try {\n            await cameraRef.current.startCamera();\n            console.log('Camera started automatically after loading settings');\n          } catch (err) {\n            console.error('Failed to auto-start camera:', err);\n          }\n        }\n      }, 500); // Short delay to allow settings to be applied\n\n      // Set save message for user feedback\n      setSaveMessage('Settings loaded successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      setSaveMessage('Error loading settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Import settings from a JSON file\n  const importSettings = () => {\n    try {\n      // Create a file input element\n      const fileInput = document.createElement('input');\n      fileInput.type = 'file';\n      fileInput.accept = '.json';\n\n      // Handle file selection\n      fileInput.onchange = event => {\n        const file = event.target.files[0];\n        if (!file) return;\n        const reader = new FileReader();\n        reader.onload = e => {\n          try {\n            var _cameraRef$current6, _importedSettings$wat, _graphRef$current6;\n            // Parse the file contents\n            const importedSettings = JSON.parse(e.target.result);\n\n            // Apply camera settings if available\n            if (importedSettings.camera && cameraRef.current) {\n              try {\n                cameraRef.current.applySettings(importedSettings.camera);\n              } catch (err) {\n                console.error('Error applying imported camera settings:', err);\n              }\n            }\n\n            // Apply crop frame settings if available\n            if (importedSettings.cropFrame && (_cameraRef$current6 = cameraRef.current) !== null && _cameraRef$current6 !== void 0 && _cameraRef$current6.applyCropSettings) {\n              try {\n                cameraRef.current.applyCropSettings(importedSettings.cropFrame);\n              } catch (err) {\n                console.error('Error applying imported crop frame settings:', err);\n              }\n            }\n\n            // Apply calibration settings if available\n            if (importedSettings.calibration && graphRef.current) {\n              try {\n                graphRef.current.applyCalibrationSettings(importedSettings.calibration);\n              } catch (err) {\n                console.error('Error applying imported calibration settings:', err);\n              }\n            }\n\n            // Apply waterfall settings if available\n            if ((_importedSettings$wat = importedSettings.waterfall) !== null && _importedSettings$wat !== void 0 && _importedSettings$wat.colorScheme) {\n              setWaterfallColorScheme(importedSettings.waterfall.colorScheme);\n            }\n\n            // Apply frame accumulation settings if available\n            if (importedSettings.frameAccumulation) {\n              if (typeof importedSettings.frameAccumulation.count === 'number') {\n                setFrameAccumCount(importedSettings.frameAccumulation.count);\n              }\n              if (typeof importedSettings.frameAccumulation.isEnabled === 'boolean') {\n                setIsAccumulating(importedSettings.frameAccumulation.isEnabled);\n              }\n            }\n\n            // Apply peak markers settings if available\n            if (importedSettings.peakMarkers && (_graphRef$current6 = graphRef.current) !== null && _graphRef$current6 !== void 0 && _graphRef$current6.applyPeakSettings) {\n              try {\n                graphRef.current.applyPeakSettings(importedSettings.peakMarkers);\n              } catch (err) {\n                console.error('Error applying peak markers settings:', err);\n              }\n            }\n\n            // Apply component visibility state if available\n            if (importedSettings.visibilityState) {\n              if (typeof importedSettings.visibilityState.camera === 'boolean') {\n                setShowCamera(importedSettings.visibilityState.camera);\n              }\n              if (typeof importedSettings.visibilityState.graph === 'boolean') {\n                setShowGraph(importedSettings.visibilityState.graph);\n              }\n              if (typeof importedSettings.visibilityState.waterfall === 'boolean') {\n                setShowWaterfall(importedSettings.visibilityState.waterfall);\n              }\n              if (typeof importedSettings.visibilityState.settings === 'boolean') {\n                setShowSettings(importedSettings.visibilityState.settings);\n              }\n            }\n\n            // Apply crop data state if available\n            if (typeof importedSettings.usingCropData === 'boolean') {\n              setUsingCropData(importedSettings.usingCropData);\n            }\n\n            // Make sure camera is started automatically\n            setTimeout(async () => {\n              if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n                try {\n                  await cameraRef.current.startCamera();\n                  console.log('Camera started automatically after loading settings');\n                } catch (err) {\n                  console.error('Failed to auto-start camera:', err);\n                }\n              }\n            }, 500); // Short delay to allow settings to be applied\n\n            // Set save message for user feedback\n            setSaveMessage('Settings imported successfully');\n            setTimeout(() => setSaveMessage(''), 3000);\n          } catch (parseError) {\n            console.error('Failed to parse imported settings file:', parseError);\n            setSaveMessage('Error: Invalid settings file');\n            setTimeout(() => setSaveMessage(''), 3000);\n          }\n        };\n        reader.onerror = () => {\n          setSaveMessage('Error reading file');\n          setTimeout(() => setSaveMessage(''), 3000);\n        };\n\n        // Read the file as text\n        reader.readAsText(file);\n      };\n\n      // Trigger file selection dialog\n      fileInput.click();\n    } catch (error) {\n      console.error('Failed to import settings:', error);\n      setSaveMessage('Error importing settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Handler for panel resizing - completely rewritten for reliability\n  const handlePanelResizeStart = e => {\n    var _panelRef$current, _panelRef$current2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_panelRef$current = panelRef.current) === null || _panelRef$current === void 0 ? void 0 : _panelRef$current.offsetWidth) || panelSize.width;\n    const startHeight = ((_panelRef$current2 = panelRef.current) === null || _panelRef$current2 === void 0 ? void 0 : _panelRef$current2.offsetHeight) || panelSize.height;\n\n    // Show resize feedback\n    setIsResizingPanel(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaX = moveEvent.clientX - startX;\n      const deltaY = moveEvent.clientY - startY;\n      const newWidth = Math.max(400, startWidth + deltaX);\n      const newHeight = Math.max(300, startHeight + deltaY);\n\n      // Update panel size\n      setPanelSize({\n        width: newWidth,\n        height: newHeight\n      });\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizingPanel(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle visibility of subcomponents\n  const toggleCamera = () => setShowCamera(!showCamera);\n  const toggleGraph = () => setShowGraph(!showGraph);\n  const toggleWaterfall = () => setShowWaterfall(!showWaterfall);\n  const toggleSettings = () => setShowSettings(!showSettings);\n\n  // Styles for toggle buttons\n  const getToggleButtonStyle = isActive => ({\n    ...buttonVariants.smallSecondary,\n    opacity: isActive ? 1 : 0.5,\n    marginRight: '4px',\n    marginBottom: '4px'\n  });\n\n  // Handle subcomponent resize events\n  const handleCameraResize = newSize => {\n    console.log('Camera resized:', newSize);\n    // Additional logic if needed\n  };\n  const handleGraphResize = newSize => {\n    console.log('Graph resized:', newSize);\n    // Additional logic if needed\n  };\n  const handleWaterfallResize = newSize => {\n    console.log('Waterfall resized:', newSize);\n    // Additional logic if needed\n  };\n\n  // Handle settings changes\n  const handleSettingsChange = settings => {\n    console.log('Settings changed:', settings);\n    // Update relevant state/behavior based on settings\n  };\n\n  // Render panel content\n  if (!detector) return null;\n  return /*#__PURE__*/_jsxDEV(DraggablePanel, {\n    title: `MQTT Spectrometer: ${detector.label || detector.id}`,\n    initialPosition: initialPosition,\n    width: panelSize.width,\n    height: panelSize.height,\n    onClose: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: panelRef,\n      style: {\n        ...styles.container,\n        width: `${panelSize.width}px`,\n        height: `${panelSize.height}px`,\n        minHeight: '300px',\n        position: 'relative',\n        border: isResizingPanel ? '1px dashed #4CAF50' : 'none',\n        transition: isResizingPanel ? 'none' : 'border 0.3s ease'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.controlBar,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.controlLabel,\n            children: \"Components:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleCamera,\n            style: getToggleButtonStyle(showCamera),\n            children: showCamera ? '📹 Hide Camera' : '📹 Show Camera'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 930,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleGraph,\n            style: getToggleButtonStyle(showGraph),\n            children: showGraph ? '📊 Hide Graph' : '📊 Show Graph'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleWaterfall,\n            style: getToggleButtonStyle(showWaterfall),\n            children: showWaterfall ? '🌊 Hide Waterfall' : '🌊 Show Waterfall'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 944,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleSettings,\n            style: getToggleButtonStyle(showSettings),\n            children: showSettings ? '⚙️ Hide Settings' : '⚙️ Show Settings'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 951,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: '15px',\n              borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n              paddingLeft: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: saveSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(50, 150, 50, 0.7)'\n              },\n              title: \"Save camera and calibration settings to browser storage\",\n              children: \"\\uD83D\\uDCBE Save Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 959,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: exportSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(120, 120, 30, 0.7)'\n              },\n              title: \"Export camera and calibration settings to JSON file\",\n              children: \"\\uD83D\\uDCE4 Export Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 972,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: loadSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(50, 100, 150, 0.7)'\n              },\n              title: \"Load saved camera and calibration settings from browser storage\",\n              children: \"\\uD83D\\uDCE5 Load Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 985,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: importSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(120, 70, 150, 0.7)'\n              },\n              title: \"Import camera and calibration settings from JSON file\",\n              children: \"\\uD83D\\uDCC1 Import File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 998,\n              columnNumber: 15\n            }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '12px',\n                backgroundColor: 'rgba(0, 0, 0, 0.6)',\n                padding: '2px 6px',\n                borderRadius: '3px',\n                marginLeft: '8px'\n              },\n              children: saveMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1012,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 958,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 927,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 926,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.columnsContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: showCamera ? 'block' : 'none',\n            flex: '1 1 50%',\n            minWidth: '320px',\n            maxWidth: '650px',\n            marginRight: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(MQTTCameraComponent, {\n            ref: cameraRef,\n            onResize: handleCameraResize,\n            detectorId: detectorId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1036,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...styles.rightColumn,\n            flex: '1 1 50%'\n          },\n          children: [showGraph && /*#__PURE__*/_jsxDEV(MQTTGraphComponent, {\n            ref: graphRef,\n            onResize: handleGraphResize,\n            lineData: processedData // Use processedData instead of spectrumData\n            // Pass the frame accumulation props up to parent to manage\n            ,\n            onFrameAccumCountChange: handleFrameAccumCountChange,\n            onAccumulationToggle: handleAccumulationToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1050,\n            columnNumber: 15\n          }, this), showWaterfall && /*#__PURE__*/_jsxDEV(MQTTWaterfallComponent, {\n            onResize: handleWaterfallResize,\n            lineData: processedData // Use processedData instead of spectrumData\n            ,\n            frameAccumCount: frameAccumCount,\n            isAccumulating: isAccumulating,\n            colorScale: waterfallColorScheme,\n            onColorScaleChange: handleWaterfallColorSchemeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1062,\n            columnNumber: 15\n          }, this), showSettings && /*#__PURE__*/_jsxDEV(MQTTSettingsComponent, {\n            onSettingChange: (setting, value) => console.log('Setting changed:', setting, value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1074,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1044,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1027,\n        columnNumber: 9\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          right: '30px',\n          bottom: '30px',\n          padding: '4px 8px',\n          background: 'rgba(0, 0, 0, 0.6)',\n          color: 'white',\n          borderRadius: '3px',\n          fontSize: '12px',\n          zIndex: 1000\n        },\n        children: [Math.round(panelSize.width), \" x \", Math.round(panelSize.height)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handlePanelResizeStart,\n        title: \"Drag to resize panel\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 20 20\",\n          style: {\n            display: 'block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            width: \"20\",\n            height: \"20\",\n            fill: \"transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M14,6 L6,14 M17,9 L9,17 M17,13 L13,17\",\n            stroke: \"white\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 913,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 906,\n    columnNumber: 5\n  }, this);\n};\n_s(SpectrometerMQTT, \"LFr8v+a20kqYcTDS/7TXa/I0RnY=\", false, function () {\n  return [useButtonStyles];\n});\n_c = SpectrometerMQTT;\nexport default SpectrometerMQTT;\nvar _c;\n$RefreshReg$(_c, \"SpectrometerMQTT\");","map":{"version":3,"names":["React","useState","useRef","useEffect","DraggablePanel","useButtonStyles","backgroundVariants","styles","WS_URL","spectralConfig","MQTTCameraComponent","MQTTGraphComponent","MQTTWaterfallComponent","MQTTSettingsComponent","jsxDEV","_jsxDEV","mqttStyles","cameraSettings","marginTop","padding","backgroundColor","borderRadius","mqttInputs","display","alignItems","marginBottom","inputLabel","width","color","fontSize","input","flex","border","waterfallColorSchemeOptions","grayscale","viridis","plasma","inferno","cividis","turbo","SpectrometerMQTT","detector","readings","onClose","initialPosition","x","y","detectorId","detectorName","isVisible","position","onMove","onResize","detectorStatus","_s","buttonVariants","detectorReadings","setDetectorReadings","panelSize","setPanelSize","height","isResizingPanel","setIsResizingPanel","panelRef","showResizeInfo","setShowResizeInfo","showCamera","setShowCamera","showGraph","setShowGraph","showWaterfall","setShowWaterfall","showSettings","setShowSettings","spectrumData","setSpectrumData","processedData","setProcessedData","usingCropData","setUsingCropData","saveMessage","setSaveMessage","setCameraSettings","calibrationSettings","setCalibrationSettings","frameAccumCount","setFrameAccumCount","isAccumulating","setIsAccumulating","waterfallColorScheme","setWaterfallColorScheme","showWaterfallColorMenu","setShowWaterfallColorMenu","wsRef","mqttTopicRef","cameraRef","graphRef","handleFrameAccumCountChange","count","handleAccumulationToggle","isActive","handleWaterfallColorSchemeChange","scheme","_detector$data","length","data","properties","mainDataTopic","current","isMounted","console","log","newWs","WebSocket","onopen","readyState","OPEN","subscribeData","topic","payload","send","JSON","stringify","warn","err","error","onmessage","event","parse","parsedPayload","e","red","green","blue","intensities","graphData","pixelData","timestamp","positions","wavelengths","intensity","lineLength","minWavelength","maxWavelength","getCalibrationSettings","calibrationPoints","map","p","wavelength","Math","min","max","CHANNEL_RANGES","idx","b","g","r","raw_data","data_type","rawIntensity","Array","isArray","isRawData","bitDepth","bit_depth","dataType","raw_red","Date","now","raw_green","raw_blue","val","wavelengthRange","w","onerror","onclose","code","reason","ws","CONNECTING","close","handleCropDataToggle","isEnabled","saveSettings","_cameraRef$current","_cameraRef$current2","_graphRef$current","_graphRef$current2","_graphRef$current2$ge","camSettings","getSettings","cropSettings","getCropSettings","calSettings","setTimeout","settings","camera","calibration","cropFrame","toISOString","waterfall","colorScheme","frameAccumulation","peakMarkers","getPeakSettings","call","showMarkers","visibilityState","graph","localStorage","setItem","exportSettings","_cameraRef$current3","_cameraRef$current4","_graphRef$current3","_graphRef$current4","_graphRef$current4$ge","replace","fileName","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","loadSettings","_cameraRef$current5","_savedSettings$waterf","_graphRef$current5","savedSettingsStr","getItem","savedSettings","applySettings","applyCropSettings","applyCalibrationSettings","applyPeakSettings","startCamera","importSettings","fileInput","accept","onchange","file","target","files","reader","FileReader","onload","_cameraRef$current6","_importedSettings$wat","_graphRef$current6","importedSettings","result","parseError","readAsText","handlePanelResizeStart","_panelRef$current","_panelRef$current2","preventDefault","stopPropagation","startX","clientX","startY","clientY","startWidth","offsetWidth","startHeight","offsetHeight","handleMouseMove","moveEvent","deltaX","deltaY","newWidth","newHeight","handleMouseUp","removeEventListener","addEventListener","toggleCamera","toggleGraph","toggleWaterfall","toggleSettings","getToggleButtonStyle","smallSecondary","opacity","marginRight","handleCameraResize","newSize","handleGraphResize","handleWaterfallResize","handleSettingsChange","title","label","id","children","ref","style","container","minHeight","transition","controlBar","controlLabel","_jsxFileName","lineNumber","columnNumber","onClick","marginLeft","borderLeft","paddingLeft","smallPrimary","columnsContainer","minWidth","maxWidth","rightColumn","lineData","onFrameAccumCountChange","onAccumulationToggle","colorScale","onColorScaleChange","onSettingChange","setting","value","right","bottom","background","zIndex","round","resizeHandle","onMouseDown","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","_c","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/SpectrometerMQTT.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport DraggablePanel from './DraggablePanel';\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\nimport { backgroundVariants } from '../../styles/backgroundStyles';\nimport styles from './styles/USBSpectrometerStyles';\nimport { WS_URL } from '../../config'; // Import WS_URL\nimport spectralConfig from './SpectrometerMQTT/spectral_config.json'; // Import spectral config\n\n// Import subcomponents\nimport MQTTCameraComponent from './SpectrometerMQTT/MQTTCameraComponent';\nimport MQTTGraphComponent from './SpectrometerMQTT/MQTTGraphComponent';\nimport MQTTWaterfallComponent from './SpectrometerMQTT/MQTTWaterfallComponent';\nimport MQTTSettingsComponent from './SpectrometerMQTT/MQTTSettingsComponent';\n\n// Add MQTT-specific styles to complement the existing styles\nconst mqttStyles = {\n  cameraSettings: {\n    marginTop: '10px',\n    padding: '8px',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderRadius: '4px'\n  },\n  mqttInputs: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '8px'\n  },\n  inputLabel: {\n    width: '90px',\n    color: '#ccc',\n    fontSize: '14px'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: 'rgba(60, 60, 60, 0.7)',\n    border: '1px solid rgba(100, 100, 100, 0.5)',\n    borderRadius: '4px',\n    padding: '4px 8px',\n    color: 'white',\n    fontSize: '14px'\n  }\n};\n\n// Available waterfall color schemes\nconst waterfallColorSchemeOptions = {\n  grayscale: 'Grayscale',\n  viridis: 'Viridis',\n  plasma: 'Plasma',\n  inferno: 'Inferno',\n  cividis: 'Cividis',\n  turbo: 'Turbo'\n};\n\nconst SpectrometerMQTT = ({ detector, readings = [], onClose, initialPosition = { x: 150, y: 100 }, detectorId, detectorName, isVisible, position, onMove, onResize, detectorStatus }) => {\n  const buttonVariants = useButtonStyles();\n  const [detectorReadings, setDetectorReadings] = useState([]);\n  \n  // Panel resizing state\n  const [panelSize, setPanelSize] = useState({ width: 1100, height: 750 });\n  const [isResizingPanel, setIsResizingPanel] = useState(false);\n  const panelRef = useRef(null);\n  \n  // Add state for resize feedback\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  \n  // Subcomponent visibility toggles\n  const [showCamera, setShowCamera] = useState(true);\n  const [showGraph, setShowGraph] = useState(true);\n  const [showWaterfall, setShowWaterfall] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  \n  // Data state - replace lineData with spectrumData\n  const [spectrumData, setSpectrumData] = useState(null); // Data from spectrometer\n  const [processedData, setProcessedData] = useState(null); // Data from crop processing\n\n  // Track if we're currently using processed crop data\n  const [usingCropData, setUsingCropData] = useState(false);\n  \n  // Save/load settings state\n  const [saveMessage, setSaveMessage] = useState('');\n  const [cameraSettings, setCameraSettings] = useState(null);\n  const [calibrationSettings, setCalibrationSettings] = useState(null);\n  \n  // Frame accumulation state (shared between Graph and Waterfall)\n  const [frameAccumCount, setFrameAccumCount] = useState(10);\n  const [isAccumulating, setIsAccumulating] = useState(true);\n  \n  // Waterfall color scheme state\n  const [waterfallColorScheme, setWaterfallColorScheme] = useState('cividis');\n  const [showWaterfallColorMenu, setShowWaterfallColorMenu] = useState(false);\n  \n  // References to component methods\n  const wsRef = useRef(null); // Ref to hold the WebSocket instance\n  const mqttTopicRef = useRef('spectrometer_1'); // Ref to hold the current MQTT topic\n  const cameraRef = useRef(null);\n  const graphRef = useRef(null);\n  \n  // Handle frame accumulation change\n  const handleFrameAccumCountChange = (count) => {\n    setFrameAccumCount(count);\n  };\n  \n  // Handle accumulation mode toggle\n  const handleAccumulationToggle = (isActive) => {\n    setIsAccumulating(isActive);\n  };\n  \n  // Handle waterfall color scheme change\n  const handleWaterfallColorSchemeChange = (scheme) => {\n    setWaterfallColorScheme(scheme);\n    setShowWaterfallColorMenu(false);\n  };\n  \n  // Process readings when they change\n  useEffect(() => {\n    if (readings && readings.length > 0 && detector?.data?.properties) {\n      // Process readings here\n      setDetectorReadings(readings);\n    }\n  }, [readings, detector]);\n  \n  // Effect for WebSocket connection and message handling\n  useEffect(() => {\n    if (!detectorId) return; // Need detectorId to form topic\n\n    const mainDataTopic = `${detectorId}/response/data`; // Default data topic\n    mqttTopicRef.current = mainDataTopic;\n\n    // Flag to track if the component is still mounted\n    let isMounted = true;\n\n    console.log('[SpectrometerMQTT] Connecting WebSocket...', WS_URL);\n    const newWs = new WebSocket(WS_URL);\n    wsRef.current = newWs;\n\n    newWs.onopen = () => {\n      // Check if the component is still mounted and connection wasn't closed\n      if (!isMounted || newWs.readyState !== WebSocket.OPEN) {\n        console.log('[SpectrometerMQTT] WebSocket connected but component unmounted or connection closed');\n        return;\n      }\n\n      console.log('[SpectrometerMQTT] WebSocket connected');\n\n      try {\n        // Subscribe to the data topic\n        const subscribeData = {\n          topic: \"common/subscribe\",\n          payload: mainDataTopic\n        };\n        \n        // Make sure WebSocket is still valid before sending\n        if (newWs && newWs.readyState === WebSocket.OPEN) {\n          newWs.send(JSON.stringify(subscribeData));\n          console.log(`[SpectrometerMQTT] Subscribed to: ${mainDataTopic}`);\n        } else {\n          console.warn('[SpectrometerMQTT] Cannot subscribe: WebSocket not available or not open');\n        }\n      } catch (err) {\n        console.error('[SpectrometerMQTT] Error in onopen handler:', err);\n      }\n    };\n\n    newWs.onmessage = (event) => {\n      if (!isMounted) return;\n      \n      try {\n        const data = JSON.parse(event.data);\n\n        // Check if the message is on the subscribed data topic\n        if (data.topic === mqttTopicRef.current) {\n          let parsedPayload = null;\n          if (data.payload && typeof data.payload === 'string') {\n            try {\n              parsedPayload = JSON.parse(data.payload);\n            } catch (e) { /* Ignore if not JSON */ }\n          } else if (data.payload && typeof data.payload === 'object') {\n            parsedPayload = data.payload;\n          }\n\n          // Check if payload contains spectral data\n          if (parsedPayload) {\n            // Check if this is processed graph data (from crop)\n            if (parsedPayload.red && parsedPayload.green && parsedPayload.blue && parsedPayload.intensities) {\n              console.log('[SpectrometerMQTT] Received processed graph data from crop');\n              \n              // Transform data to expected format for the graph\n              const graphData = {\n                pixelData: {\n                  timestamp: parsedPayload.timestamp,\n                  positions: parsedPayload.wavelengths,\n                  red: parsedPayload.red,\n                  green: parsedPayload.green,\n                  blue: parsedPayload.blue,\n                  intensity: parsedPayload.intensities,\n                  lineLength: parsedPayload.wavelengths.length\n                }\n              };\n              \n              setProcessedData(graphData);\n              setUsingCropData(true);  // Flag that we're using crop data\n            }\n            else if (parsedPayload.red && parsedPayload.green && parsedPayload.blue ) {\n              console.log('[SpectrometerMQTT] Received processed graph data from crop');\n\n              // Get calibration data from graph component if available\n              let minWavelength = 450; // Default min wavelength\n              let maxWavelength = 650; // Default max wavelength\n              \n              // Try to use calibration points from graph component if it exists\n              if (graphRef.current && graphRef.current.getCalibrationSettings) {\n                const calibrationSettings = graphRef.current.getCalibrationSettings();\n                if (calibrationSettings.calibrationPoints && calibrationSettings.calibrationPoints.length >= 2) {\n                  // Get wavelengths from calibration points\n                  const wavelengths = calibrationSettings.calibrationPoints.map(p => p.wavelength);\n                  minWavelength = Math.min(...wavelengths);\n                  maxWavelength = Math.max(...wavelengths);\n                  console.log('wavelengths:', wavelengths);\n                }\n              }\n              console.log('[SpectrometerMQTT] Calibration settings:', calibrationSettings);\n              \n              // Define channel wavelength ranges from spectral_config.json\n              const CHANNEL_RANGES = spectralConfig.CHANNEL_RANGES;\n              \n              // Calculate intensity by selecting the appropriate channel based on wavelength\n              const intensity = parsedPayload.wavelengths.map((wavelength, idx) => {\n                // Determine which channel to use based on wavelength\n                if (wavelength >= CHANNEL_RANGES.b[0] && wavelength < CHANNEL_RANGES.b[1]) {\n                  return parsedPayload.blue[idx]; // Blue channel\n                } else if (wavelength >= CHANNEL_RANGES.g[0] && wavelength < CHANNEL_RANGES.g[1]) {\n                  return parsedPayload.green[idx]; // Green channel\n                } else if (wavelength >= CHANNEL_RANGES.r[0] && wavelength <= CHANNEL_RANGES.r[1]) {\n                  return parsedPayload.red[idx]; // Red channel\n                } else {\n                  // Fallback to average if outside defined ranges\n                  return (parsedPayload.red[idx] + parsedPayload.green[idx] + parsedPayload.blue[idx]) / 3;\n                }\n              });\n              \n              // Transform data to expected format for the graph\n              const graphData = {\n                pixelData: {\n                  timestamp: parsedPayload.timestamp,\n                  positions: parsedPayload.wavelengths,\n                  red: parsedPayload.red,\n                  green: parsedPayload.green,\n                  blue: parsedPayload.blue,\n                  intensity: intensity,\n                  lineLength: parsedPayload.wavelengths.length\n                }\n              };\n              \n              setProcessedData(graphData);\n              setUsingCropData(true);  // Flag that we're using crop data\n            }\n            \n            // Check if this has raw data from crop\n            else if (parsedPayload.raw_data) {\n              console.log('[SpectrometerMQTT] Received raw pixel data from crop');\n              \n              // Process raw data based on data_type\n              if (parsedPayload.data_type === 'raw_mono') {\n                // Extract first row if raw_data is 2D array, otherwise use as is\n                const rawIntensity = Array.isArray(parsedPayload.raw_data[0]) ? \n                  parsedPayload.raw_data[0] : parsedPayload.raw_data;\n                \n                const graphData = {\n                  pixelData: {\n                    timestamp: parsedPayload.timestamp,\n                    positions: parsedPayload.wavelengths,\n                    // Use raw data as the intensity values\n                    red: rawIntensity,\n                    green: rawIntensity,\n                    blue: rawIntensity,\n                    intensity: rawIntensity,\n                    lineLength: rawIntensity.length,\n                    isRawData: true,\n                    bitDepth: parsedPayload.bit_depth || 12,\n                    dataType: parsedPayload.data_type\n                  }\n                };\n                \n                setProcessedData(graphData);\n                setUsingCropData(true);\n              }\n            }\n            // Check if this is raw spectral data (wavelengths + raw channels)\n            else if (parsedPayload.wavelengths && (parsedPayload.raw_data || parsedPayload.raw_red)) {\n              console.log('[SpectrometerMQTT] Received raw spectral data');\n              setSpectrumData(parsedPayload);\n              \n              // Only switch to spectral data if we're not actively using crop data\n              if (!usingCropData) {\n                // Create graph data format for raw data\n                const graphData = {\n                  pixelData: {\n                    timestamp: parsedPayload.timestamp || Date.now(),\n                    positions: parsedPayload.wavelengths,\n                    isRawData: true,\n                    bitDepth: parsedPayload.bit_depth || 12,\n                    dataType: parsedPayload.data_type\n                  }\n                };\n                \n                // Handle different raw data formats\n                if (parsedPayload.data_type === 'raw_mono' && parsedPayload.raw_data) {\n                  // For monochrome, use raw_data for all channels\n                  graphData.pixelData.red = parsedPayload.raw_data;\n                  graphData.pixelData.green = parsedPayload.raw_data;\n                  graphData.pixelData.blue = parsedPayload.raw_data;\n                  graphData.pixelData.intensity = parsedPayload.raw_data;\n                  graphData.pixelData.lineLength = parsedPayload.raw_data.length;\n                } \n                else if ((parsedPayload.data_type === 'raw_rgb' || parsedPayload.data_type === 'raw_rgba') && \n                         parsedPayload.raw_red && parsedPayload.raw_green && parsedPayload.raw_blue) {\n                  // For RGB, use separate channels\n                  graphData.pixelData.red = parsedPayload.raw_red;\n                  graphData.pixelData.green = parsedPayload.raw_green;\n                  graphData.pixelData.blue = parsedPayload.raw_blue;\n                  // Calculate intensity as average of RGB channels\n                  const intensity = parsedPayload.red.map((val, idx) => \n                    (val + parsedPayload.green[idx] + parsedPayload.blue[idx]) / 3\n                  );\n                  graphData.pixelData.intensity = intensity;\n                  graphData.pixelData.lineLength = parsedPayload.raw_red.length;\n                }\n                \n                setProcessedData(graphData);\n              }\n            }\n            // Legacy support for traditional spectral data (wavelengths + intensities)\n            else if (parsedPayload.wavelengths && parsedPayload.intensities) {\n              console.log('[SpectrometerMQTT] Received traditional spectral data');\n              setSpectrumData(parsedPayload);\n              \n              // Only switch to spectral data if we're not actively using crop data\n              if (!usingCropData) {\n                // Normalize positions to 0-1 range\n                const wavelengthRange = [\n                  Math.min(...parsedPayload.wavelengths), \n                  Math.max(...parsedPayload.wavelengths)\n                ];\n                \n                const positions = parsedPayload.wavelengths.map(w => \n                  (w - wavelengthRange[0]) / (wavelengthRange[1] - wavelengthRange[0])\n                );\n                \n                // Create uniform intensity arrays for RGB\n                const intensity = parsedPayload.intensities;\n                \n                // Create graph data format\n                const graphData = {\n                  pixelData: {\n                    timestamp: parsedPayload.timestamp || Date.now(),\n                    positions: positions,\n                    red: intensity,\n                    green: intensity,\n                    blue: intensity,\n                    intensity: intensity,\n                    lineLength: intensity.length,\n                    isRawData: false\n                  }\n                };\n                \n                setProcessedData(graphData);\n              }\n            } else if (parsedPayload.error) {\n              console.warn(`[SpectrometerMQTT] Received error from backend: ${parsedPayload.error}`);\n              // Don't clear data on error - just leave the previous data\n            } else {\n              console.warn('[SpectrometerMQTT] Received data message with unexpected payload:', parsedPayload);\n            }\n          }\n        }\n\n      } catch (error) {\n        console.error('[SpectrometerMQTT] Error processing WebSocket message:', error, 'Raw:', event.data);\n      }\n    };\n\n    newWs.onerror = (error) => {\n      if (!isMounted) return;\n      console.error('[SpectrometerMQTT] WebSocket error:', error);\n    };\n\n    newWs.onclose = (event) => {\n      if (!isMounted) return;\n      console.log('[SpectrometerMQTT] WebSocket closed:', event.code, event.reason);\n      if (wsRef.current === newWs) {\n        wsRef.current = null;\n      }\n      // Don't clear data on disconnect - just keep the last values\n    };\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n      \n      // Store a reference to the current WebSocket\n      const ws = wsRef.current;\n      \n      // Important: Set wsRef.current to null BEFORE closing\n      // This prevents race conditions with the onopen callback\n      wsRef.current = null;\n      \n      if (ws) {\n        console.log('[SpectrometerMQTT] Closing WebSocket connection...');\n        try {\n          // Only close if it's still in a state that can be closed\n          if (ws.readyState === WebSocket.CONNECTING || \n              ws.readyState === WebSocket.OPEN) {\n            ws.close();\n          }\n        } catch (err) {\n          console.error('[SpectrometerMQTT] Error closing WebSocket:', err);\n        }\n      }\n    };\n\n  }, [detectorId]); // Reconnect if detectorId changes\n\n  // Handle crop data toggle\n  const handleCropDataToggle = (isEnabled) => {\n    setUsingCropData(isEnabled);\n  };\n  \n  // Save camera and calibration settings\n  const saveSettings = () => {\n    try {\n      // Get camera settings\n      const camSettings = cameraRef.current?.getSettings();\n      \n      // Get crop frame settings\n      const cropSettings = cameraRef.current?.getCropSettings();\n      \n      // Get calibration settings from graph component\n      const calSettings = graphRef.current?.getCalibrationSettings();\n      \n      if (!camSettings && !calSettings && !cropSettings) {\n        console.warn('No settings to save - components may not be mounted');\n        setSaveMessage('No settings to save');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n      \n      // Create a settings object to save\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        cropFrame: cropSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Save waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        },\n        // Save frame accumulation settings\n        frameAccumulation: {\n          count: frameAccumCount,\n          isEnabled: isAccumulating\n        },\n        // Save peak markers settings if available from graph component\n        peakMarkers: graphRef.current?.getPeakSettings?.() || {\n          count: 3,\n          showMarkers: true\n        },\n        // Save component visibility states\n        visibilityState: {\n          camera: showCamera,\n          graph: showGraph,\n          waterfall: showWaterfall,\n          settings: showSettings\n        },\n        // Save crop data state\n        usingCropData: usingCropData\n      };\n      \n      // Save to localStorage\n      localStorage.setItem(`detector_settings_${detectorId || 'default'}`, JSON.stringify(settings));\n      \n      // Set save message for user feedback\n      setSaveMessage('Settings saved successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n      setSaveMessage('Error saving settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n  \n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      // Get camera settings\n      const camSettings = cameraRef.current?.getSettings();\n      \n      // Get crop frame settings\n      const cropSettings = cameraRef.current?.getCropSettings();\n      \n      // Get calibration settings from graph component\n      const calSettings = graphRef.current?.getCalibrationSettings();\n      \n      if (!camSettings && !calSettings && !cropSettings) {\n        console.warn('No settings to export - components may not be mounted');\n        setSaveMessage('No settings to export');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n      \n      // Create a settings object to export\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        cropFrame: cropSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Export waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        },\n        // Export frame accumulation settings\n        frameAccumulation: {\n          count: frameAccumCount,\n          isEnabled: isAccumulating\n        },\n        // Export peak markers settings if available from graph component\n        peakMarkers: graphRef.current?.getPeakSettings?.() || {\n          count: 3,\n          showMarkers: true\n        },\n        // Export component visibility states\n        visibilityState: {\n          camera: showCamera,\n          graph: showGraph,\n          waterfall: showWaterfall,\n          settings: showSettings\n        },\n        // Export crop data state\n        usingCropData: usingCropData\n      };\n      \n      // Create a file name with timestamp\n      const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\\./g, '_');\n      const fileName = `detector_settings_${detectorId || 'default'}_${timestamp}.json`;\n      \n      // Create a Blob with the JSON data\n      const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\n      \n      // Create a URL for the Blob\n      const url = URL.createObjectURL(blob);\n      \n      // Create a temporary link element to trigger the download\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      \n      // Append to the document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n      \n      // Set save message for user feedback\n      setSaveMessage('Settings exported to file');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n  \n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    try {\n      // Get settings from localStorage\n      const savedSettingsStr = localStorage.getItem(`detector_settings_${detectorId || 'default'}`);\n      if (!savedSettingsStr) {\n        setSaveMessage('No saved settings found');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n      \n      // Parse the settings\n      const savedSettings = JSON.parse(savedSettingsStr);\n      \n      // Apply camera settings if available\n      if (savedSettings.camera && cameraRef.current) {\n        try {\n          cameraRef.current.applySettings(savedSettings.camera);\n        } catch (err) {\n          console.error('Error applying camera settings:', err);\n        }\n      }\n      \n      // Apply crop frame settings if available\n      if (savedSettings.cropFrame && cameraRef.current?.applyCropSettings) {\n        try {\n          cameraRef.current.applyCropSettings(savedSettings.cropFrame);\n        } catch (err) {\n          console.error('Error applying crop frame settings:', err);\n        }\n      }\n      \n      // Apply calibration settings if available\n      if (savedSettings.calibration && graphRef.current) {\n        try {\n          graphRef.current.applyCalibrationSettings(savedSettings.calibration);\n        } catch (err) {\n          console.error('Error applying calibration settings:', err);\n        }\n      }\n      \n      // Apply waterfall settings if available\n      if (savedSettings.waterfall?.colorScheme) {\n        setWaterfallColorScheme(savedSettings.waterfall.colorScheme);\n      }\n      \n      // Apply frame accumulation settings if available\n      if (savedSettings.frameAccumulation) {\n        if (typeof savedSettings.frameAccumulation.count === 'number') {\n          setFrameAccumCount(savedSettings.frameAccumulation.count);\n        }\n        if (typeof savedSettings.frameAccumulation.isEnabled === 'boolean') {\n          setIsAccumulating(savedSettings.frameAccumulation.isEnabled);\n        }\n      }\n      \n      // Apply peak markers settings if available\n      if (savedSettings.peakMarkers && graphRef.current?.applyPeakSettings) {\n        try {\n          graphRef.current.applyPeakSettings(savedSettings.peakMarkers);\n        } catch (err) {\n          console.error('Error applying peak markers settings:', err);\n        }\n      }\n      \n      // Apply component visibility state if available\n      if (savedSettings.visibilityState) {\n        if (typeof savedSettings.visibilityState.camera === 'boolean') {\n          setShowCamera(savedSettings.visibilityState.camera);\n        }\n        if (typeof savedSettings.visibilityState.graph === 'boolean') {\n          setShowGraph(savedSettings.visibilityState.graph);\n        }\n        if (typeof savedSettings.visibilityState.waterfall === 'boolean') {\n          setShowWaterfall(savedSettings.visibilityState.waterfall);\n        }\n        if (typeof savedSettings.visibilityState.settings === 'boolean') {\n          setShowSettings(savedSettings.visibilityState.settings);\n        }\n      }\n      \n      // Apply crop data state if available\n      if (typeof savedSettings.usingCropData === 'boolean') {\n        setUsingCropData(savedSettings.usingCropData);\n      }\n      \n      // Make sure camera is started automatically\n      setTimeout(async () => {\n        if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n          try {\n            await cameraRef.current.startCamera();\n            console.log('Camera started automatically after loading settings');\n          } catch (err) {\n            console.error('Failed to auto-start camera:', err);\n          }\n        }\n      }, 500); // Short delay to allow settings to be applied\n      \n      // Set save message for user feedback\n      setSaveMessage('Settings loaded successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      setSaveMessage('Error loading settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n  \n  // Import settings from a JSON file\n  const importSettings = () => {\n    try {\n      // Create a file input element\n      const fileInput = document.createElement('input');\n      fileInput.type = 'file';\n      fileInput.accept = '.json';\n      \n      // Handle file selection\n      fileInput.onchange = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n        \n        const reader = new FileReader();\n        \n        reader.onload = (e) => {\n          try {\n            // Parse the file contents\n            const importedSettings = JSON.parse(e.target.result);\n            \n            // Apply camera settings if available\n            if (importedSettings.camera && cameraRef.current) {\n              try {\n                cameraRef.current.applySettings(importedSettings.camera);\n              } catch (err) {\n                console.error('Error applying imported camera settings:', err);\n              }\n            }\n            \n            // Apply crop frame settings if available\n            if (importedSettings.cropFrame && cameraRef.current?.applyCropSettings) {\n              try {\n                cameraRef.current.applyCropSettings(importedSettings.cropFrame);\n              } catch (err) {\n                console.error('Error applying imported crop frame settings:', err);\n              }\n            }\n            \n            // Apply calibration settings if available\n            if (importedSettings.calibration && graphRef.current) {\n              try {\n                graphRef.current.applyCalibrationSettings(importedSettings.calibration);\n              } catch (err) {\n                console.error('Error applying imported calibration settings:', err);\n              }\n            }\n            \n            // Apply waterfall settings if available\n            if (importedSettings.waterfall?.colorScheme) {\n              setWaterfallColorScheme(importedSettings.waterfall.colorScheme);\n            }\n            \n            // Apply frame accumulation settings if available\n            if (importedSettings.frameAccumulation) {\n              if (typeof importedSettings.frameAccumulation.count === 'number') {\n                setFrameAccumCount(importedSettings.frameAccumulation.count);\n              }\n              if (typeof importedSettings.frameAccumulation.isEnabled === 'boolean') {\n                setIsAccumulating(importedSettings.frameAccumulation.isEnabled);\n              }\n            }\n            \n            // Apply peak markers settings if available\n            if (importedSettings.peakMarkers && graphRef.current?.applyPeakSettings) {\n              try {\n                graphRef.current.applyPeakSettings(importedSettings.peakMarkers);\n              } catch (err) {\n                console.error('Error applying peak markers settings:', err);\n              }\n            }\n            \n            // Apply component visibility state if available\n            if (importedSettings.visibilityState) {\n              if (typeof importedSettings.visibilityState.camera === 'boolean') {\n                setShowCamera(importedSettings.visibilityState.camera);\n              }\n              if (typeof importedSettings.visibilityState.graph === 'boolean') {\n                setShowGraph(importedSettings.visibilityState.graph);\n              }\n              if (typeof importedSettings.visibilityState.waterfall === 'boolean') {\n                setShowWaterfall(importedSettings.visibilityState.waterfall);\n              }\n              if (typeof importedSettings.visibilityState.settings === 'boolean') {\n                setShowSettings(importedSettings.visibilityState.settings);\n              }\n            }\n            \n            // Apply crop data state if available\n            if (typeof importedSettings.usingCropData === 'boolean') {\n              setUsingCropData(importedSettings.usingCropData);\n            }\n            \n            // Make sure camera is started automatically\n            setTimeout(async () => {\n              if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n                try {\n                  await cameraRef.current.startCamera();\n                  console.log('Camera started automatically after loading settings');\n                } catch (err) {\n                  console.error('Failed to auto-start camera:', err);\n                }\n              }\n            }, 500); // Short delay to allow settings to be applied\n            \n            // Set save message for user feedback\n            setSaveMessage('Settings imported successfully');\n            setTimeout(() => setSaveMessage(''), 3000);\n          } catch (parseError) {\n            console.error('Failed to parse imported settings file:', parseError);\n            setSaveMessage('Error: Invalid settings file');\n            setTimeout(() => setSaveMessage(''), 3000);\n          }\n        };\n        \n        reader.onerror = () => {\n          setSaveMessage('Error reading file');\n          setTimeout(() => setSaveMessage(''), 3000);\n        };\n        \n        // Read the file as text\n        reader.readAsText(file);\n      };\n      \n      // Trigger file selection dialog\n      fileInput.click();\n    } catch (error) {\n      console.error('Failed to import settings:', error);\n      setSaveMessage('Error importing settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n  \n  // Handler for panel resizing - completely rewritten for reliability\n  const handlePanelResizeStart = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = panelRef.current?.offsetWidth || panelSize.width;\n    const startHeight = panelRef.current?.offsetHeight || panelSize.height;\n    \n    // Show resize feedback\n    setIsResizingPanel(true);\n    setShowResizeInfo(true);\n    \n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaX = moveEvent.clientX - startX;\n      const deltaY = moveEvent.clientY - startY;\n      \n      const newWidth = Math.max(400, startWidth + deltaX);\n      const newHeight = Math.max(300, startHeight + deltaY);\n      \n      // Update panel size\n      setPanelSize({\n        width: newWidth,\n        height: newHeight\n      });\n      \n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n    \n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      \n      setIsResizingPanel(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n    \n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Toggle visibility of subcomponents\n  const toggleCamera = () => setShowCamera(!showCamera);\n  const toggleGraph = () => setShowGraph(!showGraph);\n  const toggleWaterfall = () => setShowWaterfall(!showWaterfall);\n  const toggleSettings = () => setShowSettings(!showSettings);\n  \n  // Styles for toggle buttons\n  const getToggleButtonStyle = (isActive) => ({\n    ...buttonVariants.smallSecondary,\n    opacity: isActive ? 1 : 0.5,\n    marginRight: '4px',\n    marginBottom: '4px'\n  });\n  \n  // Handle subcomponent resize events\n  const handleCameraResize = (newSize) => {\n    console.log('Camera resized:', newSize);\n    // Additional logic if needed\n  };\n  \n  const handleGraphResize = (newSize) => {\n    console.log('Graph resized:', newSize);\n    // Additional logic if needed\n  };\n  \n  const handleWaterfallResize = (newSize) => {\n    console.log('Waterfall resized:', newSize);\n    // Additional logic if needed\n  };\n  \n  // Handle settings changes\n  const handleSettingsChange = (settings) => {\n    console.log('Settings changed:', settings);\n    // Update relevant state/behavior based on settings\n  };\n  \n  // Render panel content\n  if (!detector) return null;\n  \n  return (\n    <DraggablePanel \n      title={`MQTT Spectrometer: ${detector.label || detector.id}`}\n      initialPosition={initialPosition}\n      width={panelSize.width}\n      height={panelSize.height}\n      onClose={onClose}\n    >\n      <div \n        ref={panelRef}\n        style={{\n          ...styles.container,\n          width: `${panelSize.width}px`,\n          height: `${panelSize.height}px`,\n          minHeight: '300px',\n          position: 'relative',\n          border: isResizingPanel ? '1px dashed #4CAF50' : 'none',\n          transition: isResizingPanel ? 'none' : 'border 0.3s ease',\n        }}\n      >\n        {/* Top control bar */}\n        <div style={styles.controlBar}>\n          <div>\n            <span style={styles.controlLabel}>Components:</span>\n            \n            <button \n              onClick={toggleCamera} \n              style={getToggleButtonStyle(showCamera)}\n            >\n              {showCamera ? '📹 Hide Camera' : '📹 Show Camera'}\n            </button>\n            \n            <button \n              onClick={toggleGraph} \n              style={getToggleButtonStyle(showGraph)}\n            >\n              {showGraph ? '📊 Hide Graph' : '📊 Show Graph'}\n            </button>\n            \n            <button \n              onClick={toggleWaterfall} \n              style={getToggleButtonStyle(showWaterfall)}\n            >\n              {showWaterfall ? '🌊 Hide Waterfall' : '🌊 Show Waterfall'}\n            </button>\n            \n            <button \n              onClick={toggleSettings} \n              style={getToggleButtonStyle(showSettings)}\n            >\n              {showSettings ? '⚙️ Hide Settings' : '⚙️ Show Settings'}\n            </button>\n            \n            <span style={{ marginLeft: '15px', borderLeft: '1px solid rgba(255, 255, 255, 0.2)', paddingLeft: '10px' }}>\n              <button \n                onClick={saveSettings} \n                style={{\n                  ...buttonVariants.smallPrimary,\n                  marginRight: '4px',\n                  marginBottom: '4px',\n                  backgroundColor: 'rgba(50, 150, 50, 0.7)'\n                }}\n                title=\"Save camera and calibration settings to browser storage\"\n              >\n                💾 Save Settings\n              </button>\n              \n              <button \n                onClick={exportSettings} \n                style={{\n                  ...buttonVariants.smallPrimary,\n                  marginRight: '4px',\n                  marginBottom: '4px',\n                  backgroundColor: 'rgba(120, 120, 30, 0.7)'\n                }}\n                title=\"Export camera and calibration settings to JSON file\"\n              >\n                📤 Export Settings\n              </button>\n              \n              <button \n                onClick={loadSettings} \n                style={{\n                  ...buttonVariants.smallPrimary,\n                  marginRight: '4px',\n                  marginBottom: '4px',\n                  backgroundColor: 'rgba(50, 100, 150, 0.7)'\n                }}\n                title=\"Load saved camera and calibration settings from browser storage\"\n              >\n                📥 Load Settings\n              </button>\n              \n              <button \n                onClick={importSettings} \n                style={{\n                  ...buttonVariants.smallPrimary,\n                  marginRight: '4px',\n                  marginBottom: '4px',\n                  backgroundColor: 'rgba(120, 70, 150, 0.7)'\n                }}\n                title=\"Import camera and calibration settings from JSON file\"\n              >\n                📁 Import File\n              </button>\n              \n              {saveMessage && (\n                <span style={{\n                  fontSize: '12px',\n                  backgroundColor: 'rgba(0, 0, 0, 0.6)',\n                  padding: '2px 6px',\n                  borderRadius: '3px',\n                  marginLeft: '8px'\n                }}>\n                  {saveMessage}\n                </span>\n              )}\n            </span>\n          </div>\n        </div>\n        \n        {/* Two-column layout container */}\n        <div style={styles.columnsContainer}>\n          {/* Left column - Camera component */}\n          <div style={{ \n            display: showCamera ? 'block' : 'none',\n            flex: '1 1 50%',\n            minWidth: '320px',\n            maxWidth: '650px',\n            marginRight: '10px'\n          }}>\n            <MQTTCameraComponent\n              ref={cameraRef}\n              onResize={handleCameraResize}\n              detectorId={detectorId}\n            />\n          </div>\n          \n          {/* Right column with multiple components */}\n          <div style={{\n            ...styles.rightColumn,\n            flex: '1 1 50%'\n          }}>\n            {/* Graph component */}\n            {showGraph && (\n              <MQTTGraphComponent \n                ref={graphRef}\n                onResize={handleGraphResize}\n                lineData={processedData}  // Use processedData instead of spectrumData\n                // Pass the frame accumulation props up to parent to manage\n                onFrameAccumCountChange={handleFrameAccumCountChange}\n                onAccumulationToggle={handleAccumulationToggle}\n              />\n            )}\n            \n            {/* Waterfall component */}\n            {showWaterfall && (\n              <MQTTWaterfallComponent \n                onResize={handleWaterfallResize}\n                lineData={processedData}  // Use processedData instead of spectrumData\n                frameAccumCount={frameAccumCount}\n                isAccumulating={isAccumulating}\n                colorScale={waterfallColorScheme}\n                onColorScaleChange={handleWaterfallColorSchemeChange}\n              />\n            )}\n            \n            {/* Settings component */}\n            {showSettings && (\n              <MQTTSettingsComponent \n                onSettingChange={(setting, value) => console.log('Setting changed:', setting, value)}\n              />\n            )}\n          </div>\n        </div>\n        \n        {/* Show resize info when active */}\n        {showResizeInfo && (\n          <div style={{\n            position: 'absolute',\n            right: '30px',\n            bottom: '30px',\n            padding: '4px 8px',\n            background: 'rgba(0, 0, 0, 0.6)',\n            color: 'white',\n            borderRadius: '3px',\n            fontSize: '12px',\n            zIndex: 1000\n          }}>\n            {Math.round(panelSize.width)} x {Math.round(panelSize.height)}\n          </div>\n        )}\n        \n        {/* Panel resize handle - make sure this comes last */}\n        <div \n          style={styles.resizeHandle}\n          onMouseDown={handlePanelResizeStart}\n          title=\"Drag to resize panel\"\n        >\n          <svg \n            width=\"20\" \n            height=\"20\" \n            viewBox=\"0 0 20 20\" \n            style={{ display: 'block' }}\n          >\n            <rect width=\"20\" height=\"20\" fill=\"transparent\" />\n            <path \n              d=\"M14,6 L6,14 M17,9 L9,17 M17,13 L13,17\" \n              stroke=\"white\" \n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n            />\n          </svg>\n        </div>\n      </div>\n    </DraggablePanel>\n  );\n};\n\nexport default SpectrometerMQTT; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}