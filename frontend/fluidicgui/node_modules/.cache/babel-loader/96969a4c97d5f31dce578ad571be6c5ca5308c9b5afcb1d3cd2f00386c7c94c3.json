{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\SpectrometerMQTT\\\\MQTTGraphComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = /*#__PURE__*/_s(/*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    onResize,\n    lineData,\n    onFrameAccumCountChange,\n    onAccumulationToggle,\n    getCameraSettings,\n    applyCameraSettings,\n    applyCropSettings\n  } = props;\n  const buttonVariants = useButtonStyles();\n  const [graphSize, setGraphSize] = useState({\n    width: '100%',\n    height: 200\n  });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [displayChannels, setDisplayChannels] = useState({\n    red: false,\n    green: false,\n    blue: false,\n    intensity: true\n  });\n  const [graphData, setGraphData] = useState(null);\n\n  // Cursor tracking state\n  const [cursorPosition, setCursorPosition] = useState(null);\n  const [showCrosshair, setShowCrosshair] = useState(false);\n\n  // Frame accumulation state - internally managed but synced with parent\n  const [frameAccumCount, setFrameAccumCount] = useState(10); // Default to 10 frames\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\n  const [accumulatedData, setAccumulatedData] = useState(null);\n  const [isAccumulating, setIsAccumulating] = useState(false);\n\n  // New state for pausing graph updates\n  const [isPaused, setIsPaused] = useState(false);\n\n  // Export file name prefix\n  const [filePrefix, setFilePrefix] = useState('spectrum');\n  const [includeDateInFilename, setIncludeDateInFilename] = useState(true);\n\n  // Status message for operations\n  const [saveMessage, setSaveMessage] = useState('');\n\n  // Peak detection state\n  const [showPeakMarkers, setShowPeakMarkers] = useState(true);\n  const [peakCount, setPeakCount] = useState(3); // Default to showing top 3 peaks\n\n  // Calibration state\n  const [showCalibration, setShowCalibration] = useState(false);\n  const [calibrationPoints, setCalibrationPoints] = useState([{\n    position: 0.25000,\n    wavelength: 450.0\n  }, {\n    position: 0.75000,\n    wavelength: 650.0\n  }]);\n  const [useCalibration, setUseCalibration] = useState(false);\n  const [flipXAxis, setFlipXAxis] = useState(false);\n  const graphContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    getCalibrationSettings: () => ({\n      calibrationPoints: [...calibrationPoints],\n      useCalibration,\n      flipXAxis\n    }),\n    applyCalibrationSettings: settings => {\n      if (!settings) return false;\n      try {\n        if (settings.calibrationPoints && Array.isArray(settings.calibrationPoints)) {\n          setCalibrationPoints(settings.calibrationPoints);\n        }\n        if (typeof settings.useCalibration === 'boolean') {\n          setUseCalibration(settings.useCalibration);\n          if (settings.useCalibration) {\n            setShowCalibration(true);\n          }\n        }\n        if (typeof settings.flipXAxis === 'boolean') {\n          setFlipXAxis(settings.flipXAxis);\n        }\n        return true;\n      } catch (error) {\n        console.error('Error applying calibration settings:', error);\n        return false;\n      }\n    }\n  }));\n\n  // Update graph when line data changes\n  useEffect(() => {\n    if (lineData !== null && lineData !== void 0 && lineData.pixelData && !isPaused) {\n      // Always keep the latest raw frame data for display when not accumulating\n      setGraphData(lineData.pixelData);\n      if (isAccumulating) {\n        // Add new frame to accumulation buffer\n        setAccumulatedFrames(prev => {\n          const newFrames = [...prev, lineData.pixelData];\n\n          // If we've reached our target frame count, process the accumulated data\n          if (newFrames.length >= frameAccumCount) {\n            // Sum the color data across all frames\n            const summedData = sumFrameData(newFrames);\n\n            // Update accumulated data state\n            setAccumulatedData(summedData);\n\n            // Draw the accumulated data\n            drawGraph(summedData);\n\n            // Reset the accumulation buffer\n            return [];\n          }\n          return newFrames;\n        });\n      } else {\n        // If not accumulating, just display the raw frame\n        drawGraph(lineData.pixelData);\n      }\n    }\n  }, [lineData, isAccumulating, frameAccumCount, useCalibration, calibrationPoints, flipXAxis, isPaused]);\n\n  // When accumulated data changes, draw it\n  useEffect(() => {\n    if (accumulatedData && isAccumulating) {\n      drawGraph(accumulatedData);\n    }\n  }, [accumulatedData, useCalibration, calibrationPoints, flipXAxis]);\n\n  // Sum pixel data across multiple frames\n  const sumFrameData = frames => {\n    if (!frames.length) return null;\n\n    // Use the first frame as a template for structure\n    const template = frames[0];\n\n    // Initialize arrays for summed values\n    const summedRed = Array(template.red.length).fill(0);\n    const summedGreen = Array(template.green.length).fill(0);\n    const summedBlue = Array(template.blue.length).fill(0);\n    const summedIntensity = Array(template.intensity.length).fill(0);\n\n    // Sum values across all frames\n    frames.forEach(frame => {\n      frame.red.forEach((val, i) => summedRed[i] += val);\n      frame.green.forEach((val, i) => summedGreen[i] += val);\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\n      frame.intensity.forEach((val, i) => summedIntensity[i] += val);\n    });\n\n    // Return the summed data structure\n    return {\n      timestamp: Date.now(),\n      positions: template.positions,\n      // Positions remain the same\n      red: summedRed,\n      green: summedGreen,\n      blue: summedBlue,\n      intensity: summedIntensity,\n      lineLength: template.lineLength,\n      frameCount: frames.length // Add count of frames that were summed\n    };\n  };\n\n  // Convert position to wavelength using calibration points\n  const positionToWavelength = position => {\n    if (!useCalibration || calibrationPoints.length < 2) {\n      return position;\n    }\n\n    // Sort calibration points by position\n    const sortedPoints = [...calibrationPoints].sort((a, b) => a.position - b.position);\n\n    // Find the two calibration points that surround the given position\n    let p1, p2;\n    for (let i = 0; i < sortedPoints.length - 1; i++) {\n      if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\n        p1 = sortedPoints[i];\n        p2 = sortedPoints[i + 1];\n        break;\n      }\n    }\n\n    // If position is outside the calibration range, use extrapolation\n    if (!p1 || !p2) {\n      if (position < sortedPoints[0].position) {\n        // Extrapolate below the first point\n        // Use the first two points for the slope calculation\n        p1 = sortedPoints[0];\n        p2 = sortedPoints[1];\n        // Calculate the slope between first two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p1.wavelength + slope * (position - p1.position);\n      } else {\n        // Extrapolate above the last point\n        // Use the last two points for the slope calculation\n        p1 = sortedPoints[sortedPoints.length - 2];\n        p2 = sortedPoints[sortedPoints.length - 1];\n        // Calculate the slope between last two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p2.wavelength + slope * (position - p2.position);\n      }\n    }\n\n    // Linear interpolation between the two calibration points\n    const t = (position - p1.position) / (p2.position - p1.position);\n    return p1.wavelength + t * (p2.wavelength - p1.wavelength);\n  };\n\n  // Handle changing the frame accumulation count\n  const handleFrameCountChange = e => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count > 0) {\n      setFrameAccumCount(count);\n      // Reset accumulation when count changes\n      setAccumulatedFrames([]);\n      setAccumulatedData(null);\n\n      // Notify parent of change\n      if (onFrameAccumCountChange) {\n        onFrameAccumCountChange(count);\n      }\n    }\n  };\n\n  // Toggle accumulation mode\n  const toggleAccumulation = () => {\n    const newValue = !isAccumulating;\n    setIsAccumulating(newValue);\n    // Reset accumulated data when toggling\n    setAccumulatedFrames([]);\n    setAccumulatedData(null);\n\n    // Notify parent of change\n    if (onAccumulationToggle) {\n      onAccumulationToggle(newValue);\n    }\n  };\n\n  // Toggle pause mode\n  const togglePause = () => {\n    setIsPaused(!isPaused);\n  };\n\n  // Toggle calibration controls\n  const toggleCalibration = () => {\n    setShowCalibration(!showCalibration);\n  };\n\n  // Toggle using calibration\n  const toggleUseCalibration = () => {\n    setUseCalibration(!useCalibration);\n  };\n\n  // Toggle flip X axis\n  const toggleFlipXAxis = () => {\n    setFlipXAxis(!flipXAxis);\n  };\n\n  // Update calibration point\n  const updateCalibrationPoint = (index, field, value) => {\n    const numValue = parseFloat(value);\n    if (isNaN(numValue)) return;\n\n    // Format position values to 3 decimal places\n    const formattedValue = field === 'position' ? parseFloat(numValue.toFixed(3)) : numValue;\n    setCalibrationPoints(points => {\n      const newPoints = [...points];\n      newPoints[index] = {\n        ...newPoints[index],\n        [field]: formattedValue\n      };\n      return newPoints;\n    });\n  };\n\n  // Initialize and resize the canvas when graph size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const container = graphContainerRef.current;\n      if (container) {\n        // Set canvas size to match container\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n\n        // Redraw graph with new size\n        if (isAccumulating && accumulatedData) {\n          drawGraph(accumulatedData);\n        } else if (graphData) {\n          drawGraph(graphData);\n        }\n      }\n    }\n  }, [graphSize, graphData, accumulatedData, isAccumulating, useCalibration, calibrationPoints, flipXAxis]);\n\n  // Find peaks in data array\n  const findPeaks = (values, positions, count = 3) => {\n    if (!values || values.length < 3) return [];\n\n    // Find local maxima (points higher than both neighbors)\n    const peaks = [];\n    for (let i = 1; i < values.length - 1; i++) {\n      if (values[i] > values[i - 1] && values[i] > values[i + 1]) {\n        // This is a local maximum\n        const peak = {\n          index: i,\n          position: positions[i],\n          value: values[i]\n        };\n\n        // Refine position using quadratic interpolation for better accuracy\n        try {\n          // Based on three points around the peak\n          const x1 = positions[i - 1];\n          const x2 = positions[i];\n          const x3 = positions[i + 1];\n          const y1 = values[i - 1];\n          const y2 = values[i];\n          const y3 = values[i + 1];\n\n          // Only apply refinement if we have valid neighboring points\n          const denom = (x1 - x2) * (x1 - x3) * (x2 - x3);\n          if (denom !== 0) {\n            // Quadratic interpolation formula\n            const A = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom;\n            const B = (x3 * x3 * (y1 - y2) + x2 * x2 * (y3 - y1) + x1 * x1 * (y2 - y3)) / denom;\n\n            // Calculate refined x position at the peak of the parabola\n            if (A !== 0) {\n              const refinedPos = -B / (2 * A);\n\n              // Only use refined position if it's within a reasonable range\n              if (refinedPos >= x1 && refinedPos <= x3) {\n                peak.refinedPosition = refinedPos;\n              }\n            }\n          }\n        } catch (e) {\n          console.warn('Error during peak refinement', e);\n          // If refinement fails, use the original position\n        }\n        peaks.push(peak);\n      }\n    }\n\n    // Sort peaks by value (descending)\n    peaks.sort((a, b) => b.value - a.value);\n\n    // Filter peaks to ensure they're at least 10nm apart (or equivalent in position space)\n    const filteredPeaks = [];\n\n    // Default position-based distance (approximately 5% of the position range)\n    const minPositionDistance = 0.05;\n    for (const peak of peaks) {\n      // Check if this peak is too close to any already-selected stronger peak\n      let tooClose = false;\n      for (const selectedPeak of filteredPeaks) {\n        // Use position-based distance (wavelength conversion will happen in the drawing code)\n        const distance = Math.abs(peak.position - selectedPeak.position);\n        if (distance < minPositionDistance) {\n          tooClose = true;\n          break;\n        }\n      }\n\n      // Add the peak if it's not too close to any stronger peak\n      if (!tooClose) {\n        filteredPeaks.push(peak);\n\n        // Stop if we have enough peaks\n        if (filteredPeaks.length >= count) {\n          break;\n        }\n      }\n    }\n    return filteredPeaks;\n  };\n\n  // Draw the graph based on pixel data\n  const drawGraph = data => {\n    if (!canvasRef.current || !data) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Draw background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n\n    // Horizontal grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const y = height * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n    }\n\n    // Vertical grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const x = width * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n    }\n\n    // Calculate min and max wavelength values for calibration upfront\n    let minWavelength, maxWavelength;\n    if (useCalibration && calibrationPoints.length >= 2) {\n      const wavelengths = calibrationPoints.map(p => p.wavelength);\n      minWavelength = Math.min(...wavelengths);\n      maxWavelength = Math.max(...wavelengths);\n    }\n\n    // Set line styles for different channels\n    const styles = {\n      red: {\n        color: 'rgba(255, 0, 0, 0.8)',\n        width: 1.5\n      },\n      green: {\n        color: 'rgba(0, 255, 0, 0.8)',\n        width: 1.5\n      },\n      blue: {\n        color: 'rgba(0, 0, 255, 0.8)',\n        width: 1.5\n      },\n      intensity: {\n        color: 'rgba(255, 255, 255, 0.8)',\n        width: 2\n      }\n    };\n\n    // Find max values for scaling\n    const maxRed = Math.max(...data.red, 1);\n    const maxGreen = Math.max(...data.green, 1);\n    const maxBlue = Math.max(...data.blue, 1);\n    const maxIntensity = Math.max(...data.intensity, 1);\n\n    // Store the peak data for each displayed channel\n    const channelPeaks = {};\n\n    // Plot each enabled channel\n    Object.entries(displayChannels).forEach(([channel, isEnabled]) => {\n      if (!isEnabled) return;\n      const values = data[channel];\n      const maxValue = channel === 'red' ? maxRed : channel === 'green' ? maxGreen : channel === 'blue' ? maxBlue : maxIntensity;\n\n      // Set line style\n      ctx.strokeStyle = styles[channel].color;\n      ctx.lineWidth = styles[channel].width;\n\n      // Begin the path\n      ctx.beginPath();\n\n      // Draw the line\n      for (let i = 0; i < values.length; i++) {\n        // Calculate x position, applying flip if enabled\n        let xPos = data.positions[i];\n        if (flipXAxis) {\n          xPos = 1 - xPos; // Invert position (0 becomes 1, 1 becomes 0)\n        }\n\n        // Convert to pixel coordinates\n        const x = xPos * width;\n\n        // Invert Y since canvas 0,0 is top-left\n        const y = height - values[i] / maxValue * height;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n\n      // Draw the path\n      ctx.stroke();\n    });\n\n    // Detect peaks for intensity channel only if enabled\n    if (showPeakMarkers && displayChannels.intensity) {\n      const intensityValues = data.intensity;\n      // Use original positions for peak detection\n      const peaks = findPeaks(intensityValues, data.positions, peakCount);\n\n      // If calibration is enabled, perform additional wavelength-based filtering\n      if (useCalibration) {\n        // Convert positions to wavelengths and filter to ensure 10nm minimum distance\n        const wavelengthPeaks = [];\n\n        // Process peaks in order of intensity (already sorted by findPeaks)\n        for (const peak of peaks) {\n          const peakWavelength = positionToWavelength(peak.position);\n          let tooClose = false;\n\n          // Check if this peak is too close to any already selected peak\n          for (const selectedPeak of wavelengthPeaks) {\n            const selectedWavelength = positionToWavelength(selectedPeak.position);\n            const distance = Math.abs(peakWavelength - selectedWavelength);\n            if (distance < 10) {\n              // 10nm minimum distance\n              tooClose = true;\n              break;\n            }\n          }\n\n          // Add the peak if it's not too close to any already selected peak\n          if (!tooClose) {\n            wavelengthPeaks.push(peak);\n          }\n        }\n        channelPeaks['intensity'] = wavelengthPeaks;\n      } else {\n        channelPeaks['intensity'] = peaks;\n      }\n    }\n\n    // Draw timestamp and status information\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.font = '10px monospace';\n    ctx.textAlign = 'left';\n\n    // Show time and accumulation status\n    const timeText = `Time: ${new Date(data.timestamp).toLocaleTimeString()}`;\n    const statusText = isAccumulating ? `Accumulating: ${accumulatedFrames.length}/${frameAccumCount} frames` : 'Live data';\n    ctx.fillText(timeText, 5, 15);\n    ctx.fillText(statusText, width - 150, 15);\n\n    // Draw calibration status if enabled\n    if (useCalibration) {\n      ctx.fillText('Calibrated', width - 150, 45);\n    }\n\n    // Draw frame count if this is accumulated data\n    if (data.frameCount) {\n      ctx.fillText(`Summed ${data.frameCount} frames`, width - 150, 30);\n    }\n\n    // Draw channel legend\n    const legendStartY = 30;\n    const legendSpacing = 15;\n    if (displayChannels.red) {\n      ctx.fillStyle = styles.red.color;\n      ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)}`, 5, legendStartY);\n    }\n    if (displayChannels.green) {\n      ctx.fillStyle = styles.green.color;\n      ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)}`, 5, legendStartY + legendSpacing);\n    }\n    if (displayChannels.blue) {\n      ctx.fillStyle = styles.blue.color;\n      ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)}`, 5, legendStartY + legendSpacing * 2);\n    }\n    if (displayChannels.intensity) {\n      ctx.fillStyle = styles.intensity.color;\n      ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)}`, 5, legendStartY + legendSpacing * 3);\n    }\n\n    // Draw wavelength axis labels if calibration is enabled (unified section)\n    if (useCalibration && minWavelength !== undefined && maxWavelength !== undefined) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.font = '10px monospace';\n      ctx.textAlign = 'center';\n\n      // Clear the bottom area where labels will go\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'; // Match background color\n      ctx.fillRect(0, height - 20, width, 20);\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'; // Reset text color\n\n      // Draw axis labels at regular position intervals (0%, 25%, 50%, 75%, 100%)\n      // but show the corresponding wavelength values\n      for (let i = 0; i <= 4; i++) {\n        const position = i / 4; // Regular positions (0, 0.25, 0.5, 0.75, 1)\n\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - position : position;\n        const x = displayPosition * width;\n\n        // Convert position to wavelength using calibration\n        const wavelength = positionToWavelength(position);\n        ctx.fillText(`${Math.round(wavelength)}nm`, x, height - 5);\n      }\n    }\n\n    // Draw calibration points if enabled\n    if (useCalibration) {\n      calibrationPoints.forEach(point => {\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - point.position : point.position;\n        // Draw vertical line at calibration point position\n        const x = displayPosition * width;\n        ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n\n        // Draw wavelength label at the calibration point\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\n        ctx.font = '10px monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${point.wavelength}nm`, x, height - 20); // Higher position to avoid overlap\n      });\n    }\n\n    // Draw peak markers if enabled\n    if (showPeakMarkers) {\n      // Draw peaks for each enabled channel\n      Object.entries(channelPeaks).forEach(([channel, peaks]) => {\n        // Use the same color as the channel with increased opacity\n        const baseColor = styles[channel].color;\n        const markerColor = baseColor.replace('rgba', 'rgb').replace(/,\\s*[\\d.]+\\)/, ')');\n\n        // Get max value for this channel for y-coordinate calculation\n        const maxValue = channel === 'red' ? maxRed : channel === 'green' ? maxGreen : channel === 'blue' ? maxBlue : maxIntensity;\n        peaks.forEach(peak => {\n          // Get the original position\n          let xPos = peak.position;\n\n          // Use refined position if available (within reasonable bounds)\n          if (peak.refinedPosition !== undefined) {\n            xPos = peak.refinedPosition;\n          }\n\n          // Apply flip if enabled\n          if (flipXAxis) {\n            xPos = 1 - xPos;\n          }\n\n          // Convert to pixel coordinates\n          const x = xPos * width;\n          const y = height - peak.value / maxValue * height;\n\n          // Check if peak is near the top of the graph (below a minimum distance from top)\n          const isNearTop = y < 60; // 60px from top\n\n          // Draw a vertical line first (always visible)\n          ctx.strokeStyle = markerColor;\n          ctx.setLineDash([2, 2]);\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, height);\n          ctx.stroke();\n          ctx.setLineDash([]);\n\n          // Draw marker at peak position (triangle pointing down or up based on position)\n          ctx.fillStyle = markerColor;\n          ctx.beginPath();\n          if (isNearTop) {\n            // If near top, draw triangle pointing up from a position slightly below the peak\n            const markerY = y + 15;\n            ctx.moveTo(x, markerY);\n            ctx.lineTo(x - 5, markerY + 10);\n            ctx.lineTo(x + 5, markerY + 10);\n          } else {\n            // Normal case - draw triangle pointing down\n            ctx.moveTo(x, y);\n            ctx.lineTo(x - 5, y - 10);\n            ctx.lineTo(x + 5, y - 10);\n          }\n          ctx.closePath();\n          ctx.fill();\n\n          // Prepare label text\n          let label;\n          if (useCalibration) {\n            const wavelength = positionToWavelength(peak.position);\n            label = `${wavelength.toFixed(1)}nm`;\n          } else {\n            label = `Pos: ${peak.position.toFixed(3)}`;\n          }\n          const valueLabel = `I: ${peak.value.toFixed(1)}`;\n\n          // Setup text rendering\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n          ctx.font = '10px monospace';\n          ctx.textAlign = 'center';\n\n          // Measure text dimensions for backgrounds\n          const textWidth = ctx.measureText(label).width + 6;\n          const valueWidth = ctx.measureText(valueLabel).width + 6;\n          if (isNearTop) {\n            // Draw position/wavelength label below the marker\n            const labelY = y + 30;\n\n            // Draw text background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth / 2, labelY - 10, textWidth, 16);\n\n            // Draw label text\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, labelY);\n\n            // Draw value label below that\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth / 2, labelY + 7, valueWidth, 16);\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, labelY + 17);\n          } else {\n            // Standard label position above marker\n            // Draw text background for better readability\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth / 2, y - 25, textWidth, 16);\n\n            // Draw label above marker\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, y - 14);\n\n            // Draw peak value\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth / 2, y - 42, valueWidth, 16);\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, y - 31);\n          }\n        });\n      });\n    }\n\n    // Draw crosshair at cursor position\n    if (showCrosshair && cursorPosition) {\n      const {\n        x,\n        y\n      } = cursorPosition;\n      if (x >= 0 && x <= width && y >= 0 && y <= height) {\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.setLineDash([3, 3]); // Dashed line\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n\n        // Draw horizontal line\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset line style\n\n        // Calculate and display wavelength at cursor position\n        const position = x / width; // Normalize cursor position (0-1)\n\n        // Apply flip if needed to get the actual data position\n        const dataPosition = flipXAxis ? 1 - position : position;\n\n        // Determine wavelength based on cursor position\n        let wavelength;\n        if (useCalibration) {\n          wavelength = positionToWavelength(dataPosition);\n        } else {\n          wavelength = dataPosition; // Just show the position value when not calibrated\n        }\n\n        // Calculate y-values at the cursor position\n        let valueText = '';\n        if (data && data.positions && data.positions.length > 0) {\n          // Find the nearest data point to the cursor\n          const positionIndex = findNearestPositionIndex(data.positions, dataPosition);\n\n          // Build value text based on active channels\n          const channelTexts = [];\n          if (displayChannels.red) {\n            channelTexts.push(`R:${Math.round(data.red[positionIndex])}`);\n          }\n          if (displayChannels.green) {\n            channelTexts.push(`G:${Math.round(data.green[positionIndex])}`);\n          }\n          if (displayChannels.blue) {\n            channelTexts.push(`B:${Math.round(data.blue[positionIndex])}`);\n          }\n          if (displayChannels.intensity) {\n            channelTexts.push(`I:${data.intensity[positionIndex].toFixed(1)}`);\n          }\n          valueText = channelTexts.join(', ');\n        }\n\n        // Create a background for the text for better readability\n        const wavelengthText = useCalibration ? `${wavelength.toFixed(1)}nm` : `Pos: ${wavelength.toFixed(3)}`;\n\n        // Draw text background\n        const textWidth = ctx.measureText(wavelengthText).width + 10;\n        const valueTextWidth = ctx.measureText(valueText).width + 10;\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        ctx.fillRect(x - textWidth / 2, height - 45, textWidth, 20);\n        if (valueText) {\n          ctx.fillRect(x - valueTextWidth / 2, 5, valueTextWidth, 20);\n        }\n\n        // Draw wavelength text below cursor\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        ctx.textAlign = 'center';\n        ctx.fillText(wavelengthText, x, height - 30);\n\n        // Draw value text above cursor\n        if (valueText) {\n          ctx.fillText(valueText, x, 20);\n        }\n      }\n    }\n  };\n\n  // Helper to find the index of the nearest position value to a given position\n  const findNearestPositionIndex = (positions, targetPosition) => {\n    if (!positions || positions.length === 0) return -1;\n    let nearestIndex = 0;\n    let minDistance = Math.abs(positions[0] - targetPosition);\n    for (let i = 1; i < positions.length; i++) {\n      const distance = Math.abs(positions[i] - targetPosition);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestIndex = i;\n      }\n    }\n    return nearestIndex;\n  };\n\n  // Toggle display of a specific channel\n  const toggleChannel = channel => {\n    setDisplayChannels(prev => ({\n      ...prev,\n      [channel]: !prev[channel]\n    }));\n  };\n\n  // Handle mouse movement over the graph\n  const handleMouseMove = e => {\n    if (!graphContainerRef.current) return;\n\n    // Get canvas bounds\n    const rect = graphContainerRef.current.getBoundingClientRect();\n\n    // Calculate cursor position relative to canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Update cursor position state\n    setCursorPosition({\n      x,\n      y\n    });\n\n    // Redraw the graph with crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n\n  // Handle mouse enter/leave events\n  const handleMouseEnter = () => {\n    setShowCrosshair(true);\n  };\n  const handleMouseLeave = () => {\n    setShowCrosshair(false);\n    setCursorPosition(null);\n\n    // Redraw the graph without crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n\n  // Similar resize functionality as before\n  const handleResizeStart = e => {\n    var _graphContainerRef$cu, _graphContainerRef$cu2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_graphContainerRef$cu = graphContainerRef.current) === null || _graphContainerRef$cu === void 0 ? void 0 : _graphContainerRef$cu.clientWidth) || 400;\n    const startHeight = ((_graphContainerRef$cu2 = graphContainerRef.current) === null || _graphContainerRef$cu2 === void 0 ? void 0 : _graphContainerRef$cu2.clientHeight) || graphSize.height;\n\n    // Show resize feedback\n    setIsResizing(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaY = moveEvent.clientY - startY;\n\n      // Only adjust height, keep width as 100%\n      const newHeight = Math.max(100, startHeight + deltaY);\n\n      // Update graph size\n      const newSize = {\n        width: '100%',\n        // Keep width as 100% for responsive behavior\n        height: Math.round(newHeight)\n      };\n      setGraphSize(newSize);\n\n      // Notify parent if needed\n      if (onResize) {\n        onResize(newSize);\n      }\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      // Get camera settings from parent component if available\n      const cameraSettings = getCameraSettings ? getCameraSettings() : null;\n\n      // Create settings object with all necessary parameters\n      const settings = {\n        // Calibration settings\n        calibration: {\n          points: calibrationPoints,\n          useCalibration: useCalibration,\n          flipXAxis: flipXAxis,\n          showCalibration: showCalibration\n        },\n        // Display settings\n        display: {\n          channels: displayChannels,\n          graphSize: graphSize\n        },\n        // Frame accumulation settings\n        accumulation: {\n          frameAccumCount: frameAccumCount,\n          isAccumulating: isAccumulating,\n          isPaused: isPaused\n        },\n        // Peak marker settings\n        peaks: {\n          showPeakMarkers: showPeakMarkers,\n          peakCount: peakCount\n        },\n        // Export settings\n        export: {\n          filePrefix: filePrefix,\n          includeDateInFilename: includeDateInFilename\n        },\n        // Camera settings from MQTTCameraComponent (if available)\n        camera: cameraSettings ? {\n          mqttTopic: cameraSettings.mqttTopic,\n          pollingInterval: cameraSettings.pollingInterval,\n          resolution: cameraSettings.resolution,\n          // Line drawing settings\n          isLineDrawn: cameraSettings.isLineDrawn,\n          lineStart: cameraSettings.lineStart,\n          lineEnd: cameraSettings.lineEnd,\n          lineYOffset: cameraSettings.lineYOffset,\n          lineXOffset: cameraSettings.lineXOffset,\n          // Crop settings in the exact format expected by MQTTCameraComponent\n          crop: {\n            range: cameraSettings.cropRange,\n            interval: cameraSettings.cropInterval,\n            isCropMode: cameraSettings.isCropMode,\n            cropStart: cameraSettings.cropStart,\n            cropEnd: cameraSettings.cropEnd,\n            isCropStreaming: cameraSettings.isCropStreaming,\n            cropToGraph: cameraSettings.cropToGraph,\n            streamCropImage: cameraSettings.streamCropImage\n          },\n          // Direct properties for backward compatibility\n          cropRange: cameraSettings.cropRange,\n          cropInterval: cameraSettings.cropInterval,\n          isCropMode: cameraSettings.isCropMode,\n          cropStart: cameraSettings.cropStart,\n          cropEnd: cameraSettings.cropEnd,\n          isCropStreaming: cameraSettings.isCropStreaming,\n          // Camera config\n          cameraConfig: cameraSettings.cameraConfig,\n          pendingConfig: cameraSettings.pendingConfig\n        } : null,\n        // Add timestamp for reference\n        timestamp: new Date().toISOString()\n      };\n\n      // Convert to JSON string with nice formatting\n      const jsonString = JSON.stringify(settings, null, 2);\n\n      // Create file name with timestamp\n      const now = new Date();\n      const timestamp = now.getFullYear() + String(now.getMonth() + 1).padStart(2, '0') + String(now.getDate()).padStart(2, '0') + '_' + String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0');\n      const fileName = `spectrometer_settings_${timestamp}.json`;\n\n      // Create blob and download\n      const blob = new Blob([jsonString], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Trigger download\n      document.body.appendChild(link);\n      link.click();\n\n      // Cleanup\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Show success message\n      setSaveMessage(`Settings exported as ${fileName}`);\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Export graph data as text file\n  const exportGraphData = () => {\n    // Make sure we have data to export\n    const dataToExport = isAccumulating ? accumulatedData : graphData;\n    if (!dataToExport) {\n      console.warn('No data to export');\n      if (props.onMessage) {\n        props.onMessage('No data to export');\n      }\n      return;\n    }\n    try {\n      const lines = [];\n      // Create a timestamp string in format YYYYMMDDhhmmss\n      const now = new Date();\n      const timestamp = now.getFullYear() + String(now.getMonth() + 1).padStart(2, '0') + String(now.getDate()).padStart(2, '0') + String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0') + String(now.getSeconds()).padStart(2, '0');\n      lines.push(timestamp);\n      // Add information on calibration points\n      if (useCalibration) {\n        lines.push(`# Calibration enabled: Yes`);\n        lines.push(`# Calibration points:`);\n        calibrationPoints.forEach((point, index) => {\n          lines.push(`# Point ${index + 1}: Position ${point.position.toFixed(3)} = ${point.wavelength.toFixed(1)} nm`);\n        });\n        if (flipXAxis) {\n          lines.push(`# X-Axis flipped: Yes`);\n        }\n      } else {\n        lines.push(`# Calibration enabled: No`);\n      }\n\n      // Add accumulation information\n      if (isAccumulating && dataToExport.frameCount) {\n        lines.push(`# Frame accumulation: ${dataToExport.frameCount} frames`);\n      }\n\n      // Add column headers as first line\n      const headers = useCalibration ? \"Wavelength (nm);Intensity;Red;Green;Blue\" : \"Position;Intensity;Red;Green;Blue\";\n      lines.push(headers);\n\n      // Loop through data points\n      for (let i = 0; i < dataToExport.positions.length; i++) {\n        let position = dataToExport.positions[i];\n        // Convert position to wavelength if calibration is enabled\n        let wavelength = position;\n        if (useCalibration) {\n          wavelength = positionToWavelength(position);\n        }\n\n        // Get all channel values\n        const intensity = dataToExport.intensity[i];\n        const red = dataToExport.red[i];\n        const green = dataToExport.green[i];\n        const blue = dataToExport.blue[i];\n\n        // Add line with all values\n        lines.push(`${wavelength.toFixed(3)};${intensity.toFixed(2)};${red.toFixed(2)};${green.toFixed(2)};${blue.toFixed(2)}`);\n      }\n\n      // Join lines with newlines\n      const content = lines.join('\\n');\n\n      // Create filename with prefix and optional timestamp\n      const fileName = includeDateInFilename ? `${filePrefix}_${timestamp}.txt` : `${filePrefix}.txt`;\n\n      // Create Blob with content\n      const blob = new Blob([content], {\n        type: 'text/plain'\n      });\n\n      // Create download link\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Append to document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Show success message\n      if (props.onMessage) {\n        props.onMessage(`Data exported as ${fileName}`);\n      } else {\n        // If no message handler provided, show alert\n        console.log(`Data exported as ${fileName}`);\n        setSaveMessage && setSaveMessage(`Data exported as ${fileName}`);\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    } catch (error) {\n      console.error('Failed to export graph data:', error);\n      if (props.onMessage) {\n        props.onMessage('Error exporting data');\n      } else {\n        setSaveMessage && setSaveMessage('Error exporting data');\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    }\n  };\n\n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    try {\n      // Create a file input element\n      const fileInput = document.createElement('input');\n      fileInput.type = 'file';\n      fileInput.accept = '.json';\n      fileInput.style.display = 'none';\n\n      // Handle file selection\n      fileInput.onchange = event => {\n        const file = event.target.files[0];\n        if (!file) return;\n        const reader = new FileReader();\n        reader.onload = e => {\n          try {\n            // Parse the JSON data\n            const settings = JSON.parse(e.target.result);\n\n            // Apply calibration settings\n            if (settings.calibration) {\n              if (settings.calibration.points && Array.isArray(settings.calibration.points)) {\n                setCalibrationPoints(settings.calibration.points);\n              }\n              if (typeof settings.calibration.useCalibration === 'boolean') {\n                setUseCalibration(settings.calibration.useCalibration);\n              }\n              if (typeof settings.calibration.flipXAxis === 'boolean') {\n                setFlipXAxis(settings.calibration.flipXAxis);\n              }\n              if (typeof settings.calibration.showCalibration === 'boolean') {\n                setShowCalibration(settings.calibration.showCalibration);\n              }\n            }\n\n            // Apply display settings\n            if (settings.display) {\n              if (settings.display.channels) {\n                setDisplayChannels(settings.display.channels);\n              }\n              if (settings.display.graphSize) {\n                setGraphSize(settings.display.graphSize);\n                if (onResize) {\n                  onResize(settings.display.graphSize);\n                }\n              }\n            }\n\n            // Apply accumulation settings\n            if (settings.accumulation) {\n              if (typeof settings.accumulation.frameAccumCount === 'number') {\n                setFrameAccumCount(settings.accumulation.frameAccumCount);\n                if (onFrameAccumCountChange) {\n                  onFrameAccumCountChange(settings.accumulation.frameAccumCount);\n                }\n              }\n              if (typeof settings.accumulation.isAccumulating === 'boolean') {\n                setIsAccumulating(settings.accumulation.isAccumulating);\n                if (onAccumulationToggle) {\n                  onAccumulationToggle(settings.accumulation.isAccumulating);\n                }\n              }\n              if (typeof settings.accumulation.isPaused === 'boolean') {\n                setIsPaused(settings.accumulation.isPaused);\n              }\n            }\n\n            // Apply peak marker settings\n            if (settings.peaks) {\n              if (typeof settings.peaks.showPeakMarkers === 'boolean') {\n                setShowPeakMarkers(settings.peaks.showPeakMarkers);\n              }\n              if (typeof settings.peaks.peakCount === 'number') {\n                setPeakCount(settings.peaks.peakCount);\n              }\n            }\n\n            // Apply export settings\n            if (settings.export) {\n              if (settings.export.filePrefix) {\n                setFilePrefix(settings.export.filePrefix);\n              }\n              if (typeof settings.export.includeDateInFilename === 'boolean') {\n                setIncludeDateInFilename(settings.export.includeDateInFilename);\n              }\n            }\n\n            // Apply camera settings if available\n            if (settings.camera && applyCameraSettings) {\n              console.log('Applying camera settings from loaded file', settings.camera);\n\n              // Check if cropRange exists and is valid\n              if (settings.camera.cropRange && Array.isArray(settings.camera.cropRange) && settings.camera.cropRange.length === 4) {\n                console.log('Valid crop range found:', settings.camera.cropRange);\n              } else {\n                console.warn('Invalid or missing crop range in loaded settings');\n              }\n\n              // If we have a specific function to apply crop settings, use it\n              if (props.applyCropSettings && settings.camera.crop) {\n                console.log('Applying crop settings separately:', settings.camera.crop);\n                props.applyCropSettings(settings.camera.crop);\n              }\n\n              // Apply all camera settings\n              applyCameraSettings(settings.camera);\n\n              // Log a callback to verify settings were applied\n              setTimeout(() => {\n                if (getCameraSettings) {\n                  const currentSettings = getCameraSettings();\n                  console.log('After applying camera settings, current state:', {\n                    cropRange: currentSettings.cropRange,\n                    cropInterval: currentSettings.cropInterval,\n                    isCropMode: currentSettings.isCropMode\n                  });\n                }\n              }, 500);\n            }\n\n            // Reset accumulated data when loading settings\n            setAccumulatedFrames([]);\n            setAccumulatedData(null);\n\n            // Show success message\n            setSaveMessage('Settings loaded successfully');\n            setTimeout(() => setSaveMessage(''), 3000);\n          } catch (error) {\n            console.error('Failed to parse settings file:', error);\n            setSaveMessage('Error loading settings: Invalid file format');\n            setTimeout(() => setSaveMessage(''), 3000);\n          }\n        };\n        reader.onerror = () => {\n          setSaveMessage('Error reading settings file');\n          setTimeout(() => setSaveMessage(''), 3000);\n        };\n\n        // Read the file as text\n        reader.readAsText(file);\n      };\n\n      // Trigger file selection dialog\n      document.body.appendChild(fileInput);\n      fileInput.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(fileInput);\n      }, 100);\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      setSaveMessage('Error loading settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Handle peak count change\n  const handlePeakCountChange = e => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count >= 0 && count <= 10) {\n      setPeakCount(count);\n    }\n  };\n\n  // Toggle peak markers\n  const togglePeakMarkers = () => {\n    setShowPeakMarkers(!showPeakMarkers);\n  };\n  const styles = {\n    container: {\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      padding: '10px',\n      borderRadius: '4px',\n      position: 'relative',\n      border: isResizing ? '1px dashed #4CAF50' : 'none'\n    },\n    title: {\n      margin: '0 0 10px 0',\n      fontSize: '14px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    controls: {\n      display: 'flex',\n      gap: '5px',\n      alignItems: 'center'\n    },\n    frameCountControl: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '10px',\n      gap: '8px'\n    },\n    frameCountLabel: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.8)'\n    },\n    frameCountInput: {\n      width: '50px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '12px'\n    },\n    calibrationContainer: {\n      marginBottom: '10px',\n      padding: '8px',\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      borderRadius: '4px'\n    },\n    calibrationHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '8px'\n    },\n    calibrationTitle: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.9)',\n      margin: 0\n    },\n    calibrationCheckbox: {\n      marginLeft: '8px'\n    },\n    calibrationPoints: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '6px'\n    },\n    calibrationPoint: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      gap: '6px'\n    },\n    calibrationLabel: {\n      fontSize: '11px',\n      color: 'rgba(255, 255, 255, 0.7)',\n      width: '40px'\n    },\n    calibrationInput: {\n      width: '60px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '11px'\n    },\n    graphView: {\n      width: graphSize.width,\n      height: `${graphSize.height}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    canvas: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    resizeHandle: {\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      width: '20px',\n      height: '20px',\n      cursor: 'ns-resize',\n      // Only allow vertical resizing\n      zIndex: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\n      borderTopLeftRadius: '4px'\n    },\n    resizeInfo: {\n      position: 'absolute',\n      right: '25px',\n      bottom: '25px',\n      padding: '2px 6px',\n      background: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '3px',\n      fontSize: '11px',\n      zIndex: 100\n    },\n    channelToggles: {\n      display: 'flex',\n      gap: '5px'\n    },\n    channelButton: {\n      fontSize: '10px',\n      padding: '2px 5px',\n      borderRadius: '3px',\n      cursor: 'pointer',\n      border: '1px solid rgba(255, 255, 255, 0.3)',\n      backgroundColor: 'rgba(30, 30, 30, 0.7)'\n    },\n    noData: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      color: 'rgba(255, 255, 255, 0.5)',\n      fontSize: '12px'\n    }\n  };\n\n  // Return the component JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.title,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: 0\n        },\n        children: \"Intensity Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1526,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.channelToggles,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.4)',\n            borderColor: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.2)'\n          },\n          onClick: () => toggleChannel('red'),\n          children: \"R\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.4)',\n            borderColor: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.2)'\n          },\n          onClick: () => toggleChannel('green'),\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1538,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.4)',\n            borderColor: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.2)'\n          },\n          onClick: () => toggleChannel('blue'),\n          children: \"B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1548,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.4)',\n            borderColor: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.2)'\n          },\n          onClick: () => toggleChannel('intensity'),\n          children: \"I\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1558,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: 'rgb(255, 255, 100)',\n            borderColor: showCalibration ? 'rgb(255, 255, 100)' : 'rgba(255, 255, 100, 0.2)',\n            backgroundColor: showCalibration ? 'rgba(60, 60, 0, 0.6)' : 'rgba(30, 30, 30, 0.7)'\n          },\n          onClick: toggleCalibration,\n          title: \"Toggle calibration controls\",\n          children: \"Cal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1568,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1527,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1525,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.frameCountControl,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.frameCountLabel,\n        children: \"Frame accumulation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1584,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        max: \"2000\",\n        value: frameAccumCount,\n        onChange: handleFrameCountChange,\n        style: styles.frameCountInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1585,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...buttonVariants.smallIconButton,\n          backgroundColor: isAccumulating ? 'rgba(255, 165, 0, 0.7)' : undefined\n        },\n        onClick: toggleAccumulation,\n        title: isAccumulating ? \"Switch to live data\" : \"Switch to frame accumulation\",\n        children: isAccumulating ? \"Accumulating\" : \"Live\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1593,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...buttonVariants.smallIconButton,\n          backgroundColor: isPaused ? 'rgba(220, 53, 69, 0.7)' : undefined\n        },\n        onClick: togglePause,\n        title: isPaused ? \"Resume graph updates\" : \"Pause graph updates\",\n        children: isPaused ? \"⏸️ Paused\" : \"▶️ Running\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1605,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px',\n          marginLeft: '20px',\n          borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n          paddingLeft: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.frameCountLabel,\n          children: \"Peak markers:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1625,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0\",\n          max: \"10\",\n          value: peakCount,\n          onChange: handlePeakCountChange,\n          style: styles.frameCountInput,\n          title: \"Number of peak markers to display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1626,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallIconButton,\n            backgroundColor: showPeakMarkers ? 'rgba(120, 120, 220, 0.7)' : undefined\n          },\n          onClick: togglePeakMarkers,\n          title: showPeakMarkers ? \"Hide peak markers\" : \"Show peak markers\",\n          children: showPeakMarkers ? \"Peaks On\" : \"Peaks Off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1635,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1617,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          marginLeft: 'auto',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: filePrefix,\n          onChange: e => setFilePrefix(e.target.value),\n          placeholder: \"File prefix\",\n          style: {\n            ...styles.frameCountInput,\n            width: '100px'\n          },\n          title: \"Prefix for the exported data filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1649,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            fontSize: '11px',\n            color: 'rgba(255, 255, 255, 0.7)',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '3px',\n            marginRight: '5px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: includeDateInFilename,\n            onChange: e => setIncludeDateInFilename(e.target.checked),\n            style: {\n              margin: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1668,\n            columnNumber: 13\n          }, this), \"Date\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1660,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallSecondary,\n            backgroundColor: 'rgba(20, 120, 220, 0.7)'\n          },\n          onClick: exportGraphData,\n          title: \"Export graph data as text file\",\n          disabled: !graphData && !accumulatedData,\n          children: \"\\uD83D\\uDCBE Export Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1676,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallSecondary,\n            backgroundColor: 'rgba(60, 160, 60, 0.7)',\n            marginLeft: '10px'\n          },\n          onClick: exportSettings,\n          title: \"Save current settings to file\",\n          children: \"\\uD83D\\uDCBE Save Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1689,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallSecondary,\n            backgroundColor: 'rgba(160, 120, 40, 0.7)'\n          },\n          onClick: loadSettings,\n          title: \"Load settings from file\",\n          children: \"\\uD83D\\uDCC2 Load Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1700,\n          columnNumber: 11\n        }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '11px',\n            backgroundColor: 'rgba(0, 0, 0, 0.6)',\n            padding: '2px 6px',\n            borderRadius: '3px',\n            marginLeft: '5px',\n            color: 'rgba(255, 255, 255, 0.9)'\n          },\n          children: saveMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1712,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1648,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1583,\n      columnNumber: 7\n    }, this), showCalibration && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.calibrationContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.calibrationHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: styles.calibrationTitle,\n          children: \"Wavelength Calibration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1729,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontSize: '11px',\n              color: 'rgba(255, 255, 255, 0.7)'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: useCalibration,\n              onChange: toggleUseCalibration,\n              style: styles.calibrationCheckbox\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1732,\n              columnNumber: 17\n            }, this), \"Use Calibration\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1731,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1730,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1728,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.calibrationPoints,\n        children: [calibrationPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.calibrationPoint,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationLabel,\n            children: [\"Point \", index + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1746,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginRight: '4px'\n              },\n              children: \"Pos:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1748,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              max: \"1\",\n              step: \"0.0001\",\n              value: point.position,\n              onChange: e => updateCalibrationPoint(index, 'position', e.target.value),\n              style: styles.calibrationInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1749,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1747,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginRight: '4px'\n              },\n              children: \"\\u03BB:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1760,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"200\",\n              max: \"1200\",\n              step: \"0.01\",\n              value: point.wavelength,\n              onChange: e => updateCalibrationPoint(index, 'wavelength', e.target.value),\n              style: styles.calibrationInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1761,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginLeft: '2px'\n              },\n              children: \"nm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1770,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1759,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1745,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '8px',\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontSize: '11px',\n              color: 'rgba(255, 255, 255, 0.7)',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: flipXAxis,\n              onChange: toggleFlipXAxis,\n              style: {\n                marginRight: '5px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1777,\n              columnNumber: 17\n            }, this), \"Flip X-Axis\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1776,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1775,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1743,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1727,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: graphContainerRef,\n      style: styles.graphView,\n      onMouseMove: handleMouseMove,\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: styles.canvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1797,\n        columnNumber: 9\n      }, this), !graphData && !accumulatedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.noData,\n        children: \"Draw a line on the camera feed to see intensity data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1803,\n        columnNumber: 11\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeInfo,\n        children: [\"Height: \", graphSize.height, \"px\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1810,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handleResizeStart,\n        title: \"Resize graph height\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"12\",\n          height: \"12\",\n          viewBox: \"0 0 12 12\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M2,6 L10,6 M2,9 L10,9\",\n            stroke: \"white\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1822,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1821,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1816,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1790,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1524,\n    columnNumber: 5\n  }, this);\n}, \"nY0shbWHtaKos9F/MDz3vPwNxJs=\", false, function () {\n  return [useButtonStyles];\n})), \"nY0shbWHtaKos9F/MDz3vPwNxJs=\", false, function () {\n  return [useButtonStyles];\n});\n\n// Add display name for debugging\n_c2 = GraphComponent;\nGraphComponent.displayName = 'GraphComponent';\nexport default GraphComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent$React.forwardRef\");\n$RefreshReg$(_c2, \"GraphComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useImperativeHandle","useButtonStyles","jsxDEV","_jsxDEV","GraphComponent","_s","forwardRef","_c","props","ref","onResize","lineData","onFrameAccumCountChange","onAccumulationToggle","getCameraSettings","applyCameraSettings","applyCropSettings","buttonVariants","graphSize","setGraphSize","width","height","isResizing","setIsResizing","showResizeInfo","setShowResizeInfo","displayChannels","setDisplayChannels","red","green","blue","intensity","graphData","setGraphData","cursorPosition","setCursorPosition","showCrosshair","setShowCrosshair","frameAccumCount","setFrameAccumCount","accumulatedFrames","setAccumulatedFrames","accumulatedData","setAccumulatedData","isAccumulating","setIsAccumulating","isPaused","setIsPaused","filePrefix","setFilePrefix","includeDateInFilename","setIncludeDateInFilename","saveMessage","setSaveMessage","showPeakMarkers","setShowPeakMarkers","peakCount","setPeakCount","showCalibration","setShowCalibration","calibrationPoints","setCalibrationPoints","position","wavelength","useCalibration","setUseCalibration","flipXAxis","setFlipXAxis","graphContainerRef","canvasRef","getCalibrationSettings","applyCalibrationSettings","settings","Array","isArray","error","console","pixelData","prev","newFrames","length","summedData","sumFrameData","drawGraph","frames","template","summedRed","fill","summedGreen","summedBlue","summedIntensity","forEach","frame","val","i","timestamp","Date","now","positions","lineLength","frameCount","positionToWavelength","sortedPoints","sort","a","b","p1","p2","slope","t","handleFrameCountChange","e","count","parseInt","target","value","isNaN","toggleAccumulation","newValue","togglePause","toggleCalibration","toggleUseCalibration","toggleFlipXAxis","updateCalibrationPoint","index","field","numValue","parseFloat","formattedValue","toFixed","points","newPoints","current","canvas","container","clientWidth","clientHeight","findPeaks","values","peaks","peak","x1","x2","x3","y1","y2","y3","denom","A","B","refinedPos","refinedPosition","warn","push","filteredPeaks","minPositionDistance","tooClose","selectedPeak","distance","Math","abs","data","ctx","getContext","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","y","beginPath","moveTo","lineTo","stroke","x","minWavelength","maxWavelength","wavelengths","map","p","min","max","styles","color","maxRed","maxGreen","maxBlue","maxIntensity","channelPeaks","Object","entries","channel","isEnabled","maxValue","xPos","intensityValues","wavelengthPeaks","peakWavelength","selectedWavelength","font","textAlign","timeText","toLocaleTimeString","statusText","fillText","legendStartY","legendSpacing","round","reduce","undefined","displayPosition","point","baseColor","markerColor","replace","isNearTop","setLineDash","markerY","closePath","label","valueLabel","textWidth","measureText","valueWidth","labelY","dataPosition","valueText","positionIndex","findNearestPositionIndex","channelTexts","join","wavelengthText","valueTextWidth","targetPosition","nearestIndex","minDistance","toggleChannel","handleMouseMove","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseEnter","handleMouseLeave","handleResizeStart","_graphContainerRef$cu","_graphContainerRef$cu2","preventDefault","stopPropagation","startX","startY","startWidth","startHeight","moveEvent","deltaY","newHeight","newSize","handleMouseUp","document","removeEventListener","setTimeout","addEventListener","exportSettings","cameraSettings","calibration","display","channels","accumulation","export","camera","mqttTopic","pollingInterval","resolution","isLineDrawn","lineStart","lineEnd","lineYOffset","lineXOffset","crop","range","cropRange","interval","cropInterval","isCropMode","cropStart","cropEnd","isCropStreaming","cropToGraph","streamCropImage","cameraConfig","pendingConfig","toISOString","jsonString","JSON","stringify","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","fileName","blob","Blob","type","url","URL","createObjectURL","link","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","exportGraphData","dataToExport","onMessage","lines","getSeconds","headers","content","log","loadSettings","fileInput","accept","style","onchange","event","file","files","reader","FileReader","onload","parse","result","currentSettings","onerror","readAsText","handlePeakCountChange","togglePeakMarkers","backgroundColor","padding","borderRadius","border","title","margin","fontSize","justifyContent","alignItems","controls","gap","frameCountControl","marginBottom","frameCountLabel","frameCountInput","calibrationContainer","calibrationHeader","calibrationTitle","calibrationCheckbox","marginLeft","flexDirection","calibrationPoint","calibrationLabel","calibrationInput","graphView","overflow","resizeHandle","bottom","right","cursor","zIndex","borderTop","borderLeft","borderTopLeftRadius","resizeInfo","background","channelToggles","channelButton","noData","children","_jsxFileName","lineNumber","columnNumber","borderColor","onClick","onChange","smallIconButton","paddingLeft","placeholder","marginRight","checked","smallSecondary","disabled","step","marginTop","onMouseMove","onMouseEnter","onMouseLeave","onMouseDown","viewBox","d","strokeWidth","strokeLinecap","_c2","displayName","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/SpectrometerMQTT/MQTTGraphComponent.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\n\nconst GraphComponent = React.forwardRef((props, ref) => {\n  const { onResize, lineData, onFrameAccumCountChange, onAccumulationToggle, getCameraSettings, applyCameraSettings, applyCropSettings } = props;\n  const buttonVariants = useButtonStyles();\n  const [graphSize, setGraphSize] = useState({ width: '100%', height: 200 });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [displayChannels, setDisplayChannels] = useState({\n    red: false,\n    green: false,\n    blue: false,\n    intensity: true\n  });\n  const [graphData, setGraphData] = useState(null);\n  \n  // Cursor tracking state\n  const [cursorPosition, setCursorPosition] = useState(null);\n  const [showCrosshair, setShowCrosshair] = useState(false);\n  \n  // Frame accumulation state - internally managed but synced with parent\n  const [frameAccumCount, setFrameAccumCount] = useState(10); // Default to 10 frames\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\n  const [accumulatedData, setAccumulatedData] = useState(null);\n  const [isAccumulating, setIsAccumulating] = useState(false);\n  \n  // New state for pausing graph updates\n  const [isPaused, setIsPaused] = useState(false);\n  \n  // Export file name prefix\n  const [filePrefix, setFilePrefix] = useState('spectrum');\n  const [includeDateInFilename, setIncludeDateInFilename] = useState(true);\n  \n  // Status message for operations\n  const [saveMessage, setSaveMessage] = useState('');\n  \n  // Peak detection state\n  const [showPeakMarkers, setShowPeakMarkers] = useState(true);\n  const [peakCount, setPeakCount] = useState(3); // Default to showing top 3 peaks\n  \n  // Calibration state\n  const [showCalibration, setShowCalibration] = useState(false);\n  const [calibrationPoints, setCalibrationPoints] = useState([\n    { position: 0.25000, wavelength: 450.0 },\n    { position: 0.75000, wavelength: 650.0 }\n  ]);\n  const [useCalibration, setUseCalibration] = useState(false);\n  const [flipXAxis, setFlipXAxis] = useState(false);\n  \n  const graphContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n  \n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    getCalibrationSettings: () => ({\n      calibrationPoints: [...calibrationPoints],\n      useCalibration,\n      flipXAxis\n    }),\n    \n    applyCalibrationSettings: (settings) => {\n      if (!settings) return false;\n      \n      try {\n        if (settings.calibrationPoints && Array.isArray(settings.calibrationPoints)) {\n          setCalibrationPoints(settings.calibrationPoints);\n        }\n        \n        if (typeof settings.useCalibration === 'boolean') {\n          setUseCalibration(settings.useCalibration);\n          if (settings.useCalibration) {\n            setShowCalibration(true);\n          }\n        }\n        \n        if (typeof settings.flipXAxis === 'boolean') {\n          setFlipXAxis(settings.flipXAxis);\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Error applying calibration settings:', error);\n        return false;\n      }\n    }\n  }));\n  \n  // Update graph when line data changes\n  useEffect(() => {\n    if (lineData?.pixelData && !isPaused) {\n      // Always keep the latest raw frame data for display when not accumulating\n      setGraphData(lineData.pixelData);\n      \n      if (isAccumulating) {\n        // Add new frame to accumulation buffer\n        setAccumulatedFrames(prev => {\n          const newFrames = [...prev, lineData.pixelData];\n          \n          // If we've reached our target frame count, process the accumulated data\n          if (newFrames.length >= frameAccumCount) {\n            // Sum the color data across all frames\n            const summedData = sumFrameData(newFrames);\n            \n            // Update accumulated data state\n            setAccumulatedData(summedData);\n            \n            // Draw the accumulated data\n            drawGraph(summedData);\n            \n            // Reset the accumulation buffer\n            return [];\n          }\n          \n          return newFrames;\n        });\n      } else {\n        // If not accumulating, just display the raw frame\n        drawGraph(lineData.pixelData);\n      }\n    }\n  }, [lineData, isAccumulating, frameAccumCount, useCalibration, calibrationPoints, flipXAxis, isPaused]);\n  \n  // When accumulated data changes, draw it\n  useEffect(() => {\n    if (accumulatedData && isAccumulating) {\n      drawGraph(accumulatedData);\n    }\n  }, [accumulatedData, useCalibration, calibrationPoints, flipXAxis]);\n  \n  // Sum pixel data across multiple frames\n  const sumFrameData = (frames) => {\n    if (!frames.length) return null;\n    \n    // Use the first frame as a template for structure\n    const template = frames[0];\n    \n    // Initialize arrays for summed values\n    const summedRed = Array(template.red.length).fill(0);\n    const summedGreen = Array(template.green.length).fill(0);\n    const summedBlue = Array(template.blue.length).fill(0);\n    const summedIntensity = Array(template.intensity.length).fill(0);\n    \n    // Sum values across all frames\n    frames.forEach(frame => {\n      frame.red.forEach((val, i) => summedRed[i] += val);\n      frame.green.forEach((val, i) => summedGreen[i] += val);\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\n      frame.intensity.forEach((val, i) => summedIntensity[i] += val);\n    });\n\n    // Return the summed data structure\n    return {\n      timestamp: Date.now(),\n      positions: template.positions, // Positions remain the same\n      red: summedRed,\n      green: summedGreen,\n      blue: summedBlue,\n      intensity: summedIntensity,\n      lineLength: template.lineLength,\n      frameCount: frames.length // Add count of frames that were summed\n    };\n  };\n  \n  // Convert position to wavelength using calibration points\n  const positionToWavelength = (position) => {\n    if (!useCalibration || calibrationPoints.length < 2) {\n      return position;\n    }\n    \n    // Sort calibration points by position\n    const sortedPoints = [...calibrationPoints].sort((a, b) => a.position - b.position);\n    \n    // Find the two calibration points that surround the given position\n    let p1, p2;\n    for (let i = 0; i < sortedPoints.length - 1; i++) {\n      if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\n        p1 = sortedPoints[i];\n        p2 = sortedPoints[i + 1];\n        break;\n      }\n    }\n    \n    // If position is outside the calibration range, use extrapolation\n    if (!p1 || !p2) {\n      if (position < sortedPoints[0].position) {\n        // Extrapolate below the first point\n        // Use the first two points for the slope calculation\n        p1 = sortedPoints[0];\n        p2 = sortedPoints[1];\n        // Calculate the slope between first two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p1.wavelength + slope * (position - p1.position);\n      } else {\n        // Extrapolate above the last point\n        // Use the last two points for the slope calculation\n        p1 = sortedPoints[sortedPoints.length - 2];\n        p2 = sortedPoints[sortedPoints.length - 1];\n        // Calculate the slope between last two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p2.wavelength + slope * (position - p2.position);\n      }\n    }\n    \n    // Linear interpolation between the two calibration points\n    const t = (position - p1.position) / (p2.position - p1.position);\n    return p1.wavelength + t * (p2.wavelength - p1.wavelength);\n  };\n  \n  // Handle changing the frame accumulation count\n  const handleFrameCountChange = (e) => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count > 0) {\n      setFrameAccumCount(count);\n      // Reset accumulation when count changes\n      setAccumulatedFrames([]);\n      setAccumulatedData(null);\n      \n      // Notify parent of change\n      if (onFrameAccumCountChange) {\n        onFrameAccumCountChange(count);\n      }\n    }\n  };\n  \n  // Toggle accumulation mode\n  const toggleAccumulation = () => {\n    const newValue = !isAccumulating;\n    setIsAccumulating(newValue);\n    // Reset accumulated data when toggling\n    setAccumulatedFrames([]);\n    setAccumulatedData(null);\n    \n    // Notify parent of change\n    if (onAccumulationToggle) {\n      onAccumulationToggle(newValue);\n    }\n  };\n  \n  // Toggle pause mode\n  const togglePause = () => {\n    setIsPaused(!isPaused);\n  };\n  \n  // Toggle calibration controls\n  const toggleCalibration = () => {\n    setShowCalibration(!showCalibration);\n  };\n  \n  // Toggle using calibration\n  const toggleUseCalibration = () => {\n    setUseCalibration(!useCalibration);\n  };\n  \n  // Toggle flip X axis\n  const toggleFlipXAxis = () => {\n    setFlipXAxis(!flipXAxis);\n  };\n  \n  // Update calibration point\n  const updateCalibrationPoint = (index, field, value) => {\n    const numValue = parseFloat(value);\n    if (isNaN(numValue)) return;\n    \n    // Format position values to 3 decimal places\n    const formattedValue = field === 'position' ? \n      parseFloat(numValue.toFixed(3)) : \n      numValue;\n    \n    setCalibrationPoints(points => {\n      const newPoints = [...points];\n      newPoints[index] = {\n        ...newPoints[index],\n        [field]: formattedValue\n      };\n      return newPoints;\n    });\n  };\n  \n  // Initialize and resize the canvas when graph size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const container = graphContainerRef.current;\n      \n      if (container) {\n        // Set canvas size to match container\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n        \n        // Redraw graph with new size\n        if (isAccumulating && accumulatedData) {\n          drawGraph(accumulatedData);\n        } else if (graphData) {\n          drawGraph(graphData);\n        }\n      }\n    }\n  }, [graphSize, graphData, accumulatedData, isAccumulating, useCalibration, calibrationPoints, flipXAxis]);\n  \n  // Find peaks in data array\n  const findPeaks = (values, positions, count = 3) => {\n    if (!values || values.length < 3) return [];\n    \n    // Find local maxima (points higher than both neighbors)\n    const peaks = [];\n    \n    for (let i = 1; i < values.length - 1; i++) {\n      if (values[i] > values[i - 1] && values[i] > values[i + 1]) {\n        // This is a local maximum\n        const peak = {\n          index: i,\n          position: positions[i],\n          value: values[i]\n        };\n        \n        // Refine position using quadratic interpolation for better accuracy\n        try {\n          // Based on three points around the peak\n          const x1 = positions[i-1];\n          const x2 = positions[i];\n          const x3 = positions[i+1];\n          const y1 = values[i-1];\n          const y2 = values[i];\n          const y3 = values[i+1];\n          \n          // Only apply refinement if we have valid neighboring points\n          const denom = (x1 - x2) * (x1 - x3) * (x2 - x3);\n          if (denom !== 0) {\n            // Quadratic interpolation formula\n            const A = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom;\n            const B = (x3*x3 * (y1 - y2) + x2*x2 * (y3 - y1) + x1*x1 * (y2 - y3)) / denom;\n            \n            // Calculate refined x position at the peak of the parabola\n            if (A !== 0) {\n              const refinedPos = -B / (2 * A);\n              \n              // Only use refined position if it's within a reasonable range\n              if (refinedPos >= x1 && refinedPos <= x3) {\n                peak.refinedPosition = refinedPos;\n              }\n            }\n          }\n        } catch (e) {\n          console.warn('Error during peak refinement', e);\n          // If refinement fails, use the original position\n        }\n        \n        peaks.push(peak);\n      }\n    }\n    \n    // Sort peaks by value (descending)\n    peaks.sort((a, b) => b.value - a.value);\n    \n    // Filter peaks to ensure they're at least 10nm apart (or equivalent in position space)\n    const filteredPeaks = [];\n    \n    // Default position-based distance (approximately 5% of the position range)\n    const minPositionDistance = 0.05;\n    \n    for (const peak of peaks) {\n      // Check if this peak is too close to any already-selected stronger peak\n      let tooClose = false;\n      \n      for (const selectedPeak of filteredPeaks) {\n        // Use position-based distance (wavelength conversion will happen in the drawing code)\n        const distance = Math.abs(peak.position - selectedPeak.position);\n        \n        if (distance < minPositionDistance) {\n          tooClose = true;\n          break;\n        }\n      }\n      \n      // Add the peak if it's not too close to any stronger peak\n      if (!tooClose) {\n        filteredPeaks.push(peak);\n        \n        // Stop if we have enough peaks\n        if (filteredPeaks.length >= count) {\n          break;\n        }\n      }\n    }\n    \n    return filteredPeaks;\n  };\n  \n  // Draw the graph based on pixel data\n  const drawGraph = (data) => {\n    if (!canvasRef.current || !data) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // Clear the canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Draw background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n    \n    // Horizontal grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const y = height * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n    }\n    \n    // Vertical grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const x = width * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n    }\n    \n    // Calculate min and max wavelength values for calibration upfront\n    let minWavelength, maxWavelength;\n    if (useCalibration && calibrationPoints.length >= 2) {\n      const wavelengths = calibrationPoints.map(p => p.wavelength);\n      minWavelength = Math.min(...wavelengths);\n      maxWavelength = Math.max(...wavelengths);\n    }\n    \n    // Set line styles for different channels\n    const styles = {\n      red: { color: 'rgba(255, 0, 0, 0.8)', width: 1.5 },\n      green: { color: 'rgba(0, 255, 0, 0.8)', width: 1.5 },\n      blue: { color: 'rgba(0, 0, 255, 0.8)', width: 1.5 },\n      intensity: { color: 'rgba(255, 255, 255, 0.8)', width: 2 }\n    };\n    \n    // Find max values for scaling\n    const maxRed = Math.max(...data.red, 1);\n    const maxGreen = Math.max(...data.green, 1);\n    const maxBlue = Math.max(...data.blue, 1);\n    const maxIntensity = Math.max(...data.intensity, 1);\n    \n    // Store the peak data for each displayed channel\n    const channelPeaks = {};\n    \n    // Plot each enabled channel\n    Object.entries(displayChannels).forEach(([channel, isEnabled]) => {\n      if (!isEnabled) return;\n      \n      const values = data[channel];\n      const maxValue = channel === 'red' ? maxRed : \n                      channel === 'green' ? maxGreen : \n                      channel === 'blue' ? maxBlue : maxIntensity;\n      \n      // Set line style\n      ctx.strokeStyle = styles[channel].color;\n      ctx.lineWidth = styles[channel].width;\n      \n      // Begin the path\n      ctx.beginPath();\n      \n      // Draw the line\n      for (let i = 0; i < values.length; i++) {\n        // Calculate x position, applying flip if enabled\n        let xPos = data.positions[i];\n        if (flipXAxis) {\n          xPos = 1 - xPos; // Invert position (0 becomes 1, 1 becomes 0)\n        }\n        \n        // Convert to pixel coordinates\n        const x = xPos * width;\n        \n        // Invert Y since canvas 0,0 is top-left\n        const y = height - (values[i] / maxValue) * height;\n        \n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      // Draw the path\n      ctx.stroke();\n    });\n    \n    // Detect peaks for intensity channel only if enabled\n    if (showPeakMarkers && displayChannels.intensity) {\n      const intensityValues = data.intensity;\n      // Use original positions for peak detection\n      const peaks = findPeaks(intensityValues, data.positions, peakCount);\n      \n      // If calibration is enabled, perform additional wavelength-based filtering\n      if (useCalibration) {\n        // Convert positions to wavelengths and filter to ensure 10nm minimum distance\n        const wavelengthPeaks = [];\n        \n        // Process peaks in order of intensity (already sorted by findPeaks)\n        for (const peak of peaks) {\n          const peakWavelength = positionToWavelength(peak.position);\n          let tooClose = false;\n          \n          // Check if this peak is too close to any already selected peak\n          for (const selectedPeak of wavelengthPeaks) {\n            const selectedWavelength = positionToWavelength(selectedPeak.position);\n            const distance = Math.abs(peakWavelength - selectedWavelength);\n            \n            if (distance < 10) { // 10nm minimum distance\n              tooClose = true;\n              break;\n            }\n          }\n          \n          // Add the peak if it's not too close to any already selected peak\n          if (!tooClose) {\n            wavelengthPeaks.push(peak);\n          }\n        }\n        \n        channelPeaks['intensity'] = wavelengthPeaks;\n      } else {\n        channelPeaks['intensity'] = peaks;\n      }\n    }\n    \n    // Draw timestamp and status information\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.font = '10px monospace';\n    ctx.textAlign = 'left';\n    \n    // Show time and accumulation status\n    const timeText = `Time: ${new Date(data.timestamp).toLocaleTimeString()}`;\n    const statusText = isAccumulating \n      ? `Accumulating: ${accumulatedFrames.length}/${frameAccumCount} frames` \n      : 'Live data';\n    \n    ctx.fillText(timeText, 5, 15);\n    ctx.fillText(statusText, width - 150, 15);\n    \n    // Draw calibration status if enabled\n    if (useCalibration) {\n      ctx.fillText('Calibrated', width - 150, 45);\n    }\n    \n    // Draw frame count if this is accumulated data\n    if (data.frameCount) {\n      ctx.fillText(`Summed ${data.frameCount} frames`, width - 150, 30);\n    }\n    \n    // Draw channel legend\n    const legendStartY = 30;\n    const legendSpacing = 15;\n    \n    if (displayChannels.red) {\n      ctx.fillStyle = styles.red.color;\n      ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)}`, 5, legendStartY);\n    }\n    \n    if (displayChannels.green) {\n      ctx.fillStyle = styles.green.color;\n      ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)}`, 5, legendStartY + legendSpacing);\n    }\n    \n    if (displayChannels.blue) {\n      ctx.fillStyle = styles.blue.color;\n      ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)}`, 5, legendStartY + legendSpacing * 2);\n    }\n    \n    if (displayChannels.intensity) {\n      ctx.fillStyle = styles.intensity.color;\n      ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)}`, 5, legendStartY + legendSpacing * 3);\n    }\n    \n    // Draw wavelength axis labels if calibration is enabled (unified section)\n    if (useCalibration && minWavelength !== undefined && maxWavelength !== undefined) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.font = '10px monospace';\n      ctx.textAlign = 'center';\n      \n      // Clear the bottom area where labels will go\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'; // Match background color\n      ctx.fillRect(0, height - 20, width, 20);\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'; // Reset text color\n      \n      // Draw axis labels at regular position intervals (0%, 25%, 50%, 75%, 100%)\n      // but show the corresponding wavelength values\n      for (let i = 0; i <= 4; i++) {\n        const position = i / 4; // Regular positions (0, 0.25, 0.5, 0.75, 1)\n        \n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - position : position;\n        const x = displayPosition * width;\n        \n        // Convert position to wavelength using calibration\n        const wavelength = positionToWavelength(position);\n        \n        ctx.fillText(`${Math.round(wavelength)}nm`, x, height - 5);\n      }\n    }\n    \n    // Draw calibration points if enabled\n    if (useCalibration) {\n      calibrationPoints.forEach(point => {\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - point.position : point.position;\n        // Draw vertical line at calibration point position\n        const x = displayPosition * width;\n        \n        ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n        \n        // Draw wavelength label at the calibration point\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\n        ctx.font = '10px monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${point.wavelength}nm`, x, height - 20); // Higher position to avoid overlap\n      });\n    }\n    \n    // Draw peak markers if enabled\n    if (showPeakMarkers) {\n      // Draw peaks for each enabled channel\n      Object.entries(channelPeaks).forEach(([channel, peaks]) => {\n        // Use the same color as the channel with increased opacity\n        const baseColor = styles[channel].color;\n        const markerColor = baseColor.replace('rgba', 'rgb').replace(/,\\s*[\\d.]+\\)/, ')');\n        \n        // Get max value for this channel for y-coordinate calculation\n        const maxValue = channel === 'red' ? maxRed : \n                        channel === 'green' ? maxGreen : \n                        channel === 'blue' ? maxBlue : maxIntensity;\n        \n        peaks.forEach(peak => {\n          // Get the original position\n          let xPos = peak.position;\n          \n          // Use refined position if available (within reasonable bounds)\n          if (peak.refinedPosition !== undefined) {\n            xPos = peak.refinedPosition;\n          }\n          \n          // Apply flip if enabled\n          if (flipXAxis) {\n            xPos = 1 - xPos;\n          }\n          \n          // Convert to pixel coordinates\n          const x = xPos * width;\n          const y = height - (peak.value / maxValue) * height;\n          \n          // Check if peak is near the top of the graph (below a minimum distance from top)\n          const isNearTop = y < 60; // 60px from top\n          \n          // Draw a vertical line first (always visible)\n          ctx.strokeStyle = markerColor;\n          ctx.setLineDash([2, 2]);\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, height);\n          ctx.stroke();\n          ctx.setLineDash([]);\n          \n          // Draw marker at peak position (triangle pointing down or up based on position)\n          ctx.fillStyle = markerColor;\n          ctx.beginPath();\n          \n          if (isNearTop) {\n            // If near top, draw triangle pointing up from a position slightly below the peak\n            const markerY = y + 15;\n            ctx.moveTo(x, markerY);  \n            ctx.lineTo(x - 5, markerY + 10);\n            ctx.lineTo(x + 5, markerY + 10);\n          } else {\n            // Normal case - draw triangle pointing down\n            ctx.moveTo(x, y);  \n            ctx.lineTo(x - 5, y - 10);\n            ctx.lineTo(x + 5, y - 10);\n          }\n          ctx.closePath();\n          ctx.fill();\n          \n          // Prepare label text\n          let label;\n          if (useCalibration) {\n            const wavelength = positionToWavelength(peak.position);\n            label = `${wavelength.toFixed(1)}nm`;\n          } else {\n            label = `Pos: ${peak.position.toFixed(3)}`;\n          }\n          \n          const valueLabel = `I: ${peak.value.toFixed(1)}`;\n          \n          // Setup text rendering\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n          ctx.font = '10px monospace';\n          ctx.textAlign = 'center';\n          \n          // Measure text dimensions for backgrounds\n          const textWidth = ctx.measureText(label).width + 6;\n          const valueWidth = ctx.measureText(valueLabel).width + 6;\n          \n          if (isNearTop) {\n            // Draw position/wavelength label below the marker\n            const labelY = y + 30;\n            \n            // Draw text background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth/2, labelY - 10, textWidth, 16);\n            \n            // Draw label text\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, labelY);\n            \n            // Draw value label below that\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth/2, labelY + 7, valueWidth, 16);\n            \n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, labelY + 17);\n          } else {\n            // Standard label position above marker\n            // Draw text background for better readability\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth/2, y - 25, textWidth, 16);\n            \n            // Draw label above marker\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, y - 14);\n            \n            // Draw peak value\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth/2, y - 42, valueWidth, 16);\n            \n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, y - 31);\n          }\n        });\n      });\n    }\n    \n    // Draw crosshair at cursor position\n    if (showCrosshair && cursorPosition) {\n      const { x, y } = cursorPosition;\n      \n      if (x >= 0 && x <= width && y >= 0 && y <= height) {\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.setLineDash([3, 3]); // Dashed line\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n        \n        // Draw horizontal line\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset line style\n        \n        // Calculate and display wavelength at cursor position\n        const position = x / width; // Normalize cursor position (0-1)\n        \n        // Apply flip if needed to get the actual data position\n        const dataPosition = flipXAxis ? 1 - position : position;\n        \n        // Determine wavelength based on cursor position\n        let wavelength;\n        if (useCalibration) {\n          wavelength = positionToWavelength(dataPosition);\n        } else {\n          wavelength = dataPosition; // Just show the position value when not calibrated\n        }\n        \n        // Calculate y-values at the cursor position\n        let valueText = '';\n        \n        if (data && data.positions && data.positions.length > 0) {\n          // Find the nearest data point to the cursor\n          const positionIndex = findNearestPositionIndex(data.positions, dataPosition);\n          \n          // Build value text based on active channels\n          const channelTexts = [];\n          if (displayChannels.red) {\n            channelTexts.push(`R:${Math.round(data.red[positionIndex])}`);\n          }\n          if (displayChannels.green) {\n            channelTexts.push(`G:${Math.round(data.green[positionIndex])}`);\n          }\n          if (displayChannels.blue) {\n            channelTexts.push(`B:${Math.round(data.blue[positionIndex])}`);\n          }\n          if (displayChannels.intensity) {\n            channelTexts.push(`I:${data.intensity[positionIndex].toFixed(1)}`);\n          }\n          \n          valueText = channelTexts.join(', ');\n        }\n        \n        // Create a background for the text for better readability\n        const wavelengthText = useCalibration ? `${wavelength.toFixed(1)}nm` : `Pos: ${wavelength.toFixed(3)}`;\n        \n        // Draw text background\n        const textWidth = ctx.measureText(wavelengthText).width + 10;\n        const valueTextWidth = ctx.measureText(valueText).width + 10;\n        \n        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        ctx.fillRect(x - textWidth/2, height - 45, textWidth, 20);\n        \n        if (valueText) {\n          ctx.fillRect(x - valueTextWidth/2, 5, valueTextWidth, 20);\n        }\n        \n        // Draw wavelength text below cursor\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        ctx.textAlign = 'center';\n        ctx.fillText(wavelengthText, x, height - 30);\n        \n        // Draw value text above cursor\n        if (valueText) {\n          ctx.fillText(valueText, x, 20);\n        }\n      }\n    }\n  };\n  \n  // Helper to find the index of the nearest position value to a given position\n  const findNearestPositionIndex = (positions, targetPosition) => {\n    if (!positions || positions.length === 0) return -1;\n    \n    let nearestIndex = 0;\n    let minDistance = Math.abs(positions[0] - targetPosition);\n    \n    for (let i = 1; i < positions.length; i++) {\n      const distance = Math.abs(positions[i] - targetPosition);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestIndex = i;\n      }\n    }\n    \n    return nearestIndex;\n  };\n  \n  // Toggle display of a specific channel\n  const toggleChannel = (channel) => {\n    setDisplayChannels(prev => ({\n      ...prev,\n      [channel]: !prev[channel]\n    }));\n  };\n  \n  // Handle mouse movement over the graph\n  const handleMouseMove = (e) => {\n    if (!graphContainerRef.current) return;\n    \n    // Get canvas bounds\n    const rect = graphContainerRef.current.getBoundingClientRect();\n    \n    // Calculate cursor position relative to canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Update cursor position state\n    setCursorPosition({ x, y });\n    \n    // Redraw the graph with crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n  \n  // Handle mouse enter/leave events\n  const handleMouseEnter = () => {\n    setShowCrosshair(true);\n  };\n  \n  const handleMouseLeave = () => {\n    setShowCrosshair(false);\n    setCursorPosition(null);\n    \n    // Redraw the graph without crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n  \n  // Similar resize functionality as before\n  const handleResizeStart = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = graphContainerRef.current?.clientWidth || 400;\n    const startHeight = graphContainerRef.current?.clientHeight || graphSize.height;\n    \n    // Show resize feedback\n    setIsResizing(true);\n    setShowResizeInfo(true);\n    \n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaY = moveEvent.clientY - startY;\n      \n      // Only adjust height, keep width as 100%\n      const newHeight = Math.max(100, startHeight + deltaY);\n      \n      // Update graph size\n      const newSize = {\n        width: '100%',  // Keep width as 100% for responsive behavior\n        height: Math.round(newHeight)\n      };\n      \n      setGraphSize(newSize);\n      \n      // Notify parent if needed\n      if (onResize) {\n        onResize(newSize);\n      }\n      \n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n    \n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      \n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n    \n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      // Get camera settings from parent component if available\n      const cameraSettings = getCameraSettings ? getCameraSettings() : null;\n      \n      // Create settings object with all necessary parameters\n      const settings = {\n        // Calibration settings\n        calibration: {\n          points: calibrationPoints,\n          useCalibration: useCalibration,\n          flipXAxis: flipXAxis,\n          showCalibration: showCalibration\n        },\n        // Display settings\n        display: {\n          channels: displayChannels,\n          graphSize: graphSize\n        },\n        // Frame accumulation settings\n        accumulation: {\n          frameAccumCount: frameAccumCount,\n          isAccumulating: isAccumulating,\n          isPaused: isPaused\n        },\n        // Peak marker settings\n        peaks: {\n          showPeakMarkers: showPeakMarkers,\n          peakCount: peakCount\n        },\n        // Export settings\n        export: {\n          filePrefix: filePrefix,\n          includeDateInFilename: includeDateInFilename\n        },\n        // Camera settings from MQTTCameraComponent (if available)\n        camera: cameraSettings ? {\n          mqttTopic: cameraSettings.mqttTopic,\n          pollingInterval: cameraSettings.pollingInterval,\n          resolution: cameraSettings.resolution,\n          // Line drawing settings\n          isLineDrawn: cameraSettings.isLineDrawn,\n          lineStart: cameraSettings.lineStart,\n          lineEnd: cameraSettings.lineEnd,\n          lineYOffset: cameraSettings.lineYOffset,\n          lineXOffset: cameraSettings.lineXOffset,\n          // Crop settings in the exact format expected by MQTTCameraComponent\n          crop: {\n            range: cameraSettings.cropRange,\n            interval: cameraSettings.cropInterval,\n            isCropMode: cameraSettings.isCropMode,\n            cropStart: cameraSettings.cropStart,\n            cropEnd: cameraSettings.cropEnd,\n            isCropStreaming: cameraSettings.isCropStreaming,\n            cropToGraph: cameraSettings.cropToGraph,\n            streamCropImage: cameraSettings.streamCropImage\n          },\n          // Direct properties for backward compatibility\n          cropRange: cameraSettings.cropRange,\n          cropInterval: cameraSettings.cropInterval,\n          isCropMode: cameraSettings.isCropMode,\n          cropStart: cameraSettings.cropStart,\n          cropEnd: cameraSettings.cropEnd,\n          isCropStreaming: cameraSettings.isCropStreaming,\n          // Camera config\n          cameraConfig: cameraSettings.cameraConfig,\n          pendingConfig: cameraSettings.pendingConfig\n        } : null,\n        // Add timestamp for reference\n        timestamp: new Date().toISOString()\n      };\n      \n      // Convert to JSON string with nice formatting\n      const jsonString = JSON.stringify(settings, null, 2);\n      \n      // Create file name with timestamp\n      const now = new Date();\n      const timestamp = now.getFullYear() +\n        String(now.getMonth() + 1).padStart(2, '0') +\n        String(now.getDate()).padStart(2, '0') + '_' +\n        String(now.getHours()).padStart(2, '0') +\n        String(now.getMinutes()).padStart(2, '0');\n        \n      const fileName = `spectrometer_settings_${timestamp}.json`;\n      \n      // Create blob and download\n      const blob = new Blob([jsonString], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      \n      // Trigger download\n      document.body.appendChild(link);\n      link.click();\n      \n      // Cleanup\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n      \n      // Show success message\n      setSaveMessage(`Settings exported as ${fileName}`);\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n  \n  // Export graph data as text file\n  const exportGraphData = () => {\n    // Make sure we have data to export\n    const dataToExport = isAccumulating ? accumulatedData : graphData;\n    \n    if (!dataToExport) {\n      console.warn('No data to export');\n      if (props.onMessage) {\n        props.onMessage('No data to export');\n      }\n      return;\n    }\n    \n    try {\n      const lines = [];\n      // Create a timestamp string in format YYYYMMDDhhmmss\n      const now = new Date();\n      const timestamp = now.getFullYear() +\n        String(now.getMonth() + 1).padStart(2, '0') +\n        String(now.getDate()).padStart(2, '0') +\n        String(now.getHours()).padStart(2, '0') +\n        String(now.getMinutes()).padStart(2, '0') +\n        String(now.getSeconds()).padStart(2, '0');\n        \n      lines.push(timestamp);\n      // Add information on calibration points\n      if (useCalibration) {\n        lines.push(`# Calibration enabled: Yes`);\n        lines.push(`# Calibration points:`);\n        calibrationPoints.forEach((point, index) => {\n          lines.push(`# Point ${index + 1}: Position ${point.position.toFixed(3)} = ${point.wavelength.toFixed(1)} nm`);\n        });\n        if (flipXAxis) {\n          lines.push(`# X-Axis flipped: Yes`);\n        }\n      } else {\n        lines.push(`# Calibration enabled: No`);\n      }\n      \n      // Add accumulation information\n      if (isAccumulating && dataToExport.frameCount) {\n        lines.push(`# Frame accumulation: ${dataToExport.frameCount} frames`);\n      }\n\n      // Add column headers as first line\n      const headers = useCalibration ? \n        \"Wavelength (nm);Intensity;Red;Green;Blue\" : \n        \"Position;Intensity;Red;Green;Blue\";\n      lines.push(headers);\n      \n      // Loop through data points\n      for (let i = 0; i < dataToExport.positions.length; i++) {\n        let position = dataToExport.positions[i];\n        // Convert position to wavelength if calibration is enabled\n        let wavelength = position;\n        if (useCalibration) {\n          wavelength = positionToWavelength(position);\n        }\n        \n        // Get all channel values\n        const intensity = dataToExport.intensity[i];\n        const red = dataToExport.red[i];\n        const green = dataToExport.green[i];\n        const blue = dataToExport.blue[i];\n        \n        // Add line with all values\n        lines.push(`${wavelength.toFixed(3)};${intensity.toFixed(2)};${red.toFixed(2)};${green.toFixed(2)};${blue.toFixed(2)}`);\n      }\n      \n      // Join lines with newlines\n      const content = lines.join('\\n');\n      \n      \n      \n      // Create filename with prefix and optional timestamp\n      const fileName = includeDateInFilename ? \n        `${filePrefix}_${timestamp}.txt` : \n        `${filePrefix}.txt`;\n      \n      // Create Blob with content\n      const blob = new Blob([content], { type: 'text/plain' });\n      \n      // Create download link\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      \n      // Append to document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n      \n      // Show success message\n      if (props.onMessage) {\n        props.onMessage(`Data exported as ${fileName}`);\n      } else {\n        // If no message handler provided, show alert\n        console.log(`Data exported as ${fileName}`);\n        setSaveMessage && setSaveMessage(`Data exported as ${fileName}`);\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n      \n    } catch (error) {\n      console.error('Failed to export graph data:', error);\n      if (props.onMessage) {\n        props.onMessage('Error exporting data');\n      } else {\n        setSaveMessage && setSaveMessage('Error exporting data');\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    }\n  };\n  \n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    try {\n      // Create a file input element\n      const fileInput = document.createElement('input');\n      fileInput.type = 'file';\n      fileInput.accept = '.json';\n      fileInput.style.display = 'none';\n      \n      // Handle file selection\n      fileInput.onchange = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n        \n        const reader = new FileReader();\n        \n        reader.onload = (e) => {\n          try {\n            // Parse the JSON data\n            const settings = JSON.parse(e.target.result);\n            \n            // Apply calibration settings\n            if (settings.calibration) {\n              if (settings.calibration.points && Array.isArray(settings.calibration.points)) {\n                setCalibrationPoints(settings.calibration.points);\n              }\n              \n              if (typeof settings.calibration.useCalibration === 'boolean') {\n                setUseCalibration(settings.calibration.useCalibration);\n              }\n              \n              if (typeof settings.calibration.flipXAxis === 'boolean') {\n                setFlipXAxis(settings.calibration.flipXAxis);\n              }\n              \n              if (typeof settings.calibration.showCalibration === 'boolean') {\n                setShowCalibration(settings.calibration.showCalibration);\n              }\n            }\n            \n            // Apply display settings\n            if (settings.display) {\n              if (settings.display.channels) {\n                setDisplayChannels(settings.display.channels);\n              }\n              \n              if (settings.display.graphSize) {\n                setGraphSize(settings.display.graphSize);\n                if (onResize) {\n                  onResize(settings.display.graphSize);\n                }\n              }\n            }\n            \n            // Apply accumulation settings\n            if (settings.accumulation) {\n              if (typeof settings.accumulation.frameAccumCount === 'number') {\n                setFrameAccumCount(settings.accumulation.frameAccumCount);\n                if (onFrameAccumCountChange) {\n                  onFrameAccumCountChange(settings.accumulation.frameAccumCount);\n                }\n              }\n              \n              if (typeof settings.accumulation.isAccumulating === 'boolean') {\n                setIsAccumulating(settings.accumulation.isAccumulating);\n                if (onAccumulationToggle) {\n                  onAccumulationToggle(settings.accumulation.isAccumulating);\n                }\n              }\n              \n              if (typeof settings.accumulation.isPaused === 'boolean') {\n                setIsPaused(settings.accumulation.isPaused);\n              }\n            }\n            \n            // Apply peak marker settings\n            if (settings.peaks) {\n              if (typeof settings.peaks.showPeakMarkers === 'boolean') {\n                setShowPeakMarkers(settings.peaks.showPeakMarkers);\n              }\n              \n              if (typeof settings.peaks.peakCount === 'number') {\n                setPeakCount(settings.peaks.peakCount);\n              }\n            }\n            \n            // Apply export settings\n            if (settings.export) {\n              if (settings.export.filePrefix) {\n                setFilePrefix(settings.export.filePrefix);\n              }\n              \n              if (typeof settings.export.includeDateInFilename === 'boolean') {\n                setIncludeDateInFilename(settings.export.includeDateInFilename);\n              }\n            }\n            \n            // Apply camera settings if available\n            if (settings.camera && applyCameraSettings) {\n              console.log('Applying camera settings from loaded file', settings.camera);\n              \n              // Check if cropRange exists and is valid\n              if (settings.camera.cropRange && \n                  Array.isArray(settings.camera.cropRange) && \n                  settings.camera.cropRange.length === 4) {\n                console.log('Valid crop range found:', settings.camera.cropRange);\n              } else {\n                console.warn('Invalid or missing crop range in loaded settings');\n              }\n              \n              // If we have a specific function to apply crop settings, use it\n              if (props.applyCropSettings && settings.camera.crop) {\n                console.log('Applying crop settings separately:', settings.camera.crop);\n                props.applyCropSettings(settings.camera.crop);\n              }\n              \n              // Apply all camera settings\n              applyCameraSettings(settings.camera);\n              \n              // Log a callback to verify settings were applied\n              setTimeout(() => {\n                if (getCameraSettings) {\n                  const currentSettings = getCameraSettings();\n                  console.log('After applying camera settings, current state:', {\n                    cropRange: currentSettings.cropRange,\n                    cropInterval: currentSettings.cropInterval,\n                    isCropMode: currentSettings.isCropMode\n                  });\n                }\n              }, 500);\n            }\n            \n            // Reset accumulated data when loading settings\n            setAccumulatedFrames([]);\n            setAccumulatedData(null);\n            \n            // Show success message\n            setSaveMessage('Settings loaded successfully');\n            setTimeout(() => setSaveMessage(''), 3000);\n          } catch (error) {\n            console.error('Failed to parse settings file:', error);\n            setSaveMessage('Error loading settings: Invalid file format');\n            setTimeout(() => setSaveMessage(''), 3000);\n          }\n        };\n        \n        reader.onerror = () => {\n          setSaveMessage('Error reading settings file');\n          setTimeout(() => setSaveMessage(''), 3000);\n        };\n        \n        // Read the file as text\n        reader.readAsText(file);\n      };\n      \n      // Trigger file selection dialog\n      document.body.appendChild(fileInput);\n      fileInput.click();\n      \n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(fileInput);\n      }, 100);\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      setSaveMessage('Error loading settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n  \n  // Handle peak count change\n  const handlePeakCountChange = (e) => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count >= 0 && count <= 10) {\n      setPeakCount(count);\n    }\n  };\n  \n  // Toggle peak markers\n  const togglePeakMarkers = () => {\n    setShowPeakMarkers(!showPeakMarkers);\n  };\n  \n  const styles = {\n    container: {\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      padding: '10px',\n      borderRadius: '4px',\n      position: 'relative',\n      border: isResizing ? '1px dashed #4CAF50' : 'none',\n    },\n    title: {\n      margin: '0 0 10px 0',\n      fontSize: '14px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    controls: {\n      display: 'flex',\n      gap: '5px',\n      alignItems: 'center',\n    },\n    frameCountControl: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '10px',\n      gap: '8px'\n    },\n    frameCountLabel: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.8)'\n    },\n    frameCountInput: {\n      width: '50px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '12px'\n    },\n    calibrationContainer: {\n      marginBottom: '10px',\n      padding: '8px',\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      borderRadius: '4px'\n    },\n    calibrationHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '8px'\n    },\n    calibrationTitle: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.9)',\n      margin: 0\n    },\n    calibrationCheckbox: {\n      marginLeft: '8px'\n    },\n    calibrationPoints: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '6px'\n    },\n    calibrationPoint: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      gap: '6px'\n    },\n    calibrationLabel: {\n      fontSize: '11px',\n      color: 'rgba(255, 255, 255, 0.7)',\n      width: '40px'\n    },\n    calibrationInput: {\n      width: '60px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '11px'\n    },\n    graphView: {\n      width: graphSize.width,\n      height: `${graphSize.height}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    canvas: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    resizeHandle: {\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      width: '20px',\n      height: '20px',\n      cursor: 'ns-resize', // Only allow vertical resizing\n      zIndex: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\n      borderTopLeftRadius: '4px',\n    },\n    resizeInfo: {\n      position: 'absolute',\n      right: '25px',\n      bottom: '25px',\n      padding: '2px 6px',\n      background: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '3px',\n      fontSize: '11px',\n      zIndex: 100\n    },\n    channelToggles: {\n      display: 'flex',\n      gap: '5px'\n    },\n    channelButton: {\n      fontSize: '10px',\n      padding: '2px 5px',\n      borderRadius: '3px',\n      cursor: 'pointer',\n      border: '1px solid rgba(255, 255, 255, 0.3)',\n      backgroundColor: 'rgba(30, 30, 30, 0.7)'\n    },\n    noData: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      color: 'rgba(255, 255, 255, 0.5)',\n      fontSize: '12px'\n    }\n  };\n  \n  // Return the component JSX\n  return (\n    <div style={styles.container}>\n      <div style={styles.title}>\n        <h3 style={{ margin: 0 }}>Intensity Graph</h3>\n        <div style={styles.channelToggles}>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.4)',\n              borderColor: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.2)'\n            }}\n            onClick={() => toggleChannel('red')}\n          >\n            R\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.4)',\n              borderColor: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.2)'\n            }}\n            onClick={() => toggleChannel('green')}\n          >\n            G\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.4)',\n              borderColor: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.2)'\n            }}\n            onClick={() => toggleChannel('blue')}\n          >\n            B\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.4)',\n              borderColor: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.2)'\n            }}\n            onClick={() => toggleChannel('intensity')}\n          >\n            I\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: 'rgb(255, 255, 100)',\n              borderColor: showCalibration ? 'rgb(255, 255, 100)' : 'rgba(255, 255, 100, 0.2)',\n              backgroundColor: showCalibration ? 'rgba(60, 60, 0, 0.6)' : 'rgba(30, 30, 30, 0.7)'\n            }}\n            onClick={toggleCalibration}\n            title=\"Toggle calibration controls\"\n          >\n            Cal\n          </button>\n        </div>\n      </div>\n      \n      <div style={styles.frameCountControl}>\n        <div style={styles.frameCountLabel}>Frame accumulation:</div>\n        <input \n          type=\"number\" \n          min=\"1\" \n          max=\"2000\"\n          value={frameAccumCount}\n          onChange={handleFrameCountChange}\n          style={styles.frameCountInput}\n        />\n        <button \n          style={{\n            ...buttonVariants.smallIconButton,\n            backgroundColor: isAccumulating ? 'rgba(255, 165, 0, 0.7)' : undefined\n          }}\n          onClick={toggleAccumulation}\n          title={isAccumulating ? \"Switch to live data\" : \"Switch to frame accumulation\"}\n        >\n          {isAccumulating ? \"Accumulating\" : \"Live\"}\n        </button>\n\n        {/*button that pauses graph*/}\n        <button \n          style={{\n            ...buttonVariants.smallIconButton,\n            backgroundColor: isPaused ? 'rgba(220, 53, 69, 0.7)' : undefined\n          }}\n          onClick={togglePause}\n          title={isPaused ? \"Resume graph updates\" : \"Pause graph updates\"}\n        >\n          {isPaused ? \"⏸️ Paused\" : \"▶️ Running\"}\n        </button>\n        \n        {/* Peak markers control */}\n        <div style={{ \n          display: 'flex', \n          alignItems: 'center', \n          gap: '5px',\n          marginLeft: '20px',\n          borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n          paddingLeft: '10px'\n        }}>\n          <div style={styles.frameCountLabel}>Peak markers:</div>\n          <input \n            type=\"number\" \n            min=\"0\" \n            max=\"10\"\n            value={peakCount}\n            onChange={handlePeakCountChange}\n            style={styles.frameCountInput}\n            title=\"Number of peak markers to display\"\n          />\n          <button \n            style={{\n              ...buttonVariants.smallIconButton,\n              backgroundColor: showPeakMarkers ? 'rgba(120, 120, 220, 0.7)' : undefined\n            }}\n            onClick={togglePeakMarkers}\n            title={showPeakMarkers ? \"Hide peak markers\" : \"Show peak markers\"}\n          >\n            {showPeakMarkers ? \"Peaks On\" : \"Peaks Off\"}\n          </button>\n        </div>\n        \n        {/* Add export controls */}\n        <div style={{ display: 'flex', marginLeft: 'auto', alignItems: 'center', gap: '5px' }}>\n          <input\n            type=\"text\"\n            value={filePrefix}\n            onChange={(e) => setFilePrefix(e.target.value)}\n            placeholder=\"File prefix\"\n            style={{\n              ...styles.frameCountInput,\n              width: '100px'\n            }}\n            title=\"Prefix for the exported data filename\"\n          />\n          <label style={{ \n            fontSize: '11px', \n            color: 'rgba(255, 255, 255, 0.7)', \n            display: 'flex', \n            alignItems: 'center',\n            gap: '3px',\n            marginRight: '5px'\n          }}>\n            <input \n              type=\"checkbox\" \n              checked={includeDateInFilename}\n              onChange={(e) => setIncludeDateInFilename(e.target.checked)}\n              style={{ margin: 0 }}\n            />\n            Date\n          </label>\n          <button\n            style={{\n              ...buttonVariants.smallSecondary,\n              backgroundColor: 'rgba(20, 120, 220, 0.7)'\n            }}\n            onClick={exportGraphData}\n            title=\"Export graph data as text file\"\n            disabled={!graphData && !accumulatedData}\n          >\n            💾 Export Data\n          </button>\n\n          {/* Settings save/load buttons */}\n          <button\n            style={{\n              ...buttonVariants.smallSecondary,\n              backgroundColor: 'rgba(60, 160, 60, 0.7)',\n              marginLeft: '10px'\n            }}\n            onClick={exportSettings}\n            title=\"Save current settings to file\"\n          >\n            💾 Save Settings\n          </button>\n          <button\n            style={{\n              ...buttonVariants.smallSecondary,\n              backgroundColor: 'rgba(160, 120, 40, 0.7)'\n            }}\n            onClick={loadSettings}\n            title=\"Load settings from file\"\n          >\n            📂 Load Settings\n          </button>\n          \n          {saveMessage && (\n            <span style={{\n              fontSize: '11px',\n              backgroundColor: 'rgba(0, 0, 0, 0.6)',\n              padding: '2px 6px',\n              borderRadius: '3px',\n              marginLeft: '5px',\n              color: 'rgba(255, 255, 255, 0.9)'\n            }}>\n              {saveMessage}\n            </span>\n          )}\n        </div>\n      </div>\n      \n      {showCalibration && (\n        <div style={styles.calibrationContainer}>\n          <div style={styles.calibrationHeader}>\n            <h4 style={styles.calibrationTitle}>Wavelength Calibration</h4>\n            <div>\n              <label style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)' }}>\n                <input \n                  type=\"checkbox\" \n                  checked={useCalibration}\n                  onChange={toggleUseCalibration}\n                  style={styles.calibrationCheckbox}\n                />\n                Use Calibration\n              </label>\n            </div>\n          </div>\n          \n          <div style={styles.calibrationPoints}>\n            {calibrationPoints.map((point, index) => (\n              <div key={index} style={styles.calibrationPoint}>\n                <div style={styles.calibrationLabel}>Point {index+1}:</div>\n                <div>\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginRight: '4px' }}>Pos:</span>\n                  <input \n                    type=\"number\" \n                    min=\"0\" \n                    max=\"1\" \n                    step=\"0.0001\"\n                    value={point.position}\n                    onChange={(e) => updateCalibrationPoint(index, 'position', e.target.value)}\n                    style={styles.calibrationInput}\n                  />\n                </div>\n                <div>\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginRight: '4px' }}>λ:</span>\n                  <input \n                    type=\"number\" \n                    min=\"200\" \n                    max=\"1200\" \n                    step=\"0.01\"\n                    value={point.wavelength}\n                    onChange={(e) => updateCalibrationPoint(index, 'wavelength', e.target.value)}\n                    style={styles.calibrationInput}\n                  />\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginLeft: '2px' }}>nm</span>\n                </div>\n              </div>\n            ))}\n            \n            <div style={{ marginTop: '8px', display: 'flex', alignItems: 'center' }}>\n              <label style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', display: 'flex', alignItems: 'center' }}>\n                <input \n                  type=\"checkbox\" \n                  checked={flipXAxis}\n                  onChange={toggleFlipXAxis}\n                  style={{ marginRight: '5px' }}\n                />\n                Flip X-Axis\n              </label>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div \n        ref={graphContainerRef}\n        style={styles.graphView}\n        onMouseMove={handleMouseMove}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <canvas\n          ref={canvasRef}\n          style={styles.canvas}\n        />\n        \n        {!graphData && !accumulatedData && (\n          <div style={styles.noData}>\n            Draw a line on the camera feed to see intensity data\n          </div>\n        )}\n        \n        {/* Resize info overlay */}\n        {showResizeInfo && (\n          <div style={styles.resizeInfo}>\n            Height: {graphSize.height}px\n          </div>\n        )}\n        \n        {/* Resize handle */}\n        <div \n          style={styles.resizeHandle}\n          onMouseDown={handleResizeStart}\n          title=\"Resize graph height\"\n        >\n          <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\">\n            <path \n              d=\"M2,6 L10,6 M2,9 L10,9\" \n              stroke=\"white\" \n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n            />\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n});\n\n// Add display name for debugging\nGraphComponent.displayName = 'GraphComponent';\n\nexport default GraphComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}