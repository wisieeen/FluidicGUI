{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\SpectrometerMQTT.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport DraggablePanel from './DraggablePanel';\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\nimport { backgroundVariants } from '../../styles/backgroundStyles';\nimport styles from './styles/USBSpectrometerStyles';\nimport { WS_URL } from '../../config'; // Import WS_URL\n\n// Import subcomponents\nimport MQTTCameraComponent from './SpectrometerMQTT/MQTTCameraComponent';\nimport MQTTGraphComponent from './SpectrometerMQTT/MQTTGraphComponent';\nimport MQTTWaterfallComponent from './SpectrometerMQTT/MQTTWaterfallComponent';\nimport MQTTSettingsComponent from './SpectrometerMQTT/MQTTSettingsComponent';\n\n// Add MQTT-specific styles to complement the existing styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mqttStyles = {\n  cameraSettings: {\n    marginTop: '10px',\n    padding: '8px',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderRadius: '4px'\n  },\n  mqttInputs: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '8px'\n  },\n  inputLabel: {\n    width: '90px',\n    color: '#ccc',\n    fontSize: '14px'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: 'rgba(60, 60, 60, 0.7)',\n    border: '1px solid rgba(100, 100, 100, 0.5)',\n    borderRadius: '4px',\n    padding: '4px 8px',\n    color: 'white',\n    fontSize: '14px'\n  }\n};\n\n// Available waterfall color schemes\nconst waterfallColorSchemeOptions = {\n  grayscale: 'Grayscale',\n  viridis: 'Viridis',\n  plasma: 'Plasma',\n  inferno: 'Inferno',\n  cividis: 'Cividis',\n  turbo: 'Turbo'\n};\nconst SpectrometerMQTT = ({\n  detector,\n  readings = [],\n  onClose,\n  initialPosition = {\n    x: 150,\n    y: 100\n  },\n  detectorId,\n  detectorName,\n  isVisible,\n  position,\n  onMove,\n  onResize,\n  detectorStatus\n}) => {\n  _s();\n  const buttonVariants = useButtonStyles();\n  const [detectorReadings, setDetectorReadings] = useState([]);\n\n  // Panel resizing state\n  const [panelSize, setPanelSize] = useState({\n    width: 1100,\n    height: 750\n  });\n  const [isResizingPanel, setIsResizingPanel] = useState(false);\n  const panelRef = useRef(null);\n\n  // Add state for resize feedback\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n\n  // Subcomponent visibility toggles\n  const [showCamera, setShowCamera] = useState(true);\n  const [showGraph, setShowGraph] = useState(true);\n  const [showWaterfall, setShowWaterfall] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Data state - replace lineData with spectrumData\n  const [spectrumData, setSpectrumData] = useState(null); // Data from spectrometer\n  const [processedData, setProcessedData] = useState(null); // Data from crop processing\n\n  // Track if we're currently using processed crop data\n  const [usingCropData, setUsingCropData] = useState(false);\n\n  // Save/load settings state\n  const [saveMessage, setSaveMessage] = useState('');\n  const [cameraSettings, setCameraSettings] = useState(null);\n  const [calibrationSettings, setCalibrationSettings] = useState(null);\n\n  // Frame accumulation state (shared between Graph and Waterfall)\n  const [frameAccumCount, setFrameAccumCount] = useState(10);\n  const [isAccumulating, setIsAccumulating] = useState(true);\n\n  // Waterfall color scheme state\n  const [waterfallColorScheme, setWaterfallColorScheme] = useState('cividis');\n  const [showWaterfallColorMenu, setShowWaterfallColorMenu] = useState(false);\n\n  // References to component methods\n  const wsRef = useRef(null); // Ref to hold the WebSocket instance\n  const mqttTopicRef = useRef('spectrometer_1'); // Ref to hold the current MQTT topic\n  const cameraRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Handle frame accumulation change\n  const handleFrameAccumCountChange = count => {\n    setFrameAccumCount(count);\n  };\n\n  // Handle accumulation mode toggle\n  const handleAccumulationToggle = isActive => {\n    setIsAccumulating(isActive);\n  };\n\n  // Handle waterfall color scheme change\n  const handleWaterfallColorSchemeChange = scheme => {\n    setWaterfallColorScheme(scheme);\n    setShowWaterfallColorMenu(false);\n  };\n\n  // Process readings when they change\n  useEffect(() => {\n    var _detector$data;\n    if (readings && readings.length > 0 && detector !== null && detector !== void 0 && (_detector$data = detector.data) !== null && _detector$data !== void 0 && _detector$data.properties) {\n      // Process readings here\n      setDetectorReadings(readings);\n    }\n  }, [readings, detector]);\n\n  // Effect for WebSocket connection and message handling\n  useEffect(() => {\n    if (!detectorId) return; // Need detectorId to form topic\n\n    const mainDataTopic = `${detectorId}/response/data`; // Default data topic\n    mqttTopicRef.current = mainDataTopic;\n\n    // Flag to track if the component is still mounted\n    let isMounted = true;\n    console.log('[SpectrometerMQTT] Connecting WebSocket...', WS_URL);\n    const newWs = new WebSocket(WS_URL);\n    wsRef.current = newWs;\n    newWs.onopen = () => {\n      // Check if the component is still mounted and connection wasn't closed\n      if (!isMounted || newWs.readyState !== WebSocket.OPEN) {\n        console.log('[SpectrometerMQTT] WebSocket connected but component unmounted or connection closed');\n        return;\n      }\n      console.log('[SpectrometerMQTT] WebSocket connected');\n      try {\n        // Subscribe to the data topic\n        const subscribeData = {\n          topic: \"common/subscribe\",\n          payload: mainDataTopic\n        };\n\n        // Make sure WebSocket is still valid before sending\n        if (newWs && newWs.readyState === WebSocket.OPEN) {\n          newWs.send(JSON.stringify(subscribeData));\n          console.log(`[SpectrometerMQTT] Subscribed to: ${mainDataTopic}`);\n        } else {\n          console.warn('[SpectrometerMQTT] Cannot subscribe: WebSocket not available or not open');\n        }\n      } catch (err) {\n        console.error('[SpectrometerMQTT] Error in onopen handler:', err);\n      }\n    };\n    newWs.onmessage = event => {\n      if (!isMounted) return;\n      try {\n        const data = JSON.parse(event.data);\n\n        // Check if the message is on the subscribed data topic\n        if (data.topic === mqttTopicRef.current) {\n          let parsedPayload = null;\n          if (data.payload && typeof data.payload === 'string') {\n            try {\n              parsedPayload = JSON.parse(data.payload);\n            } catch (e) {/* Ignore if not JSON */}\n          } else if (data.payload && typeof data.payload === 'object') {\n            parsedPayload = data.payload;\n          }\n\n          // Check if payload contains spectral data\n          if (parsedPayload) {\n            // Check if this is processed graph data (from crop)\n            if (parsedPayload.red && parsedPayload.green && parsedPayload.blue && parsedPayload.intensities) {\n              console.log('[SpectrometerMQTT] Received processed graph data from crop');\n\n              // Transform data to expected format for the graph\n              const graphData = {\n                pixelData: {\n                  timestamp: parsedPayload.timestamp,\n                  positions: parsedPayload.wavelengths,\n                  red: parsedPayload.red,\n                  green: parsedPayload.green,\n                  blue: parsedPayload.blue,\n                  intensity: parsedPayload.intensities,\n                  lineLength: parsedPayload.wavelengths.length\n                }\n              };\n              setProcessedData(graphData);\n              setUsingCropData(true); // Flag that we're using crop data\n            }\n            // Check if this is spectral data (wavelengths + intensities)\n            else if (parsedPayload.wavelengths && parsedPayload.intensities) {\n              console.log('[SpectrometerMQTT] Received spectral data');\n              setSpectrumData(parsedPayload);\n\n              // Only switch to spectral data if we're not actively using crop data\n              if (!usingCropData) {\n                // Transform data to expected format for the graph components\n                const wavelengthRange = [Math.min(...parsedPayload.wavelengths), Math.max(...parsedPayload.wavelengths)];\n\n                // Normalize positions to 0-1 range\n                const positions = parsedPayload.wavelengths.map(w => (w - wavelengthRange[0]) / (wavelengthRange[1] - wavelengthRange[0]));\n\n                // Create uniform intensity arrays for RGB\n                const intensity = parsedPayload.intensities;\n\n                // Create graph data format\n                const graphData = {\n                  pixelData: {\n                    timestamp: parsedPayload.timestamp || Date.now(),\n                    positions: positions,\n                    red: intensity,\n                    green: intensity,\n                    blue: intensity,\n                    intensity: intensity,\n                    lineLength: intensity.length\n                  }\n                };\n                setProcessedData(graphData);\n              }\n            } else if (parsedPayload.error) {\n              console.warn(`[SpectrometerMQTT] Received error from backend: ${parsedPayload.error}`);\n              // Don't clear data on error - just leave the previous data\n            } else {\n              console.warn('[SpectrometerMQTT] Received data message with unexpected payload:', parsedPayload);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('[SpectrometerMQTT] Error processing WebSocket message:', error, 'Raw:', event.data);\n      }\n    };\n    newWs.onerror = error => {\n      if (!isMounted) return;\n      console.error('[SpectrometerMQTT] WebSocket error:', error);\n    };\n    newWs.onclose = event => {\n      if (!isMounted) return;\n      console.log('[SpectrometerMQTT] WebSocket closed:', event.code, event.reason);\n      if (wsRef.current === newWs) {\n        wsRef.current = null;\n      }\n      // Don't clear data on disconnect - just keep the last values\n    };\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n\n      // Store a reference to the current WebSocket\n      const ws = wsRef.current;\n\n      // Important: Set wsRef.current to null BEFORE closing\n      // This prevents race conditions with the onopen callback\n      wsRef.current = null;\n      if (ws) {\n        console.log('[SpectrometerMQTT] Closing WebSocket connection...');\n        try {\n          // Only close if it's still in a state that can be closed\n          if (ws.readyState === WebSocket.CONNECTING || ws.readyState === WebSocket.OPEN) {\n            ws.close();\n          }\n        } catch (err) {\n          console.error('[SpectrometerMQTT] Error closing WebSocket:', err);\n        }\n      }\n    };\n  }, [detectorId]); // Reconnect if detectorId changes\n\n  // Handle crop data toggle\n  const handleCropDataToggle = isEnabled => {\n    setUsingCropData(isEnabled);\n  };\n\n  // Save camera and calibration settings\n  const saveSettings = () => {\n    try {\n      var _cameraRef$current, _graphRef$current, _graphRef$current2, _graphRef$current2$ge;\n      // Get camera settings\n      const camSettings = (_cameraRef$current = cameraRef.current) === null || _cameraRef$current === void 0 ? void 0 : _cameraRef$current.getSettings();\n\n      // Get calibration settings from graph component\n      const calSettings = (_graphRef$current = graphRef.current) === null || _graphRef$current === void 0 ? void 0 : _graphRef$current.getCalibrationSettings();\n      if (!camSettings && !calSettings) {\n        console.warn('No settings to save - components may not be mounted');\n        setSaveMessage('No settings to save');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Create a settings object to save\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Save waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        },\n        // Save frame accumulation settings\n        frameAccumulation: {\n          count: frameAccumCount,\n          isEnabled: isAccumulating\n        },\n        // Save peak markers settings if available from graph component\n        peakMarkers: ((_graphRef$current2 = graphRef.current) === null || _graphRef$current2 === void 0 ? void 0 : (_graphRef$current2$ge = _graphRef$current2.getPeakSettings) === null || _graphRef$current2$ge === void 0 ? void 0 : _graphRef$current2$ge.call(_graphRef$current2)) || {\n          count: 3,\n          showMarkers: true\n        },\n        // Save component visibility states\n        visibilityState: {\n          camera: showCamera,\n          graph: showGraph,\n          waterfall: showWaterfall,\n          settings: showSettings\n        },\n        // Save crop data state\n        usingCropData: usingCropData\n      };\n\n      // Save to localStorage\n      localStorage.setItem(`detector_settings_${detectorId || 'default'}`, JSON.stringify(settings));\n\n      // Set save message for user feedback\n      setSaveMessage('Settings saved successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n      setSaveMessage('Error saving settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      var _cameraRef$current2, _graphRef$current3, _graphRef$current4, _graphRef$current4$ge;\n      // Get camera settings\n      const camSettings = (_cameraRef$current2 = cameraRef.current) === null || _cameraRef$current2 === void 0 ? void 0 : _cameraRef$current2.getSettings();\n\n      // Get calibration settings from graph component\n      const calSettings = (_graphRef$current3 = graphRef.current) === null || _graphRef$current3 === void 0 ? void 0 : _graphRef$current3.getCalibrationSettings();\n      if (!camSettings && !calSettings) {\n        console.warn('No settings to export - components may not be mounted');\n        setSaveMessage('No settings to export');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Create a settings object to export\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Export waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        },\n        // Export frame accumulation settings\n        frameAccumulation: {\n          count: frameAccumCount,\n          isEnabled: isAccumulating\n        },\n        // Export peak markers settings if available from graph component\n        peakMarkers: ((_graphRef$current4 = graphRef.current) === null || _graphRef$current4 === void 0 ? void 0 : (_graphRef$current4$ge = _graphRef$current4.getPeakSettings) === null || _graphRef$current4$ge === void 0 ? void 0 : _graphRef$current4$ge.call(_graphRef$current4)) || {\n          count: 3,\n          showMarkers: true\n        },\n        // Export component visibility states\n        visibilityState: {\n          camera: showCamera,\n          graph: showGraph,\n          waterfall: showWaterfall,\n          settings: showSettings\n        },\n        // Export crop data state\n        usingCropData: usingCropData\n      };\n\n      // Create a file name with timestamp\n      const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\\./g, '_');\n      const fileName = `detector_settings_${detectorId || 'default'}_${timestamp}.json`;\n\n      // Create a Blob with the JSON data\n      const blob = new Blob([JSON.stringify(settings, null, 2)], {\n        type: 'application/json'\n      });\n\n      // Create a URL for the Blob\n      const url = URL.createObjectURL(blob);\n\n      // Create a temporary link element to trigger the download\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Append to the document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Set save message for user feedback\n      setSaveMessage('Settings exported to file');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    try {\n      var _savedSettings$waterf;\n      // Get settings from localStorage\n      const savedSettingsStr = localStorage.getItem(`detector_settings_${detectorId || 'default'}`);\n      if (!savedSettingsStr) {\n        setSaveMessage('No saved settings found');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Parse the settings\n      const savedSettings = JSON.parse(savedSettingsStr);\n\n      // Apply camera settings if available\n      if (savedSettings.camera && cameraRef.current) {\n        try {\n          cameraRef.current.applySettings(savedSettings.camera);\n        } catch (err) {\n          console.error('Error applying camera settings:', err);\n        }\n      }\n\n      // Apply calibration settings if available\n      if (savedSettings.calibration && graphRef.current) {\n        try {\n          graphRef.current.applyCalibrationSettings(savedSettings.calibration);\n        } catch (err) {\n          console.error('Error applying calibration settings:', err);\n        }\n      }\n\n      // Apply waterfall settings if available\n      if ((_savedSettings$waterf = savedSettings.waterfall) !== null && _savedSettings$waterf !== void 0 && _savedSettings$waterf.colorScheme) {\n        setWaterfallColorScheme(savedSettings.waterfall.colorScheme);\n      }\n\n      // Make sure camera is started automatically\n      setTimeout(async () => {\n        if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n          try {\n            await cameraRef.current.startCamera();\n            console.log('Camera started automatically after loading settings');\n          } catch (err) {\n            console.error('Failed to auto-start camera:', err);\n          }\n        }\n      }, 500); // Short delay to allow settings to be applied\n\n      // Set save message for user feedback\n      setSaveMessage('Settings loaded successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      setSaveMessage('Error loading settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Import settings from a JSON file\n  const importSettings = () => {\n    try {\n      // Create a file input element\n      const fileInput = document.createElement('input');\n      fileInput.type = 'file';\n      fileInput.accept = '.json';\n\n      // Handle file selection\n      fileInput.onchange = event => {\n        const file = event.target.files[0];\n        if (!file) return;\n        const reader = new FileReader();\n        reader.onload = e => {\n          try {\n            var _importedSettings$wat;\n            // Parse the file contents\n            const importedSettings = JSON.parse(e.target.result);\n\n            // Apply camera settings if available\n            if (importedSettings.camera && cameraRef.current) {\n              try {\n                cameraRef.current.applySettings(importedSettings.camera);\n              } catch (err) {\n                console.error('Error applying imported camera settings:', err);\n              }\n            }\n\n            // Apply calibration settings if available\n            if (importedSettings.calibration && graphRef.current) {\n              try {\n                graphRef.current.applyCalibrationSettings(importedSettings.calibration);\n              } catch (err) {\n                console.error('Error applying imported calibration settings:', err);\n              }\n            }\n\n            // Apply waterfall settings if available\n            if ((_importedSettings$wat = importedSettings.waterfall) !== null && _importedSettings$wat !== void 0 && _importedSettings$wat.colorScheme) {\n              setWaterfallColorScheme(importedSettings.waterfall.colorScheme);\n            }\n\n            // Make sure camera is started automatically\n            setTimeout(async () => {\n              if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n                try {\n                  await cameraRef.current.startCamera();\n                  console.log('Camera started automatically after loading settings');\n                } catch (err) {\n                  console.error('Failed to auto-start camera:', err);\n                }\n              }\n            }, 500); // Short delay to allow settings to be applied\n\n            // Set save message for user feedback\n            setSaveMessage('Settings imported successfully');\n            setTimeout(() => setSaveMessage(''), 3000);\n          } catch (parseError) {\n            console.error('Failed to parse imported settings file:', parseError);\n            setSaveMessage('Error: Invalid settings file');\n            setTimeout(() => setSaveMessage(''), 3000);\n          }\n        };\n        reader.onerror = () => {\n          setSaveMessage('Error reading file');\n          setTimeout(() => setSaveMessage(''), 3000);\n        };\n\n        // Read the file as text\n        reader.readAsText(file);\n      };\n\n      // Trigger file selection dialog\n      fileInput.click();\n    } catch (error) {\n      console.error('Failed to import settings:', error);\n      setSaveMessage('Error importing settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Handler for panel resizing - completely rewritten for reliability\n  const handlePanelResizeStart = e => {\n    var _panelRef$current, _panelRef$current2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_panelRef$current = panelRef.current) === null || _panelRef$current === void 0 ? void 0 : _panelRef$current.offsetWidth) || panelSize.width;\n    const startHeight = ((_panelRef$current2 = panelRef.current) === null || _panelRef$current2 === void 0 ? void 0 : _panelRef$current2.offsetHeight) || panelSize.height;\n\n    // Show resize feedback\n    setIsResizingPanel(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaX = moveEvent.clientX - startX;\n      const deltaY = moveEvent.clientY - startY;\n      const newWidth = Math.max(400, startWidth + deltaX);\n      const newHeight = Math.max(300, startHeight + deltaY);\n\n      // Update panel size\n      setPanelSize({\n        width: newWidth,\n        height: newHeight\n      });\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizingPanel(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle visibility of subcomponents\n  const toggleCamera = () => setShowCamera(!showCamera);\n  const toggleGraph = () => setShowGraph(!showGraph);\n  const toggleWaterfall = () => setShowWaterfall(!showWaterfall);\n  const toggleSettings = () => setShowSettings(!showSettings);\n\n  // Styles for toggle buttons\n  const getToggleButtonStyle = isActive => ({\n    ...buttonVariants.smallSecondary,\n    opacity: isActive ? 1 : 0.5,\n    marginRight: '4px',\n    marginBottom: '4px'\n  });\n\n  // Handle subcomponent resize events\n  const handleCameraResize = newSize => {\n    console.log('Camera resized:', newSize);\n    // Additional logic if needed\n  };\n  const handleGraphResize = newSize => {\n    console.log('Graph resized:', newSize);\n    // Additional logic if needed\n  };\n  const handleWaterfallResize = newSize => {\n    console.log('Waterfall resized:', newSize);\n    // Additional logic if needed\n  };\n\n  // Handle settings changes\n  const handleSettingsChange = settings => {\n    console.log('Settings changed:', settings);\n    // Update relevant state/behavior based on settings\n  };\n\n  // Render panel content\n  if (!detector) return null;\n  return /*#__PURE__*/_jsxDEV(DraggablePanel, {\n    title: `MQTT Spectrometer: ${detector.label || detector.id}`,\n    initialPosition: initialPosition,\n    width: panelSize.width,\n    height: panelSize.height,\n    onClose: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: panelRef,\n      style: {\n        ...styles.container,\n        width: `${panelSize.width}px`,\n        height: `${panelSize.height}px`,\n        minHeight: '300px',\n        position: 'relative',\n        border: isResizingPanel ? '1px dashed #4CAF50' : 'none',\n        transition: isResizingPanel ? 'none' : 'border 0.3s ease'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.controlBar,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.controlLabel,\n            children: \"Components:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleCamera,\n            style: getToggleButtonStyle(showCamera),\n            children: showCamera ? '📹 Hide Camera' : '📹 Show Camera'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleGraph,\n            style: getToggleButtonStyle(showGraph),\n            children: showGraph ? '📊 Hide Graph' : '📊 Show Graph'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleWaterfall,\n            style: getToggleButtonStyle(showWaterfall),\n            children: showWaterfall ? '🌊 Hide Waterfall' : '🌊 Show Waterfall'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleSettings,\n            style: getToggleButtonStyle(showSettings),\n            children: showSettings ? '⚙️ Hide Settings' : '⚙️ Show Settings'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: '15px',\n              borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n              paddingLeft: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: saveSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(50, 150, 50, 0.7)'\n              },\n              title: \"Save camera and calibration settings to browser storage\",\n              children: \"\\uD83D\\uDCBE Save Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: exportSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(120, 120, 30, 0.7)'\n              },\n              title: \"Export camera and calibration settings to JSON file\",\n              children: \"\\uD83D\\uDCE4 Export Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: loadSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(50, 100, 150, 0.7)'\n              },\n              title: \"Load saved camera and calibration settings from browser storage\",\n              children: \"\\uD83D\\uDCE5 Load Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: importSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(120, 70, 150, 0.7)'\n              },\n              title: \"Import camera and calibration settings from JSON file\",\n              children: \"\\uD83D\\uDCC1 Import File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 15\n            }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '12px',\n                backgroundColor: 'rgba(0, 0, 0, 0.6)',\n                padding: '2px 6px',\n                borderRadius: '3px',\n                marginLeft: '8px'\n              },\n              children: saveMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.columnsContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: showCamera ? 'block' : 'none',\n            flex: '1 1 50%',\n            minWidth: '320px',\n            maxWidth: '650px',\n            marginRight: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(MQTTCameraComponent, {\n            ref: cameraRef,\n            onResize: handleCameraResize,\n            detectorId: detectorId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 800,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...styles.rightColumn,\n            flex: '1 1 50%'\n          },\n          children: [showGraph && /*#__PURE__*/_jsxDEV(MQTTGraphComponent, {\n            ref: graphRef,\n            onResize: handleGraphResize,\n            lineData: processedData // Use processedData instead of spectrumData\n            // Pass the frame accumulation props up to parent to manage\n            ,\n            onFrameAccumCountChange: handleFrameAccumCountChange,\n            onAccumulationToggle: handleAccumulationToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 15\n          }, this), showWaterfall && /*#__PURE__*/_jsxDEV(MQTTWaterfallComponent, {\n            onResize: handleWaterfallResize,\n            lineData: processedData // Use processedData instead of spectrumData\n            ,\n            frameAccumCount: frameAccumCount,\n            isAccumulating: isAccumulating,\n            colorScale: waterfallColorScheme,\n            onColorScaleChange: handleWaterfallColorSchemeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 15\n          }, this), showSettings && /*#__PURE__*/_jsxDEV(MQTTSettingsComponent, {\n            onSettingChange: (setting, value) => console.log('Setting changed:', setting, value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 9\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          right: '30px',\n          bottom: '30px',\n          padding: '4px 8px',\n          background: 'rgba(0, 0, 0, 0.6)',\n          color: 'white',\n          borderRadius: '3px',\n          fontSize: '12px',\n          zIndex: 1000\n        },\n        children: [Math.round(panelSize.width), \" x \", Math.round(panelSize.height)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handlePanelResizeStart,\n        title: \"Drag to resize panel\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 20 20\",\n          style: {\n            display: 'block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            width: \"20\",\n            height: \"20\",\n            fill: \"transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M14,6 L6,14 M17,9 L9,17 M17,13 L13,17\",\n            stroke: \"white\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 875,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 670,\n    columnNumber: 5\n  }, this);\n};\n_s(SpectrometerMQTT, \"LFr8v+a20kqYcTDS/7TXa/I0RnY=\", false, function () {\n  return [useButtonStyles];\n});\n_c = SpectrometerMQTT;\nexport default SpectrometerMQTT;\nvar _c;\n$RefreshReg$(_c, \"SpectrometerMQTT\");","map":{"version":3,"names":["React","useState","useRef","useEffect","DraggablePanel","useButtonStyles","backgroundVariants","styles","WS_URL","MQTTCameraComponent","MQTTGraphComponent","MQTTWaterfallComponent","MQTTSettingsComponent","jsxDEV","_jsxDEV","mqttStyles","cameraSettings","marginTop","padding","backgroundColor","borderRadius","mqttInputs","display","alignItems","marginBottom","inputLabel","width","color","fontSize","input","flex","border","waterfallColorSchemeOptions","grayscale","viridis","plasma","inferno","cividis","turbo","SpectrometerMQTT","detector","readings","onClose","initialPosition","x","y","detectorId","detectorName","isVisible","position","onMove","onResize","detectorStatus","_s","buttonVariants","detectorReadings","setDetectorReadings","panelSize","setPanelSize","height","isResizingPanel","setIsResizingPanel","panelRef","showResizeInfo","setShowResizeInfo","showCamera","setShowCamera","showGraph","setShowGraph","showWaterfall","setShowWaterfall","showSettings","setShowSettings","spectrumData","setSpectrumData","processedData","setProcessedData","usingCropData","setUsingCropData","saveMessage","setSaveMessage","setCameraSettings","calibrationSettings","setCalibrationSettings","frameAccumCount","setFrameAccumCount","isAccumulating","setIsAccumulating","waterfallColorScheme","setWaterfallColorScheme","showWaterfallColorMenu","setShowWaterfallColorMenu","wsRef","mqttTopicRef","cameraRef","graphRef","handleFrameAccumCountChange","count","handleAccumulationToggle","isActive","handleWaterfallColorSchemeChange","scheme","_detector$data","length","data","properties","mainDataTopic","current","isMounted","console","log","newWs","WebSocket","onopen","readyState","OPEN","subscribeData","topic","payload","send","JSON","stringify","warn","err","error","onmessage","event","parse","parsedPayload","e","red","green","blue","intensities","graphData","pixelData","timestamp","positions","wavelengths","intensity","lineLength","wavelengthRange","Math","min","max","map","w","Date","now","onerror","onclose","code","reason","ws","CONNECTING","close","handleCropDataToggle","isEnabled","saveSettings","_cameraRef$current","_graphRef$current","_graphRef$current2","_graphRef$current2$ge","camSettings","getSettings","calSettings","getCalibrationSettings","setTimeout","settings","camera","calibration","toISOString","waterfall","colorScheme","frameAccumulation","peakMarkers","getPeakSettings","call","showMarkers","visibilityState","graph","localStorage","setItem","exportSettings","_cameraRef$current2","_graphRef$current3","_graphRef$current4","_graphRef$current4$ge","replace","fileName","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","loadSettings","_savedSettings$waterf","savedSettingsStr","getItem","savedSettings","applySettings","applyCalibrationSettings","startCamera","importSettings","fileInput","accept","onchange","file","target","files","reader","FileReader","onload","_importedSettings$wat","importedSettings","result","parseError","readAsText","handlePanelResizeStart","_panelRef$current","_panelRef$current2","preventDefault","stopPropagation","startX","clientX","startY","clientY","startWidth","offsetWidth","startHeight","offsetHeight","handleMouseMove","moveEvent","deltaX","deltaY","newWidth","newHeight","handleMouseUp","removeEventListener","addEventListener","toggleCamera","toggleGraph","toggleWaterfall","toggleSettings","getToggleButtonStyle","smallSecondary","opacity","marginRight","handleCameraResize","newSize","handleGraphResize","handleWaterfallResize","handleSettingsChange","title","label","id","children","ref","style","container","minHeight","transition","controlBar","controlLabel","_jsxFileName","lineNumber","columnNumber","onClick","marginLeft","borderLeft","paddingLeft","smallPrimary","columnsContainer","minWidth","maxWidth","rightColumn","lineData","onFrameAccumCountChange","onAccumulationToggle","colorScale","onColorScaleChange","onSettingChange","setting","value","right","bottom","background","zIndex","round","resizeHandle","onMouseDown","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","_c","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/SpectrometerMQTT.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport DraggablePanel from './DraggablePanel';\r\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\r\nimport { backgroundVariants } from '../../styles/backgroundStyles';\r\nimport styles from './styles/USBSpectrometerStyles';\r\nimport { WS_URL } from '../../config'; // Import WS_URL\r\n\r\n// Import subcomponents\r\nimport MQTTCameraComponent from './SpectrometerMQTT/MQTTCameraComponent';\r\nimport MQTTGraphComponent from './SpectrometerMQTT/MQTTGraphComponent';\r\nimport MQTTWaterfallComponent from './SpectrometerMQTT/MQTTWaterfallComponent';\r\nimport MQTTSettingsComponent from './SpectrometerMQTT/MQTTSettingsComponent';\r\n\r\n// Add MQTT-specific styles to complement the existing styles\r\nconst mqttStyles = {\r\n  cameraSettings: {\r\n    marginTop: '10px',\r\n    padding: '8px',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n    borderRadius: '4px'\r\n  },\r\n  mqttInputs: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: '8px'\r\n  },\r\n  inputLabel: {\r\n    width: '90px',\r\n    color: '#ccc',\r\n    fontSize: '14px'\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    backgroundColor: 'rgba(60, 60, 60, 0.7)',\r\n    border: '1px solid rgba(100, 100, 100, 0.5)',\r\n    borderRadius: '4px',\r\n    padding: '4px 8px',\r\n    color: 'white',\r\n    fontSize: '14px'\r\n  }\r\n};\r\n\r\n// Available waterfall color schemes\r\nconst waterfallColorSchemeOptions = {\r\n  grayscale: 'Grayscale',\r\n  viridis: 'Viridis',\r\n  plasma: 'Plasma',\r\n  inferno: 'Inferno',\r\n  cividis: 'Cividis',\r\n  turbo: 'Turbo'\r\n};\r\n\r\nconst SpectrometerMQTT = ({ detector, readings = [], onClose, initialPosition = { x: 150, y: 100 }, detectorId, detectorName, isVisible, position, onMove, onResize, detectorStatus }) => {\r\n  const buttonVariants = useButtonStyles();\r\n  const [detectorReadings, setDetectorReadings] = useState([]);\r\n  \r\n  // Panel resizing state\r\n  const [panelSize, setPanelSize] = useState({ width: 1100, height: 750 });\r\n  const [isResizingPanel, setIsResizingPanel] = useState(false);\r\n  const panelRef = useRef(null);\r\n  \r\n  // Add state for resize feedback\r\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\r\n  \r\n  // Subcomponent visibility toggles\r\n  const [showCamera, setShowCamera] = useState(true);\r\n  const [showGraph, setShowGraph] = useState(true);\r\n  const [showWaterfall, setShowWaterfall] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  \r\n  // Data state - replace lineData with spectrumData\r\n  const [spectrumData, setSpectrumData] = useState(null); // Data from spectrometer\r\n  const [processedData, setProcessedData] = useState(null); // Data from crop processing\r\n\r\n  // Track if we're currently using processed crop data\r\n  const [usingCropData, setUsingCropData] = useState(false);\r\n  \r\n  // Save/load settings state\r\n  const [saveMessage, setSaveMessage] = useState('');\r\n  const [cameraSettings, setCameraSettings] = useState(null);\r\n  const [calibrationSettings, setCalibrationSettings] = useState(null);\r\n  \r\n  // Frame accumulation state (shared between Graph and Waterfall)\r\n  const [frameAccumCount, setFrameAccumCount] = useState(10);\r\n  const [isAccumulating, setIsAccumulating] = useState(true);\r\n  \r\n  // Waterfall color scheme state\r\n  const [waterfallColorScheme, setWaterfallColorScheme] = useState('cividis');\r\n  const [showWaterfallColorMenu, setShowWaterfallColorMenu] = useState(false);\r\n  \r\n  // References to component methods\r\n  const wsRef = useRef(null); // Ref to hold the WebSocket instance\r\n  const mqttTopicRef = useRef('spectrometer_1'); // Ref to hold the current MQTT topic\r\n  const cameraRef = useRef(null);\r\n  const graphRef = useRef(null);\r\n  \r\n  // Handle frame accumulation change\r\n  const handleFrameAccumCountChange = (count) => {\r\n    setFrameAccumCount(count);\r\n  };\r\n  \r\n  // Handle accumulation mode toggle\r\n  const handleAccumulationToggle = (isActive) => {\r\n    setIsAccumulating(isActive);\r\n  };\r\n  \r\n  // Handle waterfall color scheme change\r\n  const handleWaterfallColorSchemeChange = (scheme) => {\r\n    setWaterfallColorScheme(scheme);\r\n    setShowWaterfallColorMenu(false);\r\n  };\r\n  \r\n  // Process readings when they change\r\n  useEffect(() => {\r\n    if (readings && readings.length > 0 && detector?.data?.properties) {\r\n      // Process readings here\r\n      setDetectorReadings(readings);\r\n    }\r\n  }, [readings, detector]);\r\n  \r\n  // Effect for WebSocket connection and message handling\r\n  useEffect(() => {\r\n    if (!detectorId) return; // Need detectorId to form topic\r\n\r\n    const mainDataTopic = `${detectorId}/response/data`; // Default data topic\r\n    mqttTopicRef.current = mainDataTopic;\r\n\r\n    // Flag to track if the component is still mounted\r\n    let isMounted = true;\r\n\r\n    console.log('[SpectrometerMQTT] Connecting WebSocket...', WS_URL);\r\n    const newWs = new WebSocket(WS_URL);\r\n    wsRef.current = newWs;\r\n\r\n    newWs.onopen = () => {\r\n      // Check if the component is still mounted and connection wasn't closed\r\n      if (!isMounted || newWs.readyState !== WebSocket.OPEN) {\r\n        console.log('[SpectrometerMQTT] WebSocket connected but component unmounted or connection closed');\r\n        return;\r\n      }\r\n\r\n      console.log('[SpectrometerMQTT] WebSocket connected');\r\n\r\n      try {\r\n        // Subscribe to the data topic\r\n        const subscribeData = {\r\n          topic: \"common/subscribe\",\r\n          payload: mainDataTopic\r\n        };\r\n        \r\n        // Make sure WebSocket is still valid before sending\r\n        if (newWs && newWs.readyState === WebSocket.OPEN) {\r\n          newWs.send(JSON.stringify(subscribeData));\r\n          console.log(`[SpectrometerMQTT] Subscribed to: ${mainDataTopic}`);\r\n        } else {\r\n          console.warn('[SpectrometerMQTT] Cannot subscribe: WebSocket not available or not open');\r\n        }\r\n      } catch (err) {\r\n        console.error('[SpectrometerMQTT] Error in onopen handler:', err);\r\n      }\r\n    };\r\n\r\n    newWs.onmessage = (event) => {\r\n      if (!isMounted) return;\r\n      \r\n      try {\r\n        const data = JSON.parse(event.data);\r\n\r\n        // Check if the message is on the subscribed data topic\r\n        if (data.topic === mqttTopicRef.current) {\r\n          let parsedPayload = null;\r\n          if (data.payload && typeof data.payload === 'string') {\r\n            try {\r\n              parsedPayload = JSON.parse(data.payload);\r\n            } catch (e) { /* Ignore if not JSON */ }\r\n          } else if (data.payload && typeof data.payload === 'object') {\r\n            parsedPayload = data.payload;\r\n          }\r\n\r\n          // Check if payload contains spectral data\r\n          if (parsedPayload) {\r\n            // Check if this is processed graph data (from crop)\r\n            if (parsedPayload.red && parsedPayload.green && parsedPayload.blue && parsedPayload.intensities) {\r\n              console.log('[SpectrometerMQTT] Received processed graph data from crop');\r\n              \r\n              // Transform data to expected format for the graph\r\n              const graphData = {\r\n                pixelData: {\r\n                  timestamp: parsedPayload.timestamp,\r\n                  positions: parsedPayload.wavelengths,\r\n                  red: parsedPayload.red,\r\n                  green: parsedPayload.green,\r\n                  blue: parsedPayload.blue,\r\n                  intensity: parsedPayload.intensities,\r\n                  lineLength: parsedPayload.wavelengths.length\r\n                }\r\n              };\r\n              \r\n              setProcessedData(graphData);\r\n              setUsingCropData(true);  // Flag that we're using crop data\r\n            }\r\n            // Check if this is spectral data (wavelengths + intensities)\r\n            else if (parsedPayload.wavelengths && parsedPayload.intensities) {\r\n              console.log('[SpectrometerMQTT] Received spectral data');\r\n              setSpectrumData(parsedPayload);\r\n              \r\n              // Only switch to spectral data if we're not actively using crop data\r\n              if (!usingCropData) {\r\n                // Transform data to expected format for the graph components\r\n                const wavelengthRange = [\r\n                  Math.min(...parsedPayload.wavelengths), \r\n                  Math.max(...parsedPayload.wavelengths)\r\n                ];\r\n                \r\n                // Normalize positions to 0-1 range\r\n                const positions = parsedPayload.wavelengths.map(w => \r\n                  (w - wavelengthRange[0]) / (wavelengthRange[1] - wavelengthRange[0])\r\n                );\r\n                \r\n                // Create uniform intensity arrays for RGB\r\n                const intensity = parsedPayload.intensities;\r\n                \r\n                // Create graph data format\r\n                const graphData = {\r\n                  pixelData: {\r\n                    timestamp: parsedPayload.timestamp || Date.now(),\r\n                    positions: positions,\r\n                    red: intensity,\r\n                    green: intensity,\r\n                    blue: intensity,\r\n                    intensity: intensity,\r\n                    lineLength: intensity.length\r\n                  }\r\n                };\r\n                \r\n                setProcessedData(graphData);\r\n              }\r\n            } else if (parsedPayload.error) {\r\n              console.warn(`[SpectrometerMQTT] Received error from backend: ${parsedPayload.error}`);\r\n              // Don't clear data on error - just leave the previous data\r\n            } else {\r\n              console.warn('[SpectrometerMQTT] Received data message with unexpected payload:', parsedPayload);\r\n            }\r\n          }\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('[SpectrometerMQTT] Error processing WebSocket message:', error, 'Raw:', event.data);\r\n      }\r\n    };\r\n\r\n    newWs.onerror = (error) => {\r\n      if (!isMounted) return;\r\n      console.error('[SpectrometerMQTT] WebSocket error:', error);\r\n    };\r\n\r\n    newWs.onclose = (event) => {\r\n      if (!isMounted) return;\r\n      console.log('[SpectrometerMQTT] WebSocket closed:', event.code, event.reason);\r\n      if (wsRef.current === newWs) {\r\n        wsRef.current = null;\r\n      }\r\n      // Don't clear data on disconnect - just keep the last values\r\n    };\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false;\r\n      \r\n      // Store a reference to the current WebSocket\r\n      const ws = wsRef.current;\r\n      \r\n      // Important: Set wsRef.current to null BEFORE closing\r\n      // This prevents race conditions with the onopen callback\r\n      wsRef.current = null;\r\n      \r\n      if (ws) {\r\n        console.log('[SpectrometerMQTT] Closing WebSocket connection...');\r\n        try {\r\n          // Only close if it's still in a state that can be closed\r\n          if (ws.readyState === WebSocket.CONNECTING || \r\n              ws.readyState === WebSocket.OPEN) {\r\n            ws.close();\r\n          }\r\n        } catch (err) {\r\n          console.error('[SpectrometerMQTT] Error closing WebSocket:', err);\r\n        }\r\n      }\r\n    };\r\n\r\n  }, [detectorId]); // Reconnect if detectorId changes\r\n\r\n  // Handle crop data toggle\r\n  const handleCropDataToggle = (isEnabled) => {\r\n    setUsingCropData(isEnabled);\r\n  };\r\n  \r\n  // Save camera and calibration settings\r\n  const saveSettings = () => {\r\n    try {\r\n      // Get camera settings\r\n      const camSettings = cameraRef.current?.getSettings();\r\n      \r\n      // Get calibration settings from graph component\r\n      const calSettings = graphRef.current?.getCalibrationSettings();\r\n      \r\n      if (!camSettings && !calSettings) {\r\n        console.warn('No settings to save - components may not be mounted');\r\n        setSaveMessage('No settings to save');\r\n        setTimeout(() => setSaveMessage(''), 3000);\r\n        return;\r\n      }\r\n      \r\n      // Create a settings object to save\r\n      const settings = {\r\n        camera: camSettings || null,\r\n        calibration: calSettings || null,\r\n        timestamp: new Date().toISOString(),\r\n        detectorId: detectorId || 'default',\r\n        // Save waterfall settings\r\n        waterfall: {\r\n          colorScheme: waterfallColorScheme\r\n        },\r\n        // Save frame accumulation settings\r\n        frameAccumulation: {\r\n          count: frameAccumCount,\r\n          isEnabled: isAccumulating\r\n        },\r\n        // Save peak markers settings if available from graph component\r\n        peakMarkers: graphRef.current?.getPeakSettings?.() || {\r\n          count: 3,\r\n          showMarkers: true\r\n        },\r\n        // Save component visibility states\r\n        visibilityState: {\r\n          camera: showCamera,\r\n          graph: showGraph,\r\n          waterfall: showWaterfall,\r\n          settings: showSettings\r\n        },\r\n        // Save crop data state\r\n        usingCropData: usingCropData\r\n      };\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem(`detector_settings_${detectorId || 'default'}`, JSON.stringify(settings));\r\n      \r\n      // Set save message for user feedback\r\n      setSaveMessage('Settings saved successfully');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to save settings:', error);\r\n      setSaveMessage('Error saving settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Export settings to JSON file\r\n  const exportSettings = () => {\r\n    try {\r\n      // Get camera settings\r\n      const camSettings = cameraRef.current?.getSettings();\r\n      \r\n      // Get calibration settings from graph component\r\n      const calSettings = graphRef.current?.getCalibrationSettings();\r\n      \r\n      if (!camSettings && !calSettings) {\r\n        console.warn('No settings to export - components may not be mounted');\r\n        setSaveMessage('No settings to export');\r\n        setTimeout(() => setSaveMessage(''), 3000);\r\n        return;\r\n      }\r\n      \r\n      // Create a settings object to export\r\n      const settings = {\r\n        camera: camSettings || null,\r\n        calibration: calSettings || null,\r\n        timestamp: new Date().toISOString(),\r\n        detectorId: detectorId || 'default',\r\n        // Export waterfall settings\r\n        waterfall: {\r\n          colorScheme: waterfallColorScheme\r\n        },\r\n        // Export frame accumulation settings\r\n        frameAccumulation: {\r\n          count: frameAccumCount,\r\n          isEnabled: isAccumulating\r\n        },\r\n        // Export peak markers settings if available from graph component\r\n        peakMarkers: graphRef.current?.getPeakSettings?.() || {\r\n          count: 3,\r\n          showMarkers: true\r\n        },\r\n        // Export component visibility states\r\n        visibilityState: {\r\n          camera: showCamera,\r\n          graph: showGraph,\r\n          waterfall: showWaterfall,\r\n          settings: showSettings\r\n        },\r\n        // Export crop data state\r\n        usingCropData: usingCropData\r\n      };\r\n      \r\n      // Create a file name with timestamp\r\n      const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\\./g, '_');\r\n      const fileName = `detector_settings_${detectorId || 'default'}_${timestamp}.json`;\r\n      \r\n      // Create a Blob with the JSON data\r\n      const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\r\n      \r\n      // Create a URL for the Blob\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      // Create a temporary link element to trigger the download\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = fileName;\r\n      \r\n      // Append to the document, click, and remove\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // Clean up\r\n      setTimeout(() => {\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n      }, 100);\r\n      \r\n      // Set save message for user feedback\r\n      setSaveMessage('Settings exported to file');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to export settings:', error);\r\n      setSaveMessage('Error exporting settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Load saved camera and calibration settings\r\n  const loadSettings = () => {\r\n    try {\r\n      // Get settings from localStorage\r\n      const savedSettingsStr = localStorage.getItem(`detector_settings_${detectorId || 'default'}`);\r\n      if (!savedSettingsStr) {\r\n        setSaveMessage('No saved settings found');\r\n        setTimeout(() => setSaveMessage(''), 3000);\r\n        return;\r\n      }\r\n      \r\n      // Parse the settings\r\n      const savedSettings = JSON.parse(savedSettingsStr);\r\n      \r\n      // Apply camera settings if available\r\n      if (savedSettings.camera && cameraRef.current) {\r\n        try {\r\n          cameraRef.current.applySettings(savedSettings.camera);\r\n        } catch (err) {\r\n          console.error('Error applying camera settings:', err);\r\n        }\r\n      }\r\n      \r\n      // Apply calibration settings if available\r\n      if (savedSettings.calibration && graphRef.current) {\r\n        try {\r\n          graphRef.current.applyCalibrationSettings(savedSettings.calibration);\r\n        } catch (err) {\r\n          console.error('Error applying calibration settings:', err);\r\n        }\r\n      }\r\n      \r\n      // Apply waterfall settings if available\r\n      if (savedSettings.waterfall?.colorScheme) {\r\n        setWaterfallColorScheme(savedSettings.waterfall.colorScheme);\r\n      }\r\n      \r\n      // Make sure camera is started automatically\r\n      setTimeout(async () => {\r\n        if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\r\n          try {\r\n            await cameraRef.current.startCamera();\r\n            console.log('Camera started automatically after loading settings');\r\n          } catch (err) {\r\n            console.error('Failed to auto-start camera:', err);\r\n          }\r\n        }\r\n      }, 500); // Short delay to allow settings to be applied\r\n      \r\n      // Set save message for user feedback\r\n      setSaveMessage('Settings loaded successfully');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to load settings:', error);\r\n      setSaveMessage('Error loading settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Import settings from a JSON file\r\n  const importSettings = () => {\r\n    try {\r\n      // Create a file input element\r\n      const fileInput = document.createElement('input');\r\n      fileInput.type = 'file';\r\n      fileInput.accept = '.json';\r\n      \r\n      // Handle file selection\r\n      fileInput.onchange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (!file) return;\r\n        \r\n        const reader = new FileReader();\r\n        \r\n        reader.onload = (e) => {\r\n          try {\r\n            // Parse the file contents\r\n            const importedSettings = JSON.parse(e.target.result);\r\n            \r\n            // Apply camera settings if available\r\n            if (importedSettings.camera && cameraRef.current) {\r\n              try {\r\n                cameraRef.current.applySettings(importedSettings.camera);\r\n              } catch (err) {\r\n                console.error('Error applying imported camera settings:', err);\r\n              }\r\n            }\r\n            \r\n            // Apply calibration settings if available\r\n            if (importedSettings.calibration && graphRef.current) {\r\n              try {\r\n                graphRef.current.applyCalibrationSettings(importedSettings.calibration);\r\n              } catch (err) {\r\n                console.error('Error applying imported calibration settings:', err);\r\n              }\r\n            }\r\n            \r\n            // Apply waterfall settings if available\r\n            if (importedSettings.waterfall?.colorScheme) {\r\n              setWaterfallColorScheme(importedSettings.waterfall.colorScheme);\r\n            }\r\n            \r\n            // Make sure camera is started automatically\r\n            setTimeout(async () => {\r\n              if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\r\n                try {\r\n                  await cameraRef.current.startCamera();\r\n                  console.log('Camera started automatically after loading settings');\r\n                } catch (err) {\r\n                  console.error('Failed to auto-start camera:', err);\r\n                }\r\n              }\r\n            }, 500); // Short delay to allow settings to be applied\r\n            \r\n            // Set save message for user feedback\r\n            setSaveMessage('Settings imported successfully');\r\n            setTimeout(() => setSaveMessage(''), 3000);\r\n          } catch (parseError) {\r\n            console.error('Failed to parse imported settings file:', parseError);\r\n            setSaveMessage('Error: Invalid settings file');\r\n            setTimeout(() => setSaveMessage(''), 3000);\r\n          }\r\n        };\r\n        \r\n        reader.onerror = () => {\r\n          setSaveMessage('Error reading file');\r\n          setTimeout(() => setSaveMessage(''), 3000);\r\n        };\r\n        \r\n        // Read the file as text\r\n        reader.readAsText(file);\r\n      };\r\n      \r\n      // Trigger file selection dialog\r\n      fileInput.click();\r\n    } catch (error) {\r\n      console.error('Failed to import settings:', error);\r\n      setSaveMessage('Error importing settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Handler for panel resizing - completely rewritten for reliability\r\n  const handlePanelResizeStart = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    // Get initial coordinates and size\r\n    const startX = e.clientX;\r\n    const startY = e.clientY;\r\n    const startWidth = panelRef.current?.offsetWidth || panelSize.width;\r\n    const startHeight = panelRef.current?.offsetHeight || panelSize.height;\r\n    \r\n    // Show resize feedback\r\n    setIsResizingPanel(true);\r\n    setShowResizeInfo(true);\r\n    \r\n    // Define move handler\r\n    function handleMouseMove(moveEvent) {\r\n      const deltaX = moveEvent.clientX - startX;\r\n      const deltaY = moveEvent.clientY - startY;\r\n      \r\n      const newWidth = Math.max(400, startWidth + deltaX);\r\n      const newHeight = Math.max(300, startHeight + deltaY);\r\n      \r\n      // Update panel size\r\n      setPanelSize({\r\n        width: newWidth,\r\n        height: newHeight\r\n      });\r\n      \r\n      // Prevent default to avoid text selection during resize\r\n      moveEvent.preventDefault();\r\n    }\r\n    \r\n    // Define up handler\r\n    function handleMouseUp() {\r\n      // Clean up\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseup', handleMouseUp);\r\n      \r\n      setIsResizingPanel(false);\r\n      setTimeout(() => setShowResizeInfo(false), 800);\r\n    }\r\n    \r\n    // Attach handlers to document to capture events outside component\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n  };\r\n  \r\n  // Toggle visibility of subcomponents\r\n  const toggleCamera = () => setShowCamera(!showCamera);\r\n  const toggleGraph = () => setShowGraph(!showGraph);\r\n  const toggleWaterfall = () => setShowWaterfall(!showWaterfall);\r\n  const toggleSettings = () => setShowSettings(!showSettings);\r\n  \r\n  // Styles for toggle buttons\r\n  const getToggleButtonStyle = (isActive) => ({\r\n    ...buttonVariants.smallSecondary,\r\n    opacity: isActive ? 1 : 0.5,\r\n    marginRight: '4px',\r\n    marginBottom: '4px'\r\n  });\r\n  \r\n  // Handle subcomponent resize events\r\n  const handleCameraResize = (newSize) => {\r\n    console.log('Camera resized:', newSize);\r\n    // Additional logic if needed\r\n  };\r\n  \r\n  const handleGraphResize = (newSize) => {\r\n    console.log('Graph resized:', newSize);\r\n    // Additional logic if needed\r\n  };\r\n  \r\n  const handleWaterfallResize = (newSize) => {\r\n    console.log('Waterfall resized:', newSize);\r\n    // Additional logic if needed\r\n  };\r\n  \r\n  // Handle settings changes\r\n  const handleSettingsChange = (settings) => {\r\n    console.log('Settings changed:', settings);\r\n    // Update relevant state/behavior based on settings\r\n  };\r\n  \r\n  // Render panel content\r\n  if (!detector) return null;\r\n  \r\n  return (\r\n    <DraggablePanel \r\n      title={`MQTT Spectrometer: ${detector.label || detector.id}`}\r\n      initialPosition={initialPosition}\r\n      width={panelSize.width}\r\n      height={panelSize.height}\r\n      onClose={onClose}\r\n    >\r\n      <div \r\n        ref={panelRef}\r\n        style={{\r\n          ...styles.container,\r\n          width: `${panelSize.width}px`,\r\n          height: `${panelSize.height}px`,\r\n          minHeight: '300px',\r\n          position: 'relative',\r\n          border: isResizingPanel ? '1px dashed #4CAF50' : 'none',\r\n          transition: isResizingPanel ? 'none' : 'border 0.3s ease',\r\n        }}\r\n      >\r\n        {/* Top control bar */}\r\n        <div style={styles.controlBar}>\r\n          <div>\r\n            <span style={styles.controlLabel}>Components:</span>\r\n            \r\n            <button \r\n              onClick={toggleCamera} \r\n              style={getToggleButtonStyle(showCamera)}\r\n            >\r\n              {showCamera ? '📹 Hide Camera' : '📹 Show Camera'}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={toggleGraph} \r\n              style={getToggleButtonStyle(showGraph)}\r\n            >\r\n              {showGraph ? '📊 Hide Graph' : '📊 Show Graph'}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={toggleWaterfall} \r\n              style={getToggleButtonStyle(showWaterfall)}\r\n            >\r\n              {showWaterfall ? '🌊 Hide Waterfall' : '🌊 Show Waterfall'}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={toggleSettings} \r\n              style={getToggleButtonStyle(showSettings)}\r\n            >\r\n              {showSettings ? '⚙️ Hide Settings' : '⚙️ Show Settings'}\r\n            </button>\r\n            \r\n            <span style={{ marginLeft: '15px', borderLeft: '1px solid rgba(255, 255, 255, 0.2)', paddingLeft: '10px' }}>\r\n              <button \r\n                onClick={saveSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(50, 150, 50, 0.7)'\r\n                }}\r\n                title=\"Save camera and calibration settings to browser storage\"\r\n              >\r\n                💾 Save Settings\r\n              </button>\r\n              \r\n              <button \r\n                onClick={exportSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(120, 120, 30, 0.7)'\r\n                }}\r\n                title=\"Export camera and calibration settings to JSON file\"\r\n              >\r\n                📤 Export Settings\r\n              </button>\r\n              \r\n              <button \r\n                onClick={loadSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(50, 100, 150, 0.7)'\r\n                }}\r\n                title=\"Load saved camera and calibration settings from browser storage\"\r\n              >\r\n                📥 Load Settings\r\n              </button>\r\n              \r\n              <button \r\n                onClick={importSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(120, 70, 150, 0.7)'\r\n                }}\r\n                title=\"Import camera and calibration settings from JSON file\"\r\n              >\r\n                📁 Import File\r\n              </button>\r\n              \r\n              {saveMessage && (\r\n                <span style={{\r\n                  fontSize: '12px',\r\n                  backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n                  padding: '2px 6px',\r\n                  borderRadius: '3px',\r\n                  marginLeft: '8px'\r\n                }}>\r\n                  {saveMessage}\r\n                </span>\r\n              )}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Two-column layout container */}\r\n        <div style={styles.columnsContainer}>\r\n          {/* Left column - Camera component */}\r\n          <div style={{ \r\n            display: showCamera ? 'block' : 'none',\r\n            flex: '1 1 50%',\r\n            minWidth: '320px',\r\n            maxWidth: '650px',\r\n            marginRight: '10px'\r\n          }}>\r\n            <MQTTCameraComponent\r\n              ref={cameraRef}\r\n              onResize={handleCameraResize}\r\n              detectorId={detectorId}\r\n            />\r\n          </div>\r\n          \r\n          {/* Right column with multiple components */}\r\n          <div style={{\r\n            ...styles.rightColumn,\r\n            flex: '1 1 50%'\r\n          }}>\r\n            {/* Graph component */}\r\n            {showGraph && (\r\n              <MQTTGraphComponent \r\n                ref={graphRef}\r\n                onResize={handleGraphResize}\r\n                lineData={processedData}  // Use processedData instead of spectrumData\r\n                // Pass the frame accumulation props up to parent to manage\r\n                onFrameAccumCountChange={handleFrameAccumCountChange}\r\n                onAccumulationToggle={handleAccumulationToggle}\r\n              />\r\n            )}\r\n            \r\n            {/* Waterfall component */}\r\n            {showWaterfall && (\r\n              <MQTTWaterfallComponent \r\n                onResize={handleWaterfallResize}\r\n                lineData={processedData}  // Use processedData instead of spectrumData\r\n                frameAccumCount={frameAccumCount}\r\n                isAccumulating={isAccumulating}\r\n                colorScale={waterfallColorScheme}\r\n                onColorScaleChange={handleWaterfallColorSchemeChange}\r\n              />\r\n            )}\r\n            \r\n            {/* Settings component */}\r\n            {showSettings && (\r\n              <MQTTSettingsComponent \r\n                onSettingChange={(setting, value) => console.log('Setting changed:', setting, value)}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Show resize info when active */}\r\n        {showResizeInfo && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            right: '30px',\r\n            bottom: '30px',\r\n            padding: '4px 8px',\r\n            background: 'rgba(0, 0, 0, 0.6)',\r\n            color: 'white',\r\n            borderRadius: '3px',\r\n            fontSize: '12px',\r\n            zIndex: 1000\r\n          }}>\r\n            {Math.round(panelSize.width)} x {Math.round(panelSize.height)}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Panel resize handle - make sure this comes last */}\r\n        <div \r\n          style={styles.resizeHandle}\r\n          onMouseDown={handlePanelResizeStart}\r\n          title=\"Drag to resize panel\"\r\n        >\r\n          <svg \r\n            width=\"20\" \r\n            height=\"20\" \r\n            viewBox=\"0 0 20 20\" \r\n            style={{ display: 'block' }}\r\n          >\r\n            <rect width=\"20\" height=\"20\" fill=\"transparent\" />\r\n            <path \r\n              d=\"M14,6 L6,14 M17,9 L9,17 M17,13 L13,17\" \r\n              stroke=\"white\" \r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    </DraggablePanel>\r\n  );\r\n};\r\n\r\nexport default SpectrometerMQTT; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}