{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\SpectrometerMQTT\\\\MQTTGraphComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = /*#__PURE__*/_s(/*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    onResize,\n    lineData,\n    onFrameAccumCountChange,\n    onAccumulationToggle\n  } = props;\n  const buttonVariants = useButtonStyles();\n  const [graphSize, setGraphSize] = useState({\n    width: '100%',\n    height: 200\n  });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [displayChannels, setDisplayChannels] = useState({\n    red: false,\n    green: false,\n    blue: false,\n    intensity: true\n  });\n  const [graphData, setGraphData] = useState(null);\n\n  // Cursor tracking state\n  const [cursorPosition, setCursorPosition] = useState(null);\n  const [showCrosshair, setShowCrosshair] = useState(false);\n\n  // Frame accumulation state - internally managed but synced with parent\n  const [frameAccumCount, setFrameAccumCount] = useState(10); // Default to 10 frames\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\n  const [accumulatedData, setAccumulatedData] = useState(null);\n  const [isAccumulating, setIsAccumulating] = useState(false);\n\n  // Export file name prefix\n  const [filePrefix, setFilePrefix] = useState('spectrum');\n  const [includeDateInFilename, setIncludeDateInFilename] = useState(true);\n\n  // Status message for operations\n  const [saveMessage, setSaveMessage] = useState('');\n\n  // Peak detection state\n  const [showPeakMarkers, setShowPeakMarkers] = useState(true);\n  const [peakCount, setPeakCount] = useState(3); // Default to showing top 3 peaks\n\n  // Calibration state\n  const [showCalibration, setShowCalibration] = useState(false);\n  const [calibrationPoints, setCalibrationPoints] = useState([{\n    position: 0.25000,\n    wavelength: 450.0\n  }, {\n    position: 0.75000,\n    wavelength: 650.0\n  }]);\n  const [useCalibration, setUseCalibration] = useState(false);\n  const [flipXAxis, setFlipXAxis] = useState(false);\n  const graphContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    getCalibrationSettings: () => ({\n      calibrationPoints: [...calibrationPoints],\n      useCalibration,\n      flipXAxis\n    }),\n    applyCalibrationSettings: settings => {\n      if (!settings) return false;\n      try {\n        if (settings.calibrationPoints && Array.isArray(settings.calibrationPoints)) {\n          setCalibrationPoints(settings.calibrationPoints);\n        }\n        if (typeof settings.useCalibration === 'boolean') {\n          setUseCalibration(settings.useCalibration);\n          if (settings.useCalibration) {\n            setShowCalibration(true);\n          }\n        }\n        if (typeof settings.flipXAxis === 'boolean') {\n          setFlipXAxis(settings.flipXAxis);\n        }\n        return true;\n      } catch (error) {\n        console.error('Error applying calibration settings:', error);\n        return false;\n      }\n    }\n  }));\n\n  // Update graph when line data changes\n  useEffect(() => {\n    if (lineData !== null && lineData !== void 0 && lineData.pixelData) {\n      // Always keep the latest raw frame data for display when not accumulating\n      setGraphData(lineData.pixelData);\n      if (isAccumulating) {\n        // Add new frame to accumulation buffer\n        setAccumulatedFrames(prev => {\n          const newFrames = [...prev, lineData.pixelData];\n\n          // If we've reached our target frame count, process the accumulated data\n          if (newFrames.length >= frameAccumCount) {\n            // Sum the color data across all frames\n            const summedData = sumFrameData(newFrames);\n\n            // Update accumulated data state\n            setAccumulatedData(summedData);\n\n            // Draw the accumulated data\n            drawGraph(summedData);\n\n            // Reset the accumulation buffer\n            return [];\n          }\n          return newFrames;\n        });\n      } else {\n        // If not accumulating, just display the raw frame\n        drawGraph(lineData.pixelData);\n      }\n    }\n  }, [lineData, isAccumulating, frameAccumCount, useCalibration, calibrationPoints, flipXAxis]);\n\n  // When accumulated data changes, draw it\n  useEffect(() => {\n    if (accumulatedData && isAccumulating) {\n      drawGraph(accumulatedData);\n    }\n  }, [accumulatedData, useCalibration, calibrationPoints, flipXAxis]);\n\n  // Sum pixel data across multiple frames\n  const sumFrameData = frames => {\n    if (!frames.length) return null;\n\n    // Use the first frame as a template for structure\n    const template = frames[0];\n\n    // Initialize arrays for summed values\n    const summedRed = Array(template.red.length).fill(0);\n    const summedGreen = Array(template.green.length).fill(0);\n    const summedBlue = Array(template.blue.length).fill(0);\n    const summedIntensity = Array(template.intensity.length).fill(0);\n\n    // Sum values across all frames\n    frames.forEach(frame => {\n      frame.red.forEach((val, i) => summedRed[i] += val);\n      frame.green.forEach((val, i) => summedGreen[i] += val);\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\n      frame.intensity.forEach((val, i) => summedIntensity[i] += val);\n    });\n\n    // Return the summed data structure\n    return {\n      timestamp: Date.now(),\n      positions: template.positions,\n      // Positions remain the same\n      red: summedRed,\n      green: summedGreen,\n      blue: summedBlue,\n      intensity: summedIntensity,\n      lineLength: template.lineLength,\n      frameCount: frames.length // Add count of frames that were summed\n    };\n  };\n\n  // Convert position to wavelength using calibration points\n  const positionToWavelength = position => {\n    if (!useCalibration || calibrationPoints.length < 2) {\n      return position;\n    }\n\n    // Sort calibration points by position\n    const sortedPoints = [...calibrationPoints].sort((a, b) => a.position - b.position);\n\n    // Find the two calibration points that surround the given position\n    let p1, p2;\n    for (let i = 0; i < sortedPoints.length - 1; i++) {\n      if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\n        p1 = sortedPoints[i];\n        p2 = sortedPoints[i + 1];\n        break;\n      }\n    }\n\n    // If position is outside the calibration range, use extrapolation\n    if (!p1 || !p2) {\n      if (position < sortedPoints[0].position) {\n        // Extrapolate below the first point\n        // Use the first two points for the slope calculation\n        p1 = sortedPoints[0];\n        p2 = sortedPoints[1];\n        // Calculate the slope between first two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p1.wavelength + slope * (position - p1.position);\n      } else {\n        // Extrapolate above the last point\n        // Use the last two points for the slope calculation\n        p1 = sortedPoints[sortedPoints.length - 2];\n        p2 = sortedPoints[sortedPoints.length - 1];\n        // Calculate the slope between last two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p2.wavelength + slope * (position - p2.position);\n      }\n    }\n\n    // Linear interpolation between the two calibration points\n    const t = (position - p1.position) / (p2.position - p1.position);\n    return p1.wavelength + t * (p2.wavelength - p1.wavelength);\n  };\n\n  // Handle changing the frame accumulation count\n  const handleFrameCountChange = e => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count > 0) {\n      setFrameAccumCount(count);\n      // Reset accumulation when count changes\n      setAccumulatedFrames([]);\n      setAccumulatedData(null);\n\n      // Notify parent of change\n      if (onFrameAccumCountChange) {\n        onFrameAccumCountChange(count);\n      }\n    }\n  };\n\n  // Toggle accumulation mode\n  const toggleAccumulation = () => {\n    const newValue = !isAccumulating;\n    setIsAccumulating(newValue);\n    // Reset accumulated data when toggling\n    setAccumulatedFrames([]);\n    setAccumulatedData(null);\n\n    // Notify parent of change\n    if (onAccumulationToggle) {\n      onAccumulationToggle(newValue);\n    }\n  };\n\n  // Toggle calibration controls\n  const toggleCalibration = () => {\n    setShowCalibration(!showCalibration);\n  };\n\n  // Toggle using calibration\n  const toggleUseCalibration = () => {\n    setUseCalibration(!useCalibration);\n  };\n\n  // Toggle flip X axis\n  const toggleFlipXAxis = () => {\n    setFlipXAxis(!flipXAxis);\n  };\n\n  // Update calibration point\n  const updateCalibrationPoint = (index, field, value) => {\n    const numValue = parseFloat(value);\n    if (isNaN(numValue)) return;\n\n    // Format position values to 3 decimal places\n    const formattedValue = field === 'position' ? parseFloat(numValue.toFixed(3)) : numValue;\n    setCalibrationPoints(points => {\n      const newPoints = [...points];\n      newPoints[index] = {\n        ...newPoints[index],\n        [field]: formattedValue\n      };\n      return newPoints;\n    });\n  };\n\n  // Initialize and resize the canvas when graph size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const container = graphContainerRef.current;\n      if (container) {\n        // Set canvas size to match container\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n\n        // Redraw graph with new size\n        if (isAccumulating && accumulatedData) {\n          drawGraph(accumulatedData);\n        } else if (graphData) {\n          drawGraph(graphData);\n        }\n      }\n    }\n  }, [graphSize, graphData, accumulatedData, isAccumulating, useCalibration, calibrationPoints, flipXAxis]);\n\n  // Find peaks in data array\n  const findPeaks = (values, positions, count = 3) => {\n    if (!values || values.length < 3) return [];\n\n    // Find local maxima (points higher than both neighbors)\n    const peaks = [];\n    for (let i = 1; i < values.length - 1; i++) {\n      if (values[i] > values[i - 1] && values[i] > values[i + 1]) {\n        // This is a local maximum\n        const peak = {\n          index: i,\n          position: positions[i],\n          value: values[i]\n        };\n\n        // Refine position using quadratic interpolation for better accuracy\n        try {\n          // Based on three points around the peak\n          const x1 = positions[i - 1];\n          const x2 = positions[i];\n          const x3 = positions[i + 1];\n          const y1 = values[i - 1];\n          const y2 = values[i];\n          const y3 = values[i + 1];\n\n          // Only apply refinement if we have valid neighboring points\n          const denom = (x1 - x2) * (x1 - x3) * (x2 - x3);\n          if (denom !== 0) {\n            // Quadratic interpolation formula\n            const A = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom;\n            const B = (x3 * x3 * (y1 - y2) + x2 * x2 * (y3 - y1) + x1 * x1 * (y2 - y3)) / denom;\n\n            // Calculate refined x position at the peak of the parabola\n            if (A !== 0) {\n              const refinedPos = -B / (2 * A);\n\n              // Only use refined position if it's within a reasonable range\n              if (refinedPos >= x1 && refinedPos <= x3) {\n                peak.refinedPosition = refinedPos;\n              }\n            }\n          }\n        } catch (e) {\n          console.warn('Error during peak refinement', e);\n          // If refinement fails, use the original position\n        }\n        peaks.push(peak);\n      }\n    }\n\n    // Sort peaks by value (descending)\n    peaks.sort((a, b) => b.value - a.value);\n\n    // Filter peaks to ensure they're at least 10nm apart (or equivalent in position space)\n    const filteredPeaks = [];\n\n    // Default position-based distance (approximately 5% of the position range)\n    const minPositionDistance = 0.05;\n    for (const peak of peaks) {\n      // Check if this peak is too close to any already-selected stronger peak\n      let tooClose = false;\n      for (const selectedPeak of filteredPeaks) {\n        // Use position-based distance (wavelength conversion will happen in the drawing code)\n        const distance = Math.abs(peak.position - selectedPeak.position);\n        if (distance < minPositionDistance) {\n          tooClose = true;\n          break;\n        }\n      }\n\n      // Add the peak if it's not too close to any stronger peak\n      if (!tooClose) {\n        filteredPeaks.push(peak);\n\n        // Stop if we have enough peaks\n        if (filteredPeaks.length >= count) {\n          break;\n        }\n      }\n    }\n    return filteredPeaks;\n  };\n\n  // Draw the graph based on pixel data\n  const drawGraph = data => {\n    if (!canvasRef.current || !data) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Draw background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n\n    // Horizontal grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const y = height * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n    }\n\n    // Vertical grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const x = width * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n    }\n\n    // Calculate min and max wavelength values for calibration upfront\n    let minWavelength, maxWavelength;\n    if (useCalibration && calibrationPoints.length >= 2) {\n      const wavelengths = calibrationPoints.map(p => p.wavelength);\n      minWavelength = Math.min(...wavelengths);\n      maxWavelength = Math.max(...wavelengths);\n    }\n\n    // Set line styles for different channels\n    const styles = {\n      red: {\n        color: 'rgba(255, 0, 0, 0.8)',\n        width: 1.5\n      },\n      green: {\n        color: 'rgba(0, 255, 0, 0.8)',\n        width: 1.5\n      },\n      blue: {\n        color: 'rgba(0, 0, 255, 0.8)',\n        width: 1.5\n      },\n      intensity: {\n        color: 'rgba(255, 255, 255, 0.8)',\n        width: 2\n      }\n    };\n\n    // Find max values for scaling\n    const maxRed = Math.max(...data.red, 1);\n    const maxGreen = Math.max(...data.green, 1);\n    const maxBlue = Math.max(...data.blue, 1);\n    const maxIntensity = Math.max(...data.intensity, 1);\n\n    // Store the peak data for each displayed channel\n    const channelPeaks = {};\n\n    // Plot each enabled channel\n    Object.entries(displayChannels).forEach(([channel, isEnabled]) => {\n      if (!isEnabled) return;\n      const values = data[channel];\n      const maxValue = channel === 'red' ? maxRed : channel === 'green' ? maxGreen : channel === 'blue' ? maxBlue : maxIntensity;\n\n      // Set line style\n      ctx.strokeStyle = styles[channel].color;\n      ctx.lineWidth = styles[channel].width;\n\n      // Begin the path\n      ctx.beginPath();\n\n      // Draw the line\n      for (let i = 0; i < values.length; i++) {\n        // Calculate x position, applying flip if enabled\n        let xPos = data.positions[i];\n        if (flipXAxis) {\n          xPos = 1 - xPos; // Invert position (0 becomes 1, 1 becomes 0)\n        }\n\n        // Convert to pixel coordinates\n        const x = xPos * width;\n\n        // Invert Y since canvas 0,0 is top-left\n        const y = height - values[i] / maxValue * height;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n\n      // Draw the path\n      ctx.stroke();\n    });\n\n    // Detect peaks for intensity channel only if enabled\n    if (showPeakMarkers && displayChannels.intensity) {\n      const intensityValues = data.intensity;\n      // Use original positions for peak detection\n      const peaks = findPeaks(intensityValues, data.positions, peakCount);\n\n      // If calibration is enabled, perform additional wavelength-based filtering\n      if (useCalibration) {\n        // Convert positions to wavelengths and filter to ensure 10nm minimum distance\n        const wavelengthPeaks = [];\n\n        // Process peaks in order of intensity (already sorted by findPeaks)\n        for (const peak of peaks) {\n          const peakWavelength = positionToWavelength(peak.position);\n          let tooClose = false;\n\n          // Check if this peak is too close to any already selected peak\n          for (const selectedPeak of wavelengthPeaks) {\n            const selectedWavelength = positionToWavelength(selectedPeak.position);\n            const distance = Math.abs(peakWavelength - selectedWavelength);\n            if (distance < 10) {\n              // 10nm minimum distance\n              tooClose = true;\n              break;\n            }\n          }\n\n          // Add the peak if it's not too close to any already selected peak\n          if (!tooClose) {\n            wavelengthPeaks.push(peak);\n          }\n        }\n        channelPeaks['intensity'] = wavelengthPeaks;\n      } else {\n        channelPeaks['intensity'] = peaks;\n      }\n    }\n\n    // Draw timestamp and status information\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.font = '10px monospace';\n    ctx.textAlign = 'left';\n\n    // Show time and accumulation status\n    const timeText = `Time: ${new Date(data.timestamp).toLocaleTimeString()}`;\n    const statusText = isAccumulating ? `Accumulating: ${accumulatedFrames.length}/${frameAccumCount} frames` : 'Live data';\n    ctx.fillText(timeText, 5, 15);\n    ctx.fillText(statusText, width - 150, 15);\n\n    // Draw calibration status if enabled\n    if (useCalibration) {\n      ctx.fillText('Calibrated', width - 150, 45);\n    }\n\n    // Draw frame count if this is accumulated data\n    if (data.frameCount) {\n      ctx.fillText(`Summed ${data.frameCount} frames`, width - 150, 30);\n    }\n\n    // Draw channel legend\n    const legendStartY = 30;\n    const legendSpacing = 15;\n    if (displayChannels.red) {\n      ctx.fillStyle = styles.red.color;\n      ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)}`, 5, legendStartY);\n    }\n    if (displayChannels.green) {\n      ctx.fillStyle = styles.green.color;\n      ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)}`, 5, legendStartY + legendSpacing);\n    }\n    if (displayChannels.blue) {\n      ctx.fillStyle = styles.blue.color;\n      ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)}`, 5, legendStartY + legendSpacing * 2);\n    }\n    if (displayChannels.intensity) {\n      ctx.fillStyle = styles.intensity.color;\n      ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)}`, 5, legendStartY + legendSpacing * 3);\n    }\n\n    // Draw wavelength axis labels if calibration is enabled (unified section)\n    if (useCalibration && minWavelength !== undefined && maxWavelength !== undefined) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.font = '10px monospace';\n      ctx.textAlign = 'center';\n\n      // Clear the bottom area where labels will go\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'; // Match background color\n      ctx.fillRect(0, height - 20, width, 20);\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'; // Reset text color\n\n      // Draw axis labels at regular position intervals (0%, 25%, 50%, 75%, 100%)\n      // but show the corresponding wavelength values\n      for (let i = 0; i <= 4; i++) {\n        const position = i / 4; // Regular positions (0, 0.25, 0.5, 0.75, 1)\n\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - position : position;\n        const x = displayPosition * width;\n\n        // Convert position to wavelength using calibration\n        const wavelength = positionToWavelength(position);\n        ctx.fillText(`${Math.round(wavelength)}nm`, x, height - 5);\n      }\n    }\n\n    // Draw calibration points if enabled\n    if (useCalibration) {\n      calibrationPoints.forEach(point => {\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - point.position : point.position;\n        // Draw vertical line at calibration point position\n        const x = displayPosition * width;\n        ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n\n        // Draw wavelength label at the calibration point\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\n        ctx.font = '10px monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${point.wavelength}nm`, x, height - 20); // Higher position to avoid overlap\n      });\n    }\n\n    // Draw peak markers if enabled\n    if (showPeakMarkers) {\n      // Draw peaks for each enabled channel\n      Object.entries(channelPeaks).forEach(([channel, peaks]) => {\n        // Use the same color as the channel with increased opacity\n        const baseColor = styles[channel].color;\n        const markerColor = baseColor.replace('rgba', 'rgb').replace(/,\\s*[\\d.]+\\)/, ')');\n\n        // Get max value for this channel for y-coordinate calculation\n        const maxValue = channel === 'red' ? maxRed : channel === 'green' ? maxGreen : channel === 'blue' ? maxBlue : maxIntensity;\n        peaks.forEach(peak => {\n          // Get the original position\n          let xPos = peak.position;\n\n          // Use refined position if available (within reasonable bounds)\n          if (peak.refinedPosition !== undefined) {\n            xPos = peak.refinedPosition;\n          }\n\n          // Apply flip if enabled\n          if (flipXAxis) {\n            xPos = 1 - xPos;\n          }\n\n          // Convert to pixel coordinates\n          const x = xPos * width;\n          const y = height - peak.value / maxValue * height;\n\n          // Check if peak is near the top of the graph (below a minimum distance from top)\n          const isNearTop = y < 60; // 60px from top\n\n          // Draw a vertical line first (always visible)\n          ctx.strokeStyle = markerColor;\n          ctx.setLineDash([2, 2]);\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, height);\n          ctx.stroke();\n          ctx.setLineDash([]);\n\n          // Draw marker at peak position (triangle pointing down or up based on position)\n          ctx.fillStyle = markerColor;\n          ctx.beginPath();\n          if (isNearTop) {\n            // If near top, draw triangle pointing up from a position slightly below the peak\n            const markerY = y + 15;\n            ctx.moveTo(x, markerY);\n            ctx.lineTo(x - 5, markerY + 10);\n            ctx.lineTo(x + 5, markerY + 10);\n          } else {\n            // Normal case - draw triangle pointing down\n            ctx.moveTo(x, y);\n            ctx.lineTo(x - 5, y - 10);\n            ctx.lineTo(x + 5, y - 10);\n          }\n          ctx.closePath();\n          ctx.fill();\n\n          // Prepare label text\n          let label;\n          if (useCalibration) {\n            const wavelength = positionToWavelength(peak.position);\n            label = `${wavelength.toFixed(1)}nm`;\n          } else {\n            label = `Pos: ${peak.position.toFixed(3)}`;\n          }\n          const valueLabel = `I: ${peak.value.toFixed(1)}`;\n\n          // Setup text rendering\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n          ctx.font = '10px monospace';\n          ctx.textAlign = 'center';\n\n          // Measure text dimensions for backgrounds\n          const textWidth = ctx.measureText(label).width + 6;\n          const valueWidth = ctx.measureText(valueLabel).width + 6;\n          if (isNearTop) {\n            // Draw position/wavelength label below the marker\n            const labelY = y + 30;\n\n            // Draw text background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth / 2, labelY - 10, textWidth, 16);\n\n            // Draw label text\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, labelY);\n\n            // Draw value label below that\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth / 2, labelY + 7, valueWidth, 16);\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, labelY + 17);\n          } else {\n            // Standard label position above marker\n            // Draw text background for better readability\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth / 2, y - 25, textWidth, 16);\n\n            // Draw label above marker\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, y - 14);\n\n            // Draw peak value\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth / 2, y - 42, valueWidth, 16);\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, y - 31);\n          }\n        });\n      });\n    }\n\n    // Draw crosshair at cursor position\n    if (showCrosshair && cursorPosition) {\n      const {\n        x,\n        y\n      } = cursorPosition;\n      if (x >= 0 && x <= width && y >= 0 && y <= height) {\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.setLineDash([3, 3]); // Dashed line\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n\n        // Draw horizontal line\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset line style\n\n        // Calculate and display wavelength at cursor position\n        const position = x / width; // Normalize cursor position (0-1)\n\n        // Apply flip if needed to get the actual data position\n        const dataPosition = flipXAxis ? 1 - position : position;\n\n        // Determine wavelength based on cursor position\n        let wavelength;\n        if (useCalibration) {\n          wavelength = positionToWavelength(dataPosition);\n        } else {\n          wavelength = dataPosition; // Just show the position value when not calibrated\n        }\n\n        // Calculate y-values at the cursor position\n        let valueText = '';\n        if (data && data.positions && data.positions.length > 0) {\n          // Find the nearest data point to the cursor\n          const positionIndex = findNearestPositionIndex(data.positions, dataPosition);\n\n          // Build value text based on active channels\n          const channelTexts = [];\n          if (displayChannels.red) {\n            channelTexts.push(`R:${Math.round(data.red[positionIndex])}`);\n          }\n          if (displayChannels.green) {\n            channelTexts.push(`G:${Math.round(data.green[positionIndex])}`);\n          }\n          if (displayChannels.blue) {\n            channelTexts.push(`B:${Math.round(data.blue[positionIndex])}`);\n          }\n          if (displayChannels.intensity) {\n            channelTexts.push(`I:${data.intensity[positionIndex].toFixed(1)}`);\n          }\n          valueText = channelTexts.join(', ');\n        }\n\n        // Create a background for the text for better readability\n        const wavelengthText = useCalibration ? `${wavelength.toFixed(1)}nm` : `Pos: ${wavelength.toFixed(3)}`;\n\n        // Draw text background\n        const textWidth = ctx.measureText(wavelengthText).width + 10;\n        const valueTextWidth = ctx.measureText(valueText).width + 10;\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        ctx.fillRect(x - textWidth / 2, height - 45, textWidth, 20);\n        if (valueText) {\n          ctx.fillRect(x - valueTextWidth / 2, 5, valueTextWidth, 20);\n        }\n\n        // Draw wavelength text below cursor\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        ctx.textAlign = 'center';\n        ctx.fillText(wavelengthText, x, height - 30);\n\n        // Draw value text above cursor\n        if (valueText) {\n          ctx.fillText(valueText, x, 20);\n        }\n      }\n    }\n  };\n\n  // Helper to find the index of the nearest position value to a given position\n  const findNearestPositionIndex = (positions, targetPosition) => {\n    if (!positions || positions.length === 0) return -1;\n    let nearestIndex = 0;\n    let minDistance = Math.abs(positions[0] - targetPosition);\n    for (let i = 1; i < positions.length; i++) {\n      const distance = Math.abs(positions[i] - targetPosition);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestIndex = i;\n      }\n    }\n    return nearestIndex;\n  };\n\n  // Toggle display of a specific channel\n  const toggleChannel = channel => {\n    setDisplayChannels(prev => ({\n      ...prev,\n      [channel]: !prev[channel]\n    }));\n  };\n\n  // Handle mouse movement over the graph\n  const handleMouseMove = e => {\n    if (!graphContainerRef.current) return;\n\n    // Get canvas bounds\n    const rect = graphContainerRef.current.getBoundingClientRect();\n\n    // Calculate cursor position relative to canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Update cursor position state\n    setCursorPosition({\n      x,\n      y\n    });\n\n    // Redraw the graph with crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n\n  // Handle mouse enter/leave events\n  const handleMouseEnter = () => {\n    setShowCrosshair(true);\n  };\n  const handleMouseLeave = () => {\n    setShowCrosshair(false);\n    setCursorPosition(null);\n\n    // Redraw the graph without crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n\n  // Similar resize functionality as before\n  const handleResizeStart = e => {\n    var _graphContainerRef$cu, _graphContainerRef$cu2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_graphContainerRef$cu = graphContainerRef.current) === null || _graphContainerRef$cu === void 0 ? void 0 : _graphContainerRef$cu.clientWidth) || 400;\n    const startHeight = ((_graphContainerRef$cu2 = graphContainerRef.current) === null || _graphContainerRef$cu2 === void 0 ? void 0 : _graphContainerRef$cu2.clientHeight) || graphSize.height;\n\n    // Show resize feedback\n    setIsResizing(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaY = moveEvent.clientY - startY;\n\n      // Only adjust height, keep width as 100%\n      const newHeight = Math.max(100, startHeight + deltaY);\n\n      // Update graph size\n      const newSize = {\n        width: '100%',\n        // Keep width as 100% for responsive behavior\n        height: Math.round(newHeight)\n      };\n      setGraphSize(newSize);\n\n      // Notify parent if needed\n      if (onResize) {\n        onResize(newSize);\n      }\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      // Create settings object with all necessary parameters\n      const settings = {\n        // Calibration settings\n        calibration: {\n          points: calibrationPoints,\n          useCalibration: useCalibration,\n          flipXAxis: flipXAxis,\n          showCalibration: showCalibration\n        },\n        // Display settings\n        display: {\n          channels: displayChannels,\n          graphSize: graphSize\n        },\n        // Frame accumulation settings\n        accumulation: {\n          frameAccumCount: frameAccumCount,\n          isAccumulating: isAccumulating\n        },\n        // Peak marker settings\n        peaks: {\n          showPeakMarkers: showPeakMarkers,\n          peakCount: peakCount\n        },\n        // Export settings\n        export: {\n          filePrefix: filePrefix,\n          includeDateInFilename: includeDateInFilename\n        },\n        // Add timestamp for reference\n        timestamp: new Date().toISOString()\n      };\n\n      // Convert to JSON string with nice formatting\n      const jsonString = JSON.stringify(settings, null, 2);\n\n      // Create file name with timestamp\n      const now = new Date();\n      const timestamp = now.getFullYear() + String(now.getMonth() + 1).padStart(2, '0') + String(now.getDate()).padStart(2, '0') + '_' + String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0');\n      const fileName = `spectrometer_settings_${timestamp}.json`;\n\n      // Create blob and download\n      const blob = new Blob([jsonString], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Trigger download\n      document.body.appendChild(link);\n      link.click();\n\n      // Cleanup\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Show success message\n      setSaveMessage(`Settings exported as ${fileName}`);\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Export graph data as text file\n  const exportGraphData = () => {\n    // Make sure we have data to export\n    const dataToExport = isAccumulating ? accumulatedData : graphData;\n    if (!dataToExport) {\n      console.warn('No data to export');\n      if (props.onMessage) {\n        props.onMessage('No data to export');\n      }\n      return;\n    }\n    try {\n      const lines = [];\n      // Create a timestamp string in format YYYYMMDDhhmmss\n      const now = new Date();\n      const timestamp = now.getFullYear() + String(now.getMonth() + 1).padStart(2, '0') + String(now.getDate()).padStart(2, '0') + String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0') + String(now.getSeconds()).padStart(2, '0');\n      lines.push(timestamp);\n      // Add information on calibration points\n\n      // Add column headers as first line\n      const headers = useCalibration ? \"Wavelength (nm);Intensity;Red;Green;Blue\" : \"Position;Intensity;Red;Green;Blue\";\n      lines.push(headers);\n\n      // Loop through data points\n      for (let i = 0; i < dataToExport.positions.length; i++) {\n        let position = dataToExport.positions[i];\n        // Convert position to wavelength if calibration is enabled\n        let wavelength = position;\n        if (useCalibration) {\n          wavelength = positionToWavelength(position);\n        }\n\n        // Get all channel values\n        const intensity = dataToExport.intensity[i];\n        const red = dataToExport.red[i];\n        const green = dataToExport.green[i];\n        const blue = dataToExport.blue[i];\n\n        // Add line with all values\n        lines.push(`${wavelength.toFixed(3)};${intensity.toFixed(2)};${red.toFixed(2)};${green.toFixed(2)};${blue.toFixed(2)}`);\n      }\n\n      // Join lines with newlines\n      const content = lines.join('\\n');\n\n      // Create filename with prefix and optional timestamp\n      const fileName = includeDateInFilename ? `${filePrefix}_${timestamp}.txt` : `${filePrefix}.txt`;\n\n      // Create Blob with content\n      const blob = new Blob([content], {\n        type: 'text/plain'\n      });\n\n      // Create download link\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Append to document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Show success message\n      if (props.onMessage) {\n        props.onMessage(`Data exported as ${fileName}`);\n      } else {\n        // If no message handler provided, show alert\n        console.log(`Data exported as ${fileName}`);\n        setSaveMessage && setSaveMessage(`Data exported as ${fileName}`);\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    } catch (error) {\n      console.error('Failed to export graph data:', error);\n      if (props.onMessage) {\n        props.onMessage('Error exporting data');\n      } else {\n        setSaveMessage && setSaveMessage('Error exporting data');\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    }\n  };\n\n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    // fill this gap\n  };\n\n  // Handle peak count change\n  const handlePeakCountChange = e => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count >= 0 && count <= 10) {\n      setPeakCount(count);\n    }\n  };\n\n  // Toggle peak markers\n  const togglePeakMarkers = () => {\n    setShowPeakMarkers(!showPeakMarkers);\n  };\n  const styles = {\n    container: {\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      padding: '10px',\n      borderRadius: '4px',\n      position: 'relative',\n      border: isResizing ? '1px dashed #4CAF50' : 'none'\n    },\n    title: {\n      margin: '0 0 10px 0',\n      fontSize: '14px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    controls: {\n      display: 'flex',\n      gap: '5px',\n      alignItems: 'center'\n    },\n    frameCountControl: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '10px',\n      gap: '8px'\n    },\n    frameCountLabel: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.8)'\n    },\n    frameCountInput: {\n      width: '50px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '12px'\n    },\n    calibrationContainer: {\n      marginBottom: '10px',\n      padding: '8px',\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      borderRadius: '4px'\n    },\n    calibrationHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '8px'\n    },\n    calibrationTitle: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.9)',\n      margin: 0\n    },\n    calibrationCheckbox: {\n      marginLeft: '8px'\n    },\n    calibrationPoints: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '6px'\n    },\n    calibrationPoint: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      gap: '6px'\n    },\n    calibrationLabel: {\n      fontSize: '11px',\n      color: 'rgba(255, 255, 255, 0.7)',\n      width: '40px'\n    },\n    calibrationInput: {\n      width: '60px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '11px'\n    },\n    graphView: {\n      width: graphSize.width,\n      height: `${graphSize.height}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    canvas: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    resizeHandle: {\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      width: '20px',\n      height: '20px',\n      cursor: 'ns-resize',\n      // Only allow vertical resizing\n      zIndex: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\n      borderTopLeftRadius: '4px'\n    },\n    resizeInfo: {\n      position: 'absolute',\n      right: '25px',\n      bottom: '25px',\n      padding: '2px 6px',\n      background: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '3px',\n      fontSize: '11px',\n      zIndex: 100\n    },\n    channelToggles: {\n      display: 'flex',\n      gap: '5px'\n    },\n    channelButton: {\n      fontSize: '10px',\n      padding: '2px 5px',\n      borderRadius: '3px',\n      cursor: 'pointer',\n      border: '1px solid rgba(255, 255, 255, 0.3)',\n      backgroundColor: 'rgba(30, 30, 30, 0.7)'\n    },\n    noData: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      color: 'rgba(255, 255, 255, 0.5)',\n      fontSize: '12px'\n    }\n  };\n\n  // Return the component JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.title,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: 0\n        },\n        children: \"Intensity Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.channelToggles,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.4)',\n            borderColor: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.2)'\n          },\n          onClick: () => toggleChannel('red'),\n          children: \"R\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.4)',\n            borderColor: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.2)'\n          },\n          onClick: () => toggleChannel('green'),\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.4)',\n            borderColor: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.2)'\n          },\n          onClick: () => toggleChannel('blue'),\n          children: \"B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.4)',\n            borderColor: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.2)'\n          },\n          onClick: () => toggleChannel('intensity'),\n          children: \"I\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: 'rgb(255, 255, 100)',\n            borderColor: showCalibration ? 'rgb(255, 255, 100)' : 'rgba(255, 255, 100, 0.2)',\n            backgroundColor: showCalibration ? 'rgba(60, 60, 0, 0.6)' : 'rgba(30, 30, 30, 0.7)'\n          },\n          onClick: toggleCalibration,\n          title: \"Toggle calibration controls\",\n          children: \"Cal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1341,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.frameCountControl,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.frameCountLabel,\n        children: \"Frame accumulation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        max: \"2000\",\n        value: frameAccumCount,\n        onChange: handleFrameCountChange,\n        style: styles.frameCountInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...buttonVariants.smallIconButton,\n          backgroundColor: isAccumulating ? 'rgba(255, 165, 0, 0.7)' : undefined\n        },\n        onClick: toggleAccumulation,\n        title: isAccumulating ? \"Switch to live data\" : \"Switch to frame accumulation\",\n        children: isAccumulating ? \"Accumulating\" : \"Live\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px',\n          marginLeft: '20px',\n          borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n          paddingLeft: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.frameCountLabel,\n          children: \"Peak markers:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0\",\n          max: \"10\",\n          value: peakCount,\n          onChange: handlePeakCountChange,\n          style: styles.frameCountInput,\n          title: \"Number of peak markers to display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallIconButton,\n            backgroundColor: showPeakMarkers ? 'rgba(120, 120, 220, 0.7)' : undefined\n          },\n          onClick: togglePeakMarkers,\n          title: showPeakMarkers ? \"Hide peak markers\" : \"Show peak markers\",\n          children: showPeakMarkers ? \"Peaks On\" : \"Peaks Off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1398,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          marginLeft: 'auto',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: filePrefix,\n          onChange: e => setFilePrefix(e.target.value),\n          placeholder: \"File prefix\",\n          style: {\n            ...styles.frameCountInput,\n            width: '100px'\n          },\n          title: \"Prefix for the exported data filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1412,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            fontSize: '11px',\n            color: 'rgba(255, 255, 255, 0.7)',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '3px',\n            marginRight: '5px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: includeDateInFilename,\n            onChange: e => setIncludeDateInFilename(e.target.checked),\n            style: {\n              margin: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1431,\n            columnNumber: 13\n          }, this), \"Date\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallSecondary,\n            backgroundColor: 'rgba(20, 120, 220, 0.7)'\n          },\n          onClick: exportGraphData,\n          title: \"Export graph data as text file\",\n          disabled: !graphData && !accumulatedData,\n          children: \"\\uD83D\\uDCBE Export Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1439,\n          columnNumber: 11\n        }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '11px',\n            backgroundColor: 'rgba(0, 0, 0, 0.6)',\n            padding: '2px 6px',\n            borderRadius: '3px',\n            marginLeft: '5px',\n            color: 'rgba(255, 255, 255, 0.9)'\n          },\n          children: saveMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1452,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1411,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1356,\n      columnNumber: 7\n    }, this), showCalibration && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.calibrationContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.calibrationHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: styles.calibrationTitle,\n          children: \"Wavelength Calibration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1469,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontSize: '11px',\n              color: 'rgba(255, 255, 255, 0.7)'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: useCalibration,\n              onChange: toggleUseCalibration,\n              style: styles.calibrationCheckbox\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1472,\n              columnNumber: 17\n            }, this), \"Use Calibration\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1471,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1470,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1468,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.calibrationPoints,\n        children: [calibrationPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.calibrationPoint,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationLabel,\n            children: [\"Point \", index + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1486,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginRight: '4px'\n              },\n              children: \"Pos:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1488,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              max: \"1\",\n              step: \"0.0001\",\n              value: point.position,\n              onChange: e => updateCalibrationPoint(index, 'position', e.target.value),\n              style: styles.calibrationInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1489,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1487,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginRight: '4px'\n              },\n              children: \"\\u03BB:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1500,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"200\",\n              max: \"1200\",\n              step: \"0.01\",\n              value: point.wavelength,\n              onChange: e => updateCalibrationPoint(index, 'wavelength', e.target.value),\n              style: styles.calibrationInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1501,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginLeft: '2px'\n              },\n              children: \"nm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1510,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1499,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1485,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '8px',\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontSize: '11px',\n              color: 'rgba(255, 255, 255, 0.7)',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: flipXAxis,\n              onChange: toggleFlipXAxis,\n              style: {\n                marginRight: '5px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1517,\n              columnNumber: 17\n            }, this), \"Flip X-Axis\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1516,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1515,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1483,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1467,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: graphContainerRef,\n      style: styles.graphView,\n      onMouseMove: handleMouseMove,\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: styles.canvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1537,\n        columnNumber: 9\n      }, this), !graphData && !accumulatedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.noData,\n        children: \"Draw a line on the camera feed to see intensity data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1543,\n        columnNumber: 11\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeInfo,\n        children: [\"Height: \", graphSize.height, \"px\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handleResizeStart,\n        title: \"Resize graph height\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"12\",\n          height: \"12\",\n          viewBox: \"0 0 12 12\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M2,6 L10,6 M2,9 L10,9\",\n            stroke: \"white\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1562,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1561,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1556,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1530,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1297,\n    columnNumber: 5\n  }, this);\n}, \"2efxPP467zcNZyyHHrB5WOfhBVM=\", false, function () {\n  return [useButtonStyles];\n})), \"2efxPP467zcNZyyHHrB5WOfhBVM=\", false, function () {\n  return [useButtonStyles];\n});\n\n// Add display name for debugging\n_c2 = GraphComponent;\nGraphComponent.displayName = 'GraphComponent';\nexport default GraphComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent$React.forwardRef\");\n$RefreshReg$(_c2, \"GraphComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useImperativeHandle","useButtonStyles","jsxDEV","_jsxDEV","GraphComponent","_s","forwardRef","_c","props","ref","onResize","lineData","onFrameAccumCountChange","onAccumulationToggle","buttonVariants","graphSize","setGraphSize","width","height","isResizing","setIsResizing","showResizeInfo","setShowResizeInfo","displayChannels","setDisplayChannels","red","green","blue","intensity","graphData","setGraphData","cursorPosition","setCursorPosition","showCrosshair","setShowCrosshair","frameAccumCount","setFrameAccumCount","accumulatedFrames","setAccumulatedFrames","accumulatedData","setAccumulatedData","isAccumulating","setIsAccumulating","filePrefix","setFilePrefix","includeDateInFilename","setIncludeDateInFilename","saveMessage","setSaveMessage","showPeakMarkers","setShowPeakMarkers","peakCount","setPeakCount","showCalibration","setShowCalibration","calibrationPoints","setCalibrationPoints","position","wavelength","useCalibration","setUseCalibration","flipXAxis","setFlipXAxis","graphContainerRef","canvasRef","getCalibrationSettings","applyCalibrationSettings","settings","Array","isArray","error","console","pixelData","prev","newFrames","length","summedData","sumFrameData","drawGraph","frames","template","summedRed","fill","summedGreen","summedBlue","summedIntensity","forEach","frame","val","i","timestamp","Date","now","positions","lineLength","frameCount","positionToWavelength","sortedPoints","sort","a","b","p1","p2","slope","t","handleFrameCountChange","e","count","parseInt","target","value","isNaN","toggleAccumulation","newValue","toggleCalibration","toggleUseCalibration","toggleFlipXAxis","updateCalibrationPoint","index","field","numValue","parseFloat","formattedValue","toFixed","points","newPoints","current","canvas","container","clientWidth","clientHeight","findPeaks","values","peaks","peak","x1","x2","x3","y1","y2","y3","denom","A","B","refinedPos","refinedPosition","warn","push","filteredPeaks","minPositionDistance","tooClose","selectedPeak","distance","Math","abs","data","ctx","getContext","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","y","beginPath","moveTo","lineTo","stroke","x","minWavelength","maxWavelength","wavelengths","map","p","min","max","styles","color","maxRed","maxGreen","maxBlue","maxIntensity","channelPeaks","Object","entries","channel","isEnabled","maxValue","xPos","intensityValues","wavelengthPeaks","peakWavelength","selectedWavelength","font","textAlign","timeText","toLocaleTimeString","statusText","fillText","legendStartY","legendSpacing","round","reduce","undefined","displayPosition","point","baseColor","markerColor","replace","isNearTop","setLineDash","markerY","closePath","label","valueLabel","textWidth","measureText","valueWidth","labelY","dataPosition","valueText","positionIndex","findNearestPositionIndex","channelTexts","join","wavelengthText","valueTextWidth","targetPosition","nearestIndex","minDistance","toggleChannel","handleMouseMove","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseEnter","handleMouseLeave","handleResizeStart","_graphContainerRef$cu","_graphContainerRef$cu2","preventDefault","stopPropagation","startX","startY","startWidth","startHeight","moveEvent","deltaY","newHeight","newSize","handleMouseUp","document","removeEventListener","setTimeout","addEventListener","exportSettings","calibration","display","channels","accumulation","export","toISOString","jsonString","JSON","stringify","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","fileName","blob","Blob","type","url","URL","createObjectURL","link","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","exportGraphData","dataToExport","onMessage","lines","getSeconds","headers","content","log","loadSettings","handlePeakCountChange","togglePeakMarkers","backgroundColor","padding","borderRadius","border","title","margin","fontSize","justifyContent","alignItems","controls","gap","frameCountControl","marginBottom","frameCountLabel","frameCountInput","calibrationContainer","calibrationHeader","calibrationTitle","calibrationCheckbox","marginLeft","flexDirection","calibrationPoint","calibrationLabel","calibrationInput","graphView","overflow","resizeHandle","bottom","right","cursor","zIndex","borderTop","borderLeft","borderTopLeftRadius","resizeInfo","background","channelToggles","channelButton","noData","style","children","_jsxFileName","lineNumber","columnNumber","borderColor","onClick","onChange","smallIconButton","paddingLeft","placeholder","marginRight","checked","smallSecondary","disabled","step","marginTop","onMouseMove","onMouseEnter","onMouseLeave","onMouseDown","viewBox","d","strokeWidth","strokeLinecap","_c2","displayName","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/SpectrometerMQTT/MQTTGraphComponent.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\r\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\r\n\r\nconst GraphComponent = React.forwardRef((props, ref) => {\r\n  const { onResize, lineData, onFrameAccumCountChange, onAccumulationToggle } = props;\r\n  const buttonVariants = useButtonStyles();\r\n  const [graphSize, setGraphSize] = useState({ width: '100%', height: 200 });\r\n  const [isResizing, setIsResizing] = useState(false);\r\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\r\n  const [displayChannels, setDisplayChannels] = useState({\r\n    red: false,\r\n    green: false,\r\n    blue: false,\r\n    intensity: true\r\n  });\r\n  const [graphData, setGraphData] = useState(null);\r\n  \r\n  // Cursor tracking state\r\n  const [cursorPosition, setCursorPosition] = useState(null);\r\n  const [showCrosshair, setShowCrosshair] = useState(false);\r\n  \r\n  // Frame accumulation state - internally managed but synced with parent\r\n  const [frameAccumCount, setFrameAccumCount] = useState(10); // Default to 10 frames\r\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\r\n  const [accumulatedData, setAccumulatedData] = useState(null);\r\n  const [isAccumulating, setIsAccumulating] = useState(false);\r\n  \r\n  // Export file name prefix\r\n  const [filePrefix, setFilePrefix] = useState('spectrum');\r\n  const [includeDateInFilename, setIncludeDateInFilename] = useState(true);\r\n  \r\n  // Status message for operations\r\n  const [saveMessage, setSaveMessage] = useState('');\r\n  \r\n  // Peak detection state\r\n  const [showPeakMarkers, setShowPeakMarkers] = useState(true);\r\n  const [peakCount, setPeakCount] = useState(3); // Default to showing top 3 peaks\r\n  \r\n  // Calibration state\r\n  const [showCalibration, setShowCalibration] = useState(false);\r\n  const [calibrationPoints, setCalibrationPoints] = useState([\r\n    { position: 0.25000, wavelength: 450.0 },\r\n    { position: 0.75000, wavelength: 650.0 }\r\n  ]);\r\n  const [useCalibration, setUseCalibration] = useState(false);\r\n  const [flipXAxis, setFlipXAxis] = useState(false);\r\n  \r\n  const graphContainerRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  \r\n  // Expose methods to parent component via ref\r\n  useImperativeHandle(ref, () => ({\r\n    getCalibrationSettings: () => ({\r\n      calibrationPoints: [...calibrationPoints],\r\n      useCalibration,\r\n      flipXAxis\r\n    }),\r\n    \r\n    applyCalibrationSettings: (settings) => {\r\n      if (!settings) return false;\r\n      \r\n      try {\r\n        if (settings.calibrationPoints && Array.isArray(settings.calibrationPoints)) {\r\n          setCalibrationPoints(settings.calibrationPoints);\r\n        }\r\n        \r\n        if (typeof settings.useCalibration === 'boolean') {\r\n          setUseCalibration(settings.useCalibration);\r\n          if (settings.useCalibration) {\r\n            setShowCalibration(true);\r\n          }\r\n        }\r\n        \r\n        if (typeof settings.flipXAxis === 'boolean') {\r\n          setFlipXAxis(settings.flipXAxis);\r\n        }\r\n        \r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error applying calibration settings:', error);\r\n        return false;\r\n      }\r\n    }\r\n  }));\r\n  \r\n  // Update graph when line data changes\r\n  useEffect(() => {\r\n    if (lineData?.pixelData) {\r\n      // Always keep the latest raw frame data for display when not accumulating\r\n      setGraphData(lineData.pixelData);\r\n      \r\n      if (isAccumulating) {\r\n        // Add new frame to accumulation buffer\r\n        setAccumulatedFrames(prev => {\r\n          const newFrames = [...prev, lineData.pixelData];\r\n          \r\n          // If we've reached our target frame count, process the accumulated data\r\n          if (newFrames.length >= frameAccumCount) {\r\n            // Sum the color data across all frames\r\n            const summedData = sumFrameData(newFrames);\r\n            \r\n            // Update accumulated data state\r\n            setAccumulatedData(summedData);\r\n            \r\n            // Draw the accumulated data\r\n            drawGraph(summedData);\r\n            \r\n            // Reset the accumulation buffer\r\n            return [];\r\n          }\r\n          \r\n          return newFrames;\r\n        });\r\n      } else {\r\n        // If not accumulating, just display the raw frame\r\n        drawGraph(lineData.pixelData);\r\n      }\r\n    }\r\n  }, [lineData, isAccumulating, frameAccumCount, useCalibration, calibrationPoints, flipXAxis]);\r\n  \r\n  // When accumulated data changes, draw it\r\n  useEffect(() => {\r\n    if (accumulatedData && isAccumulating) {\r\n      drawGraph(accumulatedData);\r\n    }\r\n  }, [accumulatedData, useCalibration, calibrationPoints, flipXAxis]);\r\n  \r\n  // Sum pixel data across multiple frames\r\n  const sumFrameData = (frames) => {\r\n    if (!frames.length) return null;\r\n    \r\n    // Use the first frame as a template for structure\r\n    const template = frames[0];\r\n    \r\n    // Initialize arrays for summed values\r\n    const summedRed = Array(template.red.length).fill(0);\r\n    const summedGreen = Array(template.green.length).fill(0);\r\n    const summedBlue = Array(template.blue.length).fill(0);\r\n    const summedIntensity = Array(template.intensity.length).fill(0);\r\n    \r\n    // Sum values across all frames\r\n    frames.forEach(frame => {\r\n      frame.red.forEach((val, i) => summedRed[i] += val);\r\n      frame.green.forEach((val, i) => summedGreen[i] += val);\r\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\r\n      frame.intensity.forEach((val, i) => summedIntensity[i] += val);\r\n    });\r\n\r\n    // Return the summed data structure\r\n    return {\r\n      timestamp: Date.now(),\r\n      positions: template.positions, // Positions remain the same\r\n      red: summedRed,\r\n      green: summedGreen,\r\n      blue: summedBlue,\r\n      intensity: summedIntensity,\r\n      lineLength: template.lineLength,\r\n      frameCount: frames.length // Add count of frames that were summed\r\n    };\r\n  };\r\n  \r\n  // Convert position to wavelength using calibration points\r\n  const positionToWavelength = (position) => {\r\n    if (!useCalibration || calibrationPoints.length < 2) {\r\n      return position;\r\n    }\r\n    \r\n    // Sort calibration points by position\r\n    const sortedPoints = [...calibrationPoints].sort((a, b) => a.position - b.position);\r\n    \r\n    // Find the two calibration points that surround the given position\r\n    let p1, p2;\r\n    for (let i = 0; i < sortedPoints.length - 1; i++) {\r\n      if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\r\n        p1 = sortedPoints[i];\r\n        p2 = sortedPoints[i + 1];\r\n        break;\r\n      }\r\n    }\r\n    \r\n    // If position is outside the calibration range, use extrapolation\r\n    if (!p1 || !p2) {\r\n      if (position < sortedPoints[0].position) {\r\n        // Extrapolate below the first point\r\n        // Use the first two points for the slope calculation\r\n        p1 = sortedPoints[0];\r\n        p2 = sortedPoints[1];\r\n        // Calculate the slope between first two calibration points\r\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\r\n        // Extrapolate using y = mx + b formula\r\n        return p1.wavelength + slope * (position - p1.position);\r\n      } else {\r\n        // Extrapolate above the last point\r\n        // Use the last two points for the slope calculation\r\n        p1 = sortedPoints[sortedPoints.length - 2];\r\n        p2 = sortedPoints[sortedPoints.length - 1];\r\n        // Calculate the slope between last two calibration points\r\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\r\n        // Extrapolate using y = mx + b formula\r\n        return p2.wavelength + slope * (position - p2.position);\r\n      }\r\n    }\r\n    \r\n    // Linear interpolation between the two calibration points\r\n    const t = (position - p1.position) / (p2.position - p1.position);\r\n    return p1.wavelength + t * (p2.wavelength - p1.wavelength);\r\n  };\r\n  \r\n  // Handle changing the frame accumulation count\r\n  const handleFrameCountChange = (e) => {\r\n    const count = parseInt(e.target.value);\r\n    if (!isNaN(count) && count > 0) {\r\n      setFrameAccumCount(count);\r\n      // Reset accumulation when count changes\r\n      setAccumulatedFrames([]);\r\n      setAccumulatedData(null);\r\n      \r\n      // Notify parent of change\r\n      if (onFrameAccumCountChange) {\r\n        onFrameAccumCountChange(count);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Toggle accumulation mode\r\n  const toggleAccumulation = () => {\r\n    const newValue = !isAccumulating;\r\n    setIsAccumulating(newValue);\r\n    // Reset accumulated data when toggling\r\n    setAccumulatedFrames([]);\r\n    setAccumulatedData(null);\r\n    \r\n    // Notify parent of change\r\n    if (onAccumulationToggle) {\r\n      onAccumulationToggle(newValue);\r\n    }\r\n  };\r\n  \r\n  // Toggle calibration controls\r\n  const toggleCalibration = () => {\r\n    setShowCalibration(!showCalibration);\r\n  };\r\n  \r\n  // Toggle using calibration\r\n  const toggleUseCalibration = () => {\r\n    setUseCalibration(!useCalibration);\r\n  };\r\n  \r\n  // Toggle flip X axis\r\n  const toggleFlipXAxis = () => {\r\n    setFlipXAxis(!flipXAxis);\r\n  };\r\n  \r\n  // Update calibration point\r\n  const updateCalibrationPoint = (index, field, value) => {\r\n    const numValue = parseFloat(value);\r\n    if (isNaN(numValue)) return;\r\n    \r\n    // Format position values to 3 decimal places\r\n    const formattedValue = field === 'position' ? \r\n      parseFloat(numValue.toFixed(3)) : \r\n      numValue;\r\n    \r\n    setCalibrationPoints(points => {\r\n      const newPoints = [...points];\r\n      newPoints[index] = {\r\n        ...newPoints[index],\r\n        [field]: formattedValue\r\n      };\r\n      return newPoints;\r\n    });\r\n  };\r\n  \r\n  // Initialize and resize the canvas when graph size changes\r\n  useEffect(() => {\r\n    if (canvasRef.current) {\r\n      const canvas = canvasRef.current;\r\n      const container = graphContainerRef.current;\r\n      \r\n      if (container) {\r\n        // Set canvas size to match container\r\n        canvas.width = container.clientWidth;\r\n        canvas.height = container.clientHeight;\r\n        \r\n        // Redraw graph with new size\r\n        if (isAccumulating && accumulatedData) {\r\n          drawGraph(accumulatedData);\r\n        } else if (graphData) {\r\n          drawGraph(graphData);\r\n        }\r\n      }\r\n    }\r\n  }, [graphSize, graphData, accumulatedData, isAccumulating, useCalibration, calibrationPoints, flipXAxis]);\r\n  \r\n  // Find peaks in data array\r\n  const findPeaks = (values, positions, count = 3) => {\r\n    if (!values || values.length < 3) return [];\r\n    \r\n    // Find local maxima (points higher than both neighbors)\r\n    const peaks = [];\r\n    \r\n    for (let i = 1; i < values.length - 1; i++) {\r\n      if (values[i] > values[i - 1] && values[i] > values[i + 1]) {\r\n        // This is a local maximum\r\n        const peak = {\r\n          index: i,\r\n          position: positions[i],\r\n          value: values[i]\r\n        };\r\n        \r\n        // Refine position using quadratic interpolation for better accuracy\r\n        try {\r\n          // Based on three points around the peak\r\n          const x1 = positions[i-1];\r\n          const x2 = positions[i];\r\n          const x3 = positions[i+1];\r\n          const y1 = values[i-1];\r\n          const y2 = values[i];\r\n          const y3 = values[i+1];\r\n          \r\n          // Only apply refinement if we have valid neighboring points\r\n          const denom = (x1 - x2) * (x1 - x3) * (x2 - x3);\r\n          if (denom !== 0) {\r\n            // Quadratic interpolation formula\r\n            const A = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom;\r\n            const B = (x3*x3 * (y1 - y2) + x2*x2 * (y3 - y1) + x1*x1 * (y2 - y3)) / denom;\r\n            \r\n            // Calculate refined x position at the peak of the parabola\r\n            if (A !== 0) {\r\n              const refinedPos = -B / (2 * A);\r\n              \r\n              // Only use refined position if it's within a reasonable range\r\n              if (refinedPos >= x1 && refinedPos <= x3) {\r\n                peak.refinedPosition = refinedPos;\r\n              }\r\n            }\r\n          }\r\n        } catch (e) {\r\n          console.warn('Error during peak refinement', e);\r\n          // If refinement fails, use the original position\r\n        }\r\n        \r\n        peaks.push(peak);\r\n      }\r\n    }\r\n    \r\n    // Sort peaks by value (descending)\r\n    peaks.sort((a, b) => b.value - a.value);\r\n    \r\n    // Filter peaks to ensure they're at least 10nm apart (or equivalent in position space)\r\n    const filteredPeaks = [];\r\n    \r\n    // Default position-based distance (approximately 5% of the position range)\r\n    const minPositionDistance = 0.05;\r\n    \r\n    for (const peak of peaks) {\r\n      // Check if this peak is too close to any already-selected stronger peak\r\n      let tooClose = false;\r\n      \r\n      for (const selectedPeak of filteredPeaks) {\r\n        // Use position-based distance (wavelength conversion will happen in the drawing code)\r\n        const distance = Math.abs(peak.position - selectedPeak.position);\r\n        \r\n        if (distance < minPositionDistance) {\r\n          tooClose = true;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      // Add the peak if it's not too close to any stronger peak\r\n      if (!tooClose) {\r\n        filteredPeaks.push(peak);\r\n        \r\n        // Stop if we have enough peaks\r\n        if (filteredPeaks.length >= count) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return filteredPeaks;\r\n  };\r\n  \r\n  // Draw the graph based on pixel data\r\n  const drawGraph = (data) => {\r\n    if (!canvasRef.current || !data) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    \r\n    // Clear the canvas\r\n    ctx.clearRect(0, 0, width, height);\r\n    \r\n    // Draw background\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n    ctx.fillRect(0, 0, width, height);\r\n    \r\n    // Draw grid lines\r\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n    ctx.lineWidth = 1;\r\n    \r\n    // Horizontal grid lines (at 25%, 50%, 75%)\r\n    for (let i = 1; i < 4; i++) {\r\n      const y = height * (i / 4);\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, y);\r\n      ctx.lineTo(width, y);\r\n      ctx.stroke();\r\n    }\r\n    \r\n    // Vertical grid lines (at 25%, 50%, 75%)\r\n    for (let i = 1; i < 4; i++) {\r\n      const x = width * (i / 4);\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, 0);\r\n      ctx.lineTo(x, height);\r\n      ctx.stroke();\r\n    }\r\n    \r\n    // Calculate min and max wavelength values for calibration upfront\r\n    let minWavelength, maxWavelength;\r\n    if (useCalibration && calibrationPoints.length >= 2) {\r\n      const wavelengths = calibrationPoints.map(p => p.wavelength);\r\n      minWavelength = Math.min(...wavelengths);\r\n      maxWavelength = Math.max(...wavelengths);\r\n    }\r\n    \r\n    // Set line styles for different channels\r\n    const styles = {\r\n      red: { color: 'rgba(255, 0, 0, 0.8)', width: 1.5 },\r\n      green: { color: 'rgba(0, 255, 0, 0.8)', width: 1.5 },\r\n      blue: { color: 'rgba(0, 0, 255, 0.8)', width: 1.5 },\r\n      intensity: { color: 'rgba(255, 255, 255, 0.8)', width: 2 }\r\n    };\r\n    \r\n    // Find max values for scaling\r\n    const maxRed = Math.max(...data.red, 1);\r\n    const maxGreen = Math.max(...data.green, 1);\r\n    const maxBlue = Math.max(...data.blue, 1);\r\n    const maxIntensity = Math.max(...data.intensity, 1);\r\n    \r\n    // Store the peak data for each displayed channel\r\n    const channelPeaks = {};\r\n    \r\n    // Plot each enabled channel\r\n    Object.entries(displayChannels).forEach(([channel, isEnabled]) => {\r\n      if (!isEnabled) return;\r\n      \r\n      const values = data[channel];\r\n      const maxValue = channel === 'red' ? maxRed : \r\n                      channel === 'green' ? maxGreen : \r\n                      channel === 'blue' ? maxBlue : maxIntensity;\r\n      \r\n      // Set line style\r\n      ctx.strokeStyle = styles[channel].color;\r\n      ctx.lineWidth = styles[channel].width;\r\n      \r\n      // Begin the path\r\n      ctx.beginPath();\r\n      \r\n      // Draw the line\r\n      for (let i = 0; i < values.length; i++) {\r\n        // Calculate x position, applying flip if enabled\r\n        let xPos = data.positions[i];\r\n        if (flipXAxis) {\r\n          xPos = 1 - xPos; // Invert position (0 becomes 1, 1 becomes 0)\r\n        }\r\n        \r\n        // Convert to pixel coordinates\r\n        const x = xPos * width;\r\n        \r\n        // Invert Y since canvas 0,0 is top-left\r\n        const y = height - (values[i] / maxValue) * height;\r\n        \r\n        if (i === 0) {\r\n          ctx.moveTo(x, y);\r\n        } else {\r\n          ctx.lineTo(x, y);\r\n        }\r\n      }\r\n      \r\n      // Draw the path\r\n      ctx.stroke();\r\n    });\r\n    \r\n    // Detect peaks for intensity channel only if enabled\r\n    if (showPeakMarkers && displayChannels.intensity) {\r\n      const intensityValues = data.intensity;\r\n      // Use original positions for peak detection\r\n      const peaks = findPeaks(intensityValues, data.positions, peakCount);\r\n      \r\n      // If calibration is enabled, perform additional wavelength-based filtering\r\n      if (useCalibration) {\r\n        // Convert positions to wavelengths and filter to ensure 10nm minimum distance\r\n        const wavelengthPeaks = [];\r\n        \r\n        // Process peaks in order of intensity (already sorted by findPeaks)\r\n        for (const peak of peaks) {\r\n          const peakWavelength = positionToWavelength(peak.position);\r\n          let tooClose = false;\r\n          \r\n          // Check if this peak is too close to any already selected peak\r\n          for (const selectedPeak of wavelengthPeaks) {\r\n            const selectedWavelength = positionToWavelength(selectedPeak.position);\r\n            const distance = Math.abs(peakWavelength - selectedWavelength);\r\n            \r\n            if (distance < 10) { // 10nm minimum distance\r\n              tooClose = true;\r\n              break;\r\n            }\r\n          }\r\n          \r\n          // Add the peak if it's not too close to any already selected peak\r\n          if (!tooClose) {\r\n            wavelengthPeaks.push(peak);\r\n          }\r\n        }\r\n        \r\n        channelPeaks['intensity'] = wavelengthPeaks;\r\n      } else {\r\n        channelPeaks['intensity'] = peaks;\r\n      }\r\n    }\r\n    \r\n    // Draw timestamp and status information\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n    ctx.font = '10px monospace';\r\n    ctx.textAlign = 'left';\r\n    \r\n    // Show time and accumulation status\r\n    const timeText = `Time: ${new Date(data.timestamp).toLocaleTimeString()}`;\r\n    const statusText = isAccumulating \r\n      ? `Accumulating: ${accumulatedFrames.length}/${frameAccumCount} frames` \r\n      : 'Live data';\r\n    \r\n    ctx.fillText(timeText, 5, 15);\r\n    ctx.fillText(statusText, width - 150, 15);\r\n    \r\n    // Draw calibration status if enabled\r\n    if (useCalibration) {\r\n      ctx.fillText('Calibrated', width - 150, 45);\r\n    }\r\n    \r\n    // Draw frame count if this is accumulated data\r\n    if (data.frameCount) {\r\n      ctx.fillText(`Summed ${data.frameCount} frames`, width - 150, 30);\r\n    }\r\n    \r\n    // Draw channel legend\r\n    const legendStartY = 30;\r\n    const legendSpacing = 15;\r\n    \r\n    if (displayChannels.red) {\r\n      ctx.fillStyle = styles.red.color;\r\n      ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)}`, 5, legendStartY);\r\n    }\r\n    \r\n    if (displayChannels.green) {\r\n      ctx.fillStyle = styles.green.color;\r\n      ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)}`, 5, legendStartY + legendSpacing);\r\n    }\r\n    \r\n    if (displayChannels.blue) {\r\n      ctx.fillStyle = styles.blue.color;\r\n      ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)}`, 5, legendStartY + legendSpacing * 2);\r\n    }\r\n    \r\n    if (displayChannels.intensity) {\r\n      ctx.fillStyle = styles.intensity.color;\r\n      ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)}`, 5, legendStartY + legendSpacing * 3);\r\n    }\r\n    \r\n    // Draw wavelength axis labels if calibration is enabled (unified section)\r\n    if (useCalibration && minWavelength !== undefined && maxWavelength !== undefined) {\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\r\n      ctx.font = '10px monospace';\r\n      ctx.textAlign = 'center';\r\n      \r\n      // Clear the bottom area where labels will go\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'; // Match background color\r\n      ctx.fillRect(0, height - 20, width, 20);\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'; // Reset text color\r\n      \r\n      // Draw axis labels at regular position intervals (0%, 25%, 50%, 75%, 100%)\r\n      // but show the corresponding wavelength values\r\n      for (let i = 0; i <= 4; i++) {\r\n        const position = i / 4; // Regular positions (0, 0.25, 0.5, 0.75, 1)\r\n        \r\n        // Apply flip if enabled\r\n        const displayPosition = flipXAxis ? 1 - position : position;\r\n        const x = displayPosition * width;\r\n        \r\n        // Convert position to wavelength using calibration\r\n        const wavelength = positionToWavelength(position);\r\n        \r\n        ctx.fillText(`${Math.round(wavelength)}nm`, x, height - 5);\r\n      }\r\n    }\r\n    \r\n    // Draw calibration points if enabled\r\n    if (useCalibration) {\r\n      calibrationPoints.forEach(point => {\r\n        // Apply flip if enabled\r\n        const displayPosition = flipXAxis ? 1 - point.position : point.position;\r\n        // Draw vertical line at calibration point position\r\n        const x = displayPosition * width;\r\n        \r\n        ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';\r\n        ctx.lineWidth = 1;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, height);\r\n        ctx.stroke();\r\n        \r\n        // Draw wavelength label at the calibration point\r\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\r\n        ctx.font = '10px monospace';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText(`${point.wavelength}nm`, x, height - 20); // Higher position to avoid overlap\r\n      });\r\n    }\r\n    \r\n    // Draw peak markers if enabled\r\n    if (showPeakMarkers) {\r\n      // Draw peaks for each enabled channel\r\n      Object.entries(channelPeaks).forEach(([channel, peaks]) => {\r\n        // Use the same color as the channel with increased opacity\r\n        const baseColor = styles[channel].color;\r\n        const markerColor = baseColor.replace('rgba', 'rgb').replace(/,\\s*[\\d.]+\\)/, ')');\r\n        \r\n        // Get max value for this channel for y-coordinate calculation\r\n        const maxValue = channel === 'red' ? maxRed : \r\n                        channel === 'green' ? maxGreen : \r\n                        channel === 'blue' ? maxBlue : maxIntensity;\r\n        \r\n        peaks.forEach(peak => {\r\n          // Get the original position\r\n          let xPos = peak.position;\r\n          \r\n          // Use refined position if available (within reasonable bounds)\r\n          if (peak.refinedPosition !== undefined) {\r\n            xPos = peak.refinedPosition;\r\n          }\r\n          \r\n          // Apply flip if enabled\r\n          if (flipXAxis) {\r\n            xPos = 1 - xPos;\r\n          }\r\n          \r\n          // Convert to pixel coordinates\r\n          const x = xPos * width;\r\n          const y = height - (peak.value / maxValue) * height;\r\n          \r\n          // Check if peak is near the top of the graph (below a minimum distance from top)\r\n          const isNearTop = y < 60; // 60px from top\r\n          \r\n          // Draw a vertical line first (always visible)\r\n          ctx.strokeStyle = markerColor;\r\n          ctx.setLineDash([2, 2]);\r\n          ctx.beginPath();\r\n          ctx.moveTo(x, y);\r\n          ctx.lineTo(x, height);\r\n          ctx.stroke();\r\n          ctx.setLineDash([]);\r\n          \r\n          // Draw marker at peak position (triangle pointing down or up based on position)\r\n          ctx.fillStyle = markerColor;\r\n          ctx.beginPath();\r\n          \r\n          if (isNearTop) {\r\n            // If near top, draw triangle pointing up from a position slightly below the peak\r\n            const markerY = y + 15;\r\n            ctx.moveTo(x, markerY);  \r\n            ctx.lineTo(x - 5, markerY + 10);\r\n            ctx.lineTo(x + 5, markerY + 10);\r\n          } else {\r\n            // Normal case - draw triangle pointing down\r\n            ctx.moveTo(x, y);  \r\n            ctx.lineTo(x - 5, y - 10);\r\n            ctx.lineTo(x + 5, y - 10);\r\n          }\r\n          ctx.closePath();\r\n          ctx.fill();\r\n          \r\n          // Prepare label text\r\n          let label;\r\n          if (useCalibration) {\r\n            const wavelength = positionToWavelength(peak.position);\r\n            label = `${wavelength.toFixed(1)}nm`;\r\n          } else {\r\n            label = `Pos: ${peak.position.toFixed(3)}`;\r\n          }\r\n          \r\n          const valueLabel = `I: ${peak.value.toFixed(1)}`;\r\n          \r\n          // Setup text rendering\r\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n          ctx.font = '10px monospace';\r\n          ctx.textAlign = 'center';\r\n          \r\n          // Measure text dimensions for backgrounds\r\n          const textWidth = ctx.measureText(label).width + 6;\r\n          const valueWidth = ctx.measureText(valueLabel).width + 6;\r\n          \r\n          if (isNearTop) {\r\n            // Draw position/wavelength label below the marker\r\n            const labelY = y + 30;\r\n            \r\n            // Draw text background\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\r\n            ctx.fillRect(x - textWidth/2, labelY - 10, textWidth, 16);\r\n            \r\n            // Draw label text\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n            ctx.fillText(label, x, labelY);\r\n            \r\n            // Draw value label below that\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\r\n            ctx.fillRect(x - valueWidth/2, labelY + 7, valueWidth, 16);\r\n            \r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n            ctx.fillText(valueLabel, x, labelY + 17);\r\n          } else {\r\n            // Standard label position above marker\r\n            // Draw text background for better readability\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\r\n            ctx.fillRect(x - textWidth/2, y - 25, textWidth, 16);\r\n            \r\n            // Draw label above marker\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n            ctx.fillText(label, x, y - 14);\r\n            \r\n            // Draw peak value\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\r\n            ctx.fillRect(x - valueWidth/2, y - 42, valueWidth, 16);\r\n            \r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n            ctx.fillText(valueLabel, x, y - 31);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    \r\n    // Draw crosshair at cursor position\r\n    if (showCrosshair && cursorPosition) {\r\n      const { x, y } = cursorPosition;\r\n      \r\n      if (x >= 0 && x <= width && y >= 0 && y <= height) {\r\n        // Draw vertical line\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\r\n        ctx.lineWidth = 1;\r\n        ctx.setLineDash([3, 3]); // Dashed line\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, height);\r\n        ctx.stroke();\r\n        \r\n        // Draw horizontal line\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(width, y);\r\n        ctx.stroke();\r\n        ctx.setLineDash([]); // Reset line style\r\n        \r\n        // Calculate and display wavelength at cursor position\r\n        const position = x / width; // Normalize cursor position (0-1)\r\n        \r\n        // Apply flip if needed to get the actual data position\r\n        const dataPosition = flipXAxis ? 1 - position : position;\r\n        \r\n        // Determine wavelength based on cursor position\r\n        let wavelength;\r\n        if (useCalibration) {\r\n          wavelength = positionToWavelength(dataPosition);\r\n        } else {\r\n          wavelength = dataPosition; // Just show the position value when not calibrated\r\n        }\r\n        \r\n        // Calculate y-values at the cursor position\r\n        let valueText = '';\r\n        \r\n        if (data && data.positions && data.positions.length > 0) {\r\n          // Find the nearest data point to the cursor\r\n          const positionIndex = findNearestPositionIndex(data.positions, dataPosition);\r\n          \r\n          // Build value text based on active channels\r\n          const channelTexts = [];\r\n          if (displayChannels.red) {\r\n            channelTexts.push(`R:${Math.round(data.red[positionIndex])}`);\r\n          }\r\n          if (displayChannels.green) {\r\n            channelTexts.push(`G:${Math.round(data.green[positionIndex])}`);\r\n          }\r\n          if (displayChannels.blue) {\r\n            channelTexts.push(`B:${Math.round(data.blue[positionIndex])}`);\r\n          }\r\n          if (displayChannels.intensity) {\r\n            channelTexts.push(`I:${data.intensity[positionIndex].toFixed(1)}`);\r\n          }\r\n          \r\n          valueText = channelTexts.join(', ');\r\n        }\r\n        \r\n        // Create a background for the text for better readability\r\n        const wavelengthText = useCalibration ? `${wavelength.toFixed(1)}nm` : `Pos: ${wavelength.toFixed(3)}`;\r\n        \r\n        // Draw text background\r\n        const textWidth = ctx.measureText(wavelengthText).width + 10;\r\n        const valueTextWidth = ctx.measureText(valueText).width + 10;\r\n        \r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        ctx.fillRect(x - textWidth/2, height - 45, textWidth, 20);\r\n        \r\n        if (valueText) {\r\n          ctx.fillRect(x - valueTextWidth/2, 5, valueTextWidth, 20);\r\n        }\r\n        \r\n        // Draw wavelength text below cursor\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText(wavelengthText, x, height - 30);\r\n        \r\n        // Draw value text above cursor\r\n        if (valueText) {\r\n          ctx.fillText(valueText, x, 20);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Helper to find the index of the nearest position value to a given position\r\n  const findNearestPositionIndex = (positions, targetPosition) => {\r\n    if (!positions || positions.length === 0) return -1;\r\n    \r\n    let nearestIndex = 0;\r\n    let minDistance = Math.abs(positions[0] - targetPosition);\r\n    \r\n    for (let i = 1; i < positions.length; i++) {\r\n      const distance = Math.abs(positions[i] - targetPosition);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        nearestIndex = i;\r\n      }\r\n    }\r\n    \r\n    return nearestIndex;\r\n  };\r\n  \r\n  // Toggle display of a specific channel\r\n  const toggleChannel = (channel) => {\r\n    setDisplayChannels(prev => ({\r\n      ...prev,\r\n      [channel]: !prev[channel]\r\n    }));\r\n  };\r\n  \r\n  // Handle mouse movement over the graph\r\n  const handleMouseMove = (e) => {\r\n    if (!graphContainerRef.current) return;\r\n    \r\n    // Get canvas bounds\r\n    const rect = graphContainerRef.current.getBoundingClientRect();\r\n    \r\n    // Calculate cursor position relative to canvas\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n    \r\n    // Update cursor position state\r\n    setCursorPosition({ x, y });\r\n    \r\n    // Redraw the graph with crosshair\r\n    if (isAccumulating && accumulatedData) {\r\n      drawGraph(accumulatedData);\r\n    } else if (graphData) {\r\n      drawGraph(graphData);\r\n    }\r\n  };\r\n  \r\n  // Handle mouse enter/leave events\r\n  const handleMouseEnter = () => {\r\n    setShowCrosshair(true);\r\n  };\r\n  \r\n  const handleMouseLeave = () => {\r\n    setShowCrosshair(false);\r\n    setCursorPosition(null);\r\n    \r\n    // Redraw the graph without crosshair\r\n    if (isAccumulating && accumulatedData) {\r\n      drawGraph(accumulatedData);\r\n    } else if (graphData) {\r\n      drawGraph(graphData);\r\n    }\r\n  };\r\n  \r\n  // Similar resize functionality as before\r\n  const handleResizeStart = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    // Get initial coordinates and size\r\n    const startX = e.clientX;\r\n    const startY = e.clientY;\r\n    const startWidth = graphContainerRef.current?.clientWidth || 400;\r\n    const startHeight = graphContainerRef.current?.clientHeight || graphSize.height;\r\n    \r\n    // Show resize feedback\r\n    setIsResizing(true);\r\n    setShowResizeInfo(true);\r\n    \r\n    // Define move handler\r\n    function handleMouseMove(moveEvent) {\r\n      const deltaY = moveEvent.clientY - startY;\r\n      \r\n      // Only adjust height, keep width as 100%\r\n      const newHeight = Math.max(100, startHeight + deltaY);\r\n      \r\n      // Update graph size\r\n      const newSize = {\r\n        width: '100%',  // Keep width as 100% for responsive behavior\r\n        height: Math.round(newHeight)\r\n      };\r\n      \r\n      setGraphSize(newSize);\r\n      \r\n      // Notify parent if needed\r\n      if (onResize) {\r\n        onResize(newSize);\r\n      }\r\n      \r\n      // Prevent default to avoid text selection during resize\r\n      moveEvent.preventDefault();\r\n    }\r\n    \r\n    // Define up handler\r\n    function handleMouseUp() {\r\n      // Clean up\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseup', handleMouseUp);\r\n      \r\n      setIsResizing(false);\r\n      setTimeout(() => setShowResizeInfo(false), 800);\r\n    }\r\n    \r\n    // Attach handlers to document to capture events outside component\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n  };\r\n  \r\n  // Export settings to JSON file\r\n  const exportSettings = () => {\r\n    try {\r\n      // Create settings object with all necessary parameters\r\n      const settings = {\r\n        // Calibration settings\r\n        calibration: {\r\n          points: calibrationPoints,\r\n          useCalibration: useCalibration,\r\n          flipXAxis: flipXAxis,\r\n          showCalibration: showCalibration\r\n        },\r\n        // Display settings\r\n        display: {\r\n          channels: displayChannels,\r\n          graphSize: graphSize\r\n        },\r\n        // Frame accumulation settings\r\n        accumulation: {\r\n          frameAccumCount: frameAccumCount,\r\n          isAccumulating: isAccumulating\r\n        },\r\n        // Peak marker settings\r\n        peaks: {\r\n          showPeakMarkers: showPeakMarkers,\r\n          peakCount: peakCount\r\n        },\r\n        // Export settings\r\n        export: {\r\n          filePrefix: filePrefix,\r\n          includeDateInFilename: includeDateInFilename\r\n        },\r\n        // Add timestamp for reference\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      // Convert to JSON string with nice formatting\r\n      const jsonString = JSON.stringify(settings, null, 2);\r\n      \r\n      // Create file name with timestamp\r\n      const now = new Date();\r\n      const timestamp = now.getFullYear() +\r\n        String(now.getMonth() + 1).padStart(2, '0') +\r\n        String(now.getDate()).padStart(2, '0') + '_' +\r\n        String(now.getHours()).padStart(2, '0') +\r\n        String(now.getMinutes()).padStart(2, '0');\r\n        \r\n      const fileName = `spectrometer_settings_${timestamp}.json`;\r\n      \r\n      // Create blob and download\r\n      const blob = new Blob([jsonString], { type: 'application/json' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = fileName;\r\n      \r\n      // Trigger download\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // Cleanup\r\n      setTimeout(() => {\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n      }, 100);\r\n      \r\n      // Show success message\r\n      setSaveMessage(`Settings exported as ${fileName}`);\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to export settings:', error);\r\n      setSaveMessage('Error exporting settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Export graph data as text file\r\n  const exportGraphData = () => {\r\n    // Make sure we have data to export\r\n    const dataToExport = isAccumulating ? accumulatedData : graphData;\r\n    \r\n    if (!dataToExport) {\r\n      console.warn('No data to export');\r\n      if (props.onMessage) {\r\n        props.onMessage('No data to export');\r\n      }\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const lines = [];\r\n      // Create a timestamp string in format YYYYMMDDhhmmss\r\n      const now = new Date();\r\n      const timestamp = now.getFullYear() +\r\n        String(now.getMonth() + 1).padStart(2, '0') +\r\n        String(now.getDate()).padStart(2, '0') +\r\n        String(now.getHours()).padStart(2, '0') +\r\n        String(now.getMinutes()).padStart(2, '0') +\r\n        String(now.getSeconds()).padStart(2, '0');\r\n        \r\n      lines.push(timestamp);\r\n      // Add information on calibration points\r\n\r\n      // Add column headers as first line\r\n      const headers = useCalibration ? \r\n        \"Wavelength (nm);Intensity;Red;Green;Blue\" : \r\n        \"Position;Intensity;Red;Green;Blue\";\r\n      lines.push(headers);\r\n      \r\n      // Loop through data points\r\n      for (let i = 0; i < dataToExport.positions.length; i++) {\r\n        let position = dataToExport.positions[i];\r\n        // Convert position to wavelength if calibration is enabled\r\n        let wavelength = position;\r\n        if (useCalibration) {\r\n          wavelength = positionToWavelength(position);\r\n        }\r\n        \r\n        // Get all channel values\r\n        const intensity = dataToExport.intensity[i];\r\n        const red = dataToExport.red[i];\r\n        const green = dataToExport.green[i];\r\n        const blue = dataToExport.blue[i];\r\n        \r\n        // Add line with all values\r\n        lines.push(`${wavelength.toFixed(3)};${intensity.toFixed(2)};${red.toFixed(2)};${green.toFixed(2)};${blue.toFixed(2)}`);\r\n      }\r\n      \r\n      // Join lines with newlines\r\n      const content = lines.join('\\n');\r\n      \r\n      \r\n      \r\n      // Create filename with prefix and optional timestamp\r\n      const fileName = includeDateInFilename ? \r\n        `${filePrefix}_${timestamp}.txt` : \r\n        `${filePrefix}.txt`;\r\n      \r\n      // Create Blob with content\r\n      const blob = new Blob([content], { type: 'text/plain' });\r\n      \r\n      // Create download link\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = fileName;\r\n      \r\n      // Append to document, click, and remove\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // Clean up\r\n      setTimeout(() => {\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n      }, 100);\r\n      \r\n      // Show success message\r\n      if (props.onMessage) {\r\n        props.onMessage(`Data exported as ${fileName}`);\r\n      } else {\r\n        // If no message handler provided, show alert\r\n        console.log(`Data exported as ${fileName}`);\r\n        setSaveMessage && setSaveMessage(`Data exported as ${fileName}`);\r\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to export graph data:', error);\r\n      if (props.onMessage) {\r\n        props.onMessage('Error exporting data');\r\n      } else {\r\n        setSaveMessage && setSaveMessage('Error exporting data');\r\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Load saved camera and calibration settings\r\n  const loadSettings = () => {\r\n    // fill this gap\r\n  };\r\n  \r\n  // Handle peak count change\r\n  const handlePeakCountChange = (e) => {\r\n    const count = parseInt(e.target.value);\r\n    if (!isNaN(count) && count >= 0 && count <= 10) {\r\n      setPeakCount(count);\r\n    }\r\n  };\r\n  \r\n  // Toggle peak markers\r\n  const togglePeakMarkers = () => {\r\n    setShowPeakMarkers(!showPeakMarkers);\r\n  };\r\n  \r\n  const styles = {\r\n    container: {\r\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\r\n      padding: '10px',\r\n      borderRadius: '4px',\r\n      position: 'relative',\r\n      border: isResizing ? '1px dashed #4CAF50' : 'none',\r\n    },\r\n    title: {\r\n      margin: '0 0 10px 0',\r\n      fontSize: '14px',\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center'\r\n    },\r\n    controls: {\r\n      display: 'flex',\r\n      gap: '5px',\r\n      alignItems: 'center',\r\n    },\r\n    frameCountControl: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginBottom: '10px',\r\n      gap: '8px'\r\n    },\r\n    frameCountLabel: {\r\n      fontSize: '12px',\r\n      color: 'rgba(255, 255, 255, 0.8)'\r\n    },\r\n    frameCountInput: {\r\n      width: '50px',\r\n      padding: '2px 4px',\r\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\r\n      color: 'white',\r\n      border: '1px solid rgba(80, 80, 80, 0.5)',\r\n      borderRadius: '3px',\r\n      fontSize: '12px'\r\n    },\r\n    calibrationContainer: {\r\n      marginBottom: '10px',\r\n      padding: '8px',\r\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n      borderRadius: '4px'\r\n    },\r\n    calibrationHeader: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center',\r\n      marginBottom: '8px'\r\n    },\r\n    calibrationTitle: {\r\n      fontSize: '12px',\r\n      color: 'rgba(255, 255, 255, 0.9)',\r\n      margin: 0\r\n    },\r\n    calibrationCheckbox: {\r\n      marginLeft: '8px'\r\n    },\r\n    calibrationPoints: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      gap: '6px'\r\n    },\r\n    calibrationPoint: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center',\r\n      gap: '6px'\r\n    },\r\n    calibrationLabel: {\r\n      fontSize: '11px',\r\n      color: 'rgba(255, 255, 255, 0.7)',\r\n      width: '40px'\r\n    },\r\n    calibrationInput: {\r\n      width: '60px',\r\n      padding: '2px 4px',\r\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\r\n      color: 'white',\r\n      border: '1px solid rgba(80, 80, 80, 0.5)',\r\n      borderRadius: '3px',\r\n      fontSize: '11px'\r\n    },\r\n    graphView: {\r\n      width: graphSize.width,\r\n      height: `${graphSize.height}px`,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      position: 'relative',\r\n      overflow: 'hidden'\r\n    },\r\n    canvas: {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: 0,\r\n      width: '100%',\r\n      height: '100%'\r\n    },\r\n    resizeHandle: {\r\n      position: 'absolute',\r\n      bottom: '0',\r\n      right: '0',\r\n      width: '20px',\r\n      height: '20px',\r\n      cursor: 'ns-resize', // Only allow vertical resizing\r\n      zIndex: 100,\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\r\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\r\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\r\n      borderTopLeftRadius: '4px',\r\n    },\r\n    resizeInfo: {\r\n      position: 'absolute',\r\n      right: '25px',\r\n      bottom: '25px',\r\n      padding: '2px 6px',\r\n      background: 'rgba(0, 0, 0, 0.7)',\r\n      color: 'white',\r\n      borderRadius: '3px',\r\n      fontSize: '11px',\r\n      zIndex: 100\r\n    },\r\n    channelToggles: {\r\n      display: 'flex',\r\n      gap: '5px'\r\n    },\r\n    channelButton: {\r\n      fontSize: '10px',\r\n      padding: '2px 5px',\r\n      borderRadius: '3px',\r\n      cursor: 'pointer',\r\n      border: '1px solid rgba(255, 255, 255, 0.3)',\r\n      backgroundColor: 'rgba(30, 30, 30, 0.7)'\r\n    },\r\n    noData: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      height: '100%',\r\n      color: 'rgba(255, 255, 255, 0.5)',\r\n      fontSize: '12px'\r\n    }\r\n  };\r\n  \r\n  // Return the component JSX\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.title}>\r\n        <h3 style={{ margin: 0 }}>Intensity Graph</h3>\r\n        <div style={styles.channelToggles}>\r\n          <button \r\n            style={{\r\n              ...styles.channelButton,\r\n              color: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.4)',\r\n              borderColor: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.2)'\r\n            }}\r\n            onClick={() => toggleChannel('red')}\r\n          >\r\n            R\r\n          </button>\r\n          <button \r\n            style={{\r\n              ...styles.channelButton,\r\n              color: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.4)',\r\n              borderColor: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.2)'\r\n            }}\r\n            onClick={() => toggleChannel('green')}\r\n          >\r\n            G\r\n          </button>\r\n          <button \r\n            style={{\r\n              ...styles.channelButton,\r\n              color: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.4)',\r\n              borderColor: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.2)'\r\n            }}\r\n            onClick={() => toggleChannel('blue')}\r\n          >\r\n            B\r\n          </button>\r\n          <button \r\n            style={{\r\n              ...styles.channelButton,\r\n              color: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.4)',\r\n              borderColor: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.2)'\r\n            }}\r\n            onClick={() => toggleChannel('intensity')}\r\n          >\r\n            I\r\n          </button>\r\n          <button \r\n            style={{\r\n              ...styles.channelButton,\r\n              color: 'rgb(255, 255, 100)',\r\n              borderColor: showCalibration ? 'rgb(255, 255, 100)' : 'rgba(255, 255, 100, 0.2)',\r\n              backgroundColor: showCalibration ? 'rgba(60, 60, 0, 0.6)' : 'rgba(30, 30, 30, 0.7)'\r\n            }}\r\n            onClick={toggleCalibration}\r\n            title=\"Toggle calibration controls\"\r\n          >\r\n            Cal\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={styles.frameCountControl}>\r\n        <div style={styles.frameCountLabel}>Frame accumulation:</div>\r\n        <input \r\n          type=\"number\" \r\n          min=\"1\" \r\n          max=\"2000\"\r\n          value={frameAccumCount}\r\n          onChange={handleFrameCountChange}\r\n          style={styles.frameCountInput}\r\n        />\r\n        <button \r\n          style={{\r\n            ...buttonVariants.smallIconButton,\r\n            backgroundColor: isAccumulating ? 'rgba(255, 165, 0, 0.7)' : undefined\r\n          }}\r\n          onClick={toggleAccumulation}\r\n          title={isAccumulating ? \"Switch to live data\" : \"Switch to frame accumulation\"}\r\n        >\r\n          {isAccumulating ? \"Accumulating\" : \"Live\"}\r\n        </button>\r\n\r\n        {/*button that pauses graph*/}\r\n        \r\n        {/* Peak markers control */}\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          gap: '5px',\r\n          marginLeft: '20px',\r\n          borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\r\n          paddingLeft: '10px'\r\n        }}>\r\n          <div style={styles.frameCountLabel}>Peak markers:</div>\r\n          <input \r\n            type=\"number\" \r\n            min=\"0\" \r\n            max=\"10\"\r\n            value={peakCount}\r\n            onChange={handlePeakCountChange}\r\n            style={styles.frameCountInput}\r\n            title=\"Number of peak markers to display\"\r\n          />\r\n          <button \r\n            style={{\r\n              ...buttonVariants.smallIconButton,\r\n              backgroundColor: showPeakMarkers ? 'rgba(120, 120, 220, 0.7)' : undefined\r\n            }}\r\n            onClick={togglePeakMarkers}\r\n            title={showPeakMarkers ? \"Hide peak markers\" : \"Show peak markers\"}\r\n          >\r\n            {showPeakMarkers ? \"Peaks On\" : \"Peaks Off\"}\r\n          </button>\r\n        </div>\r\n        \r\n        {/* Add export controls */}\r\n        <div style={{ display: 'flex', marginLeft: 'auto', alignItems: 'center', gap: '5px' }}>\r\n          <input\r\n            type=\"text\"\r\n            value={filePrefix}\r\n            onChange={(e) => setFilePrefix(e.target.value)}\r\n            placeholder=\"File prefix\"\r\n            style={{\r\n              ...styles.frameCountInput,\r\n              width: '100px'\r\n            }}\r\n            title=\"Prefix for the exported data filename\"\r\n          />\r\n          <label style={{ \r\n            fontSize: '11px', \r\n            color: 'rgba(255, 255, 255, 0.7)', \r\n            display: 'flex', \r\n            alignItems: 'center',\r\n            gap: '3px',\r\n            marginRight: '5px'\r\n          }}>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={includeDateInFilename}\r\n              onChange={(e) => setIncludeDateInFilename(e.target.checked)}\r\n              style={{ margin: 0 }}\r\n            />\r\n            Date\r\n          </label>\r\n          <button\r\n            style={{\r\n              ...buttonVariants.smallSecondary,\r\n              backgroundColor: 'rgba(20, 120, 220, 0.7)'\r\n            }}\r\n            onClick={exportGraphData}\r\n            title=\"Export graph data as text file\"\r\n            disabled={!graphData && !accumulatedData}\r\n          >\r\n            💾 Export Data\r\n          </button>\r\n          \r\n          {saveMessage && (\r\n            <span style={{\r\n              fontSize: '11px',\r\n              backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n              padding: '2px 6px',\r\n              borderRadius: '3px',\r\n              marginLeft: '5px',\r\n              color: 'rgba(255, 255, 255, 0.9)'\r\n            }}>\r\n              {saveMessage}\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {showCalibration && (\r\n        <div style={styles.calibrationContainer}>\r\n          <div style={styles.calibrationHeader}>\r\n            <h4 style={styles.calibrationTitle}>Wavelength Calibration</h4>\r\n            <div>\r\n              <label style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)' }}>\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={useCalibration}\r\n                  onChange={toggleUseCalibration}\r\n                  style={styles.calibrationCheckbox}\r\n                />\r\n                Use Calibration\r\n              </label>\r\n            </div>\r\n          </div>\r\n          \r\n          <div style={styles.calibrationPoints}>\r\n            {calibrationPoints.map((point, index) => (\r\n              <div key={index} style={styles.calibrationPoint}>\r\n                <div style={styles.calibrationLabel}>Point {index+1}:</div>\r\n                <div>\r\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginRight: '4px' }}>Pos:</span>\r\n                  <input \r\n                    type=\"number\" \r\n                    min=\"0\" \r\n                    max=\"1\" \r\n                    step=\"0.0001\"\r\n                    value={point.position}\r\n                    onChange={(e) => updateCalibrationPoint(index, 'position', e.target.value)}\r\n                    style={styles.calibrationInput}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginRight: '4px' }}>λ:</span>\r\n                  <input \r\n                    type=\"number\" \r\n                    min=\"200\" \r\n                    max=\"1200\" \r\n                    step=\"0.01\"\r\n                    value={point.wavelength}\r\n                    onChange={(e) => updateCalibrationPoint(index, 'wavelength', e.target.value)}\r\n                    style={styles.calibrationInput}\r\n                  />\r\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginLeft: '2px' }}>nm</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            \r\n            <div style={{ marginTop: '8px', display: 'flex', alignItems: 'center' }}>\r\n              <label style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', display: 'flex', alignItems: 'center' }}>\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={flipXAxis}\r\n                  onChange={toggleFlipXAxis}\r\n                  style={{ marginRight: '5px' }}\r\n                />\r\n                Flip X-Axis\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      <div \r\n        ref={graphContainerRef}\r\n        style={styles.graphView}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n      >\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={styles.canvas}\r\n        />\r\n        \r\n        {!graphData && !accumulatedData && (\r\n          <div style={styles.noData}>\r\n            Draw a line on the camera feed to see intensity data\r\n          </div>\r\n        )}\r\n        \r\n        {/* Resize info overlay */}\r\n        {showResizeInfo && (\r\n          <div style={styles.resizeInfo}>\r\n            Height: {graphSize.height}px\r\n          </div>\r\n        )}\r\n        \r\n        {/* Resize handle */}\r\n        <div \r\n          style={styles.resizeHandle}\r\n          onMouseDown={handleResizeStart}\r\n          title=\"Resize graph height\"\r\n        >\r\n          <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\">\r\n            <path \r\n              d=\"M2,6 L10,6 M2,9 L10,9\" \r\n              stroke=\"white\" \r\n              strokeWidth=\"1.5\"\r\n              strokeLinecap=\"round\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n// Add display name for debugging\r\nGraphComponent.displayName = 'GraphComponent';\r\n\r\nexport default GraphComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}