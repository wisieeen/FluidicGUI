{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\SpectrometerMQTT\\\\MQTTCameraComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\nimport { WS_URL } from '../../../config';\nimport floatingComponentStyles from '../../../styles/FloatingComponentStyles';\nimport spectralConfig from './spectral_config.json'; // Import the spectral config\n\n// Define local styles for the crop functionality\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cropStyles = {\n  cropControls: {\n    marginTop: '10px',\n    padding: '8px',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderRadius: '4px'\n  },\n  cropTitle: {\n    fontSize: '14px',\n    margin: '0 0 8px 0',\n    fontWeight: 'bold'\n  },\n  cropInputGroup: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '8px',\n    gap: '8px'\n  },\n  cropLabel: {\n    width: '50px',\n    fontSize: '14px',\n    color: '#ccc'\n  },\n  cropInput: {\n    width: '60px',\n    backgroundColor: 'rgba(60, 60, 60, 0.7)',\n    border: '1px solid rgba(100, 100, 100, 0.5)',\n    borderRadius: '4px',\n    padding: '4px 8px',\n    color: 'white',\n    fontSize: '14px'\n  },\n  cropHint: {\n    fontSize: '12px',\n    color: '#999',\n    marginLeft: '8px'\n  },\n  cropButtonGroup: {\n    display: 'flex',\n    gap: '8px',\n    marginTop: '8px',\n    flexWrap: 'wrap'\n  },\n  checkboxGroup: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: '12px',\n    marginTop: '8px'\n  },\n  checkboxLabel: {\n    display: 'flex',\n    alignItems: 'center',\n    fontSize: '14px',\n    color: '#ccc',\n    userSelect: 'none',\n    cursor: 'pointer'\n  },\n  checkbox: {\n    marginRight: '5px'\n  },\n  cropPreviewContainer: {\n    marginTop: '10px',\n    padding: '8px',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderRadius: '4px',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  cropPreviewImage: {\n    width: '100%',\n    height: 'auto',\n    borderRadius: '4px',\n    marginTop: '8px'\n  },\n  cropPreviewPlaceholder: {\n    height: '120px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.2)',\n    borderRadius: '4px',\n    color: '#666',\n    marginTop: '8px'\n  }\n};\n\n// Add the crop styles to floatingComponentStyles\nif (floatingComponentStyles) {\n  Object.assign(floatingComponentStyles, cropStyles);\n} else {\n  console.error(\"floatingComponentStyles is undefined\");\n}\n\n// Constants for settings\nconst SETTINGS_STORAGE_KEY = 'fluidicgui_settings';\nconst MIN_LINE_LENGTH = 10; // Minimum length in pixels for a valid line\nconst MIN_CROP_SIZE = 1; // Minimum crop rectangle size\n\n// Helper function to get settings from localStorage\nconst getSettingsFromStorage = () => {\n  try {\n    const settings = localStorage.getItem(SETTINGS_STORAGE_KEY);\n    return settings ? JSON.parse(settings) : {\n      mqttBroker: 'localhost',\n      port: '1883'\n    };\n  } catch (error) {\n    console.error('Error reading settings from localStorage:', error);\n    return {\n      mqttBroker: 'localhost',\n      port: '1883'\n    };\n  }\n};\nconst MQTTCameraComponent = /*#__PURE__*/_s(/*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    onResize,\n    detectorId\n  } = props;\n  const buttonVariants = useButtonStyles();\n\n  // Camera view state\n  const [cameraSize, setCameraSize] = useState({\n    width: 640,\n    height: 480\n  });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [imageAspectRatio, setImageAspectRatio] = useState(640 / 480);\n\n  // MQTT connection state\n  const [mqttTopic, setMqttTopic] = useState(detectorId || 'spectrometer_1');\n  const [mqttClient, setMqttClient] = useState(null);\n  const [isMqttConnected, setIsMqttConnected] = useState(false);\n  const [lastMqttResponse, setLastMqttResponse] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [pollingInterval, setPollingInterval] = useState(500);\n  const intervalRef = useRef(null);\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n  const [isWaitingForCropResponse, setIsWaitingForCropResponse] = useState(false);\n\n  // Camera operation state\n  const [isCameraActive, setIsCameraActive] = useState(false);\n  const [showAdvancedCapabilities, setShowAdvancedCapabilities] = useState(false);\n  const [cameraCapabilities, setCameraCapabilities] = useState(null);\n  const [exposureMode, setExposureMode] = useState('continuous');\n\n  // Line drawing state\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentLine, setCurrentLine] = useState(null);\n  const [isLineDrawn, setIsLineDrawn] = useState(false);\n\n  // Line adjustment state\n  const [lineYOffset, setLineYOffset] = useState(0);\n  const [lineXOffset, setLineXOffset] = useState(0);\n  const [originalLineStart, setOriginalLineStart] = useState({\n    x: 0,\n    y: 0\n  });\n  const [originalLineEnd, setOriginalLineEnd] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // Crop frame state\n  const [isCropMode, setIsCropMode] = useState(false);\n  const [isDrawingCrop, setIsDrawingCrop] = useState(false);\n  const [cropStart, setCropStart] = useState(null);\n  const [cropEnd, setCropEnd] = useState(null);\n  const [cropRange, setCropRange] = useState([0, 0, 0, 0]); // [x_min, y_min, x_max, y_max]\n  const [cropInterval, setCropInterval] = useState(0);\n  const [isCropStreaming, setIsCropStreaming] = useState(false);\n  const [cropPreviewImage, setCropPreviewImage] = useState(null);\n  const cropIntervalRef = useRef(null);\n\n  // Camera settings\n  const [cameraResolution, setCameraResolution] = useState('640x480');\n  const [showConfigMenu, setShowConfigMenu] = useState(false);\n  const [cameraConfig, setCameraConfig] = useState({\n    camera: {\n      exposure_time: null,\n      exposure_mode: 'auto',\n      iso: null\n    },\n    processing: {\n      roi: [0, 0, 1280, 720]\n    }\n  });\n  const [pendingConfig, setPendingConfig] = useState(null);\n\n  // Refs\n  const cameraContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n  const animationRequestRef = useRef(null);\n  const lastLineUpdateTimeRef = useRef(null);\n  const calibrationRef = useRef({\n    calibrationPoints: []\n  }); // Store calibration points\n  const videoRef = useRef(null);\n  const mqttClientRef = useRef(null);\n\n  // MQTT settings\n  const [mqttSettings, setMqttSettings] = useState(() => {\n    const savedSettings = getSettingsFromStorage();\n    return {\n      host: savedSettings.mqttBroker || 'localhost',\n      port: savedSettings.port || 1883,\n      protocol: 'ws',\n      clientId: `fluidic_gui_${Math.random().toString(16).substr(2, 8)}`\n    };\n  });\n\n  // Effects to reload settings if they change in localStorage\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const savedSettings = getSettingsFromStorage();\n      setMqttSettings(prev => ({\n        ...prev,\n        host: savedSettings.mqttBroker || prev.host,\n        port: savedSettings.port || prev.port\n      }));\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n  const [availableResolutions, setAvailableResolutions] = useState(['640x480', '800x600', '1024x768', '1280x960']);\n  const [lastPublishedMessage, setLastPublishedMessage] = useState(null);\n  const [lastReceivedMessage, setLastReceivedMessage] = useState(null);\n  const [debugMode, setDebugMode] = useState(true);\n\n  // Debug log for detectorId\n  console.log('[MQTTCameraComponent] Initialized with detectorId:', detectorId);\n\n  // Debug log when mqttTopic changes\n  useEffect(() => {\n    console.log('[MQTTCameraComponent] MQTT topic set to:', mqttTopic);\n  }, [mqttTopic]);\n\n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    // Get current camera settings\n    getSettings: () => {\n      return {\n        mqttTopic: mqttTopic,\n        pollingInterval: pollingInterval,\n        mqttBroker: mqttSettings,\n        resolution: cameraResolution,\n        // Line drawing settings\n        isLineDrawn: isLineDrawn,\n        lineStart: originalLineStart,\n        lineEnd: originalLineEnd,\n        lineYOffset: lineYOffset,\n        lineXOffset: lineXOffset,\n        // Crop settings\n        cropRange: cropRange,\n        cropInterval: cropInterval\n      };\n    },\n    // Get just the crop frame settings\n    getCropSettings: () => {\n      return {\n        cropRange: cropRange,\n        cropInterval: cropInterval,\n        isCropMode: isCropMode,\n        isCropStreaming: isCropStreaming,\n        streamImage: streamCropImage,\n        toGraph: cropToGraph\n      };\n    },\n    // Apply crop settings from saved config\n    applyCropSettings: settings => {\n      if (!settings) return false;\n      try {\n        // Apply crop range settings\n        if (settings.cropRange && Array.isArray(settings.cropRange) && settings.cropRange.length === 4) {\n          setCropRange(settings.cropRange);\n\n          // If crop range is valid (not all zeros), enable crop mode\n          if (settings.cropRange.some(val => val !== 0)) {\n            setIsCropMode(true);\n          }\n        }\n\n        // Apply crop interval\n        if (typeof settings.cropInterval === 'number') {\n          setCropInterval(settings.cropInterval);\n        }\n\n        // Apply stream image setting if available\n        if (typeof settings.streamImage === 'boolean') {\n          setStreamCropImage(settings.streamImage);\n        }\n\n        // Apply to graph setting if available\n        if (typeof settings.toGraph === 'boolean') {\n          setCropToGraph(settings.toGraph);\n        }\n\n        // Apply crop streaming state if explicitly set\n        if (typeof settings.isCropStreaming === 'boolean' && settings.isCropStreaming) {\n          // Only start streaming if we have a valid crop range and mqtt is connected\n          if (cropRange.some(val => val !== 0) && isMqttConnected) {\n            // Wait for next tick to ensure crop range is updated\n            setTimeout(() => {\n              startCropStreaming();\n            }, 500);\n          }\n        }\n        return true;\n      } catch (error) {\n        console.error('Error applying crop settings:', error);\n        return false;\n      }\n    },\n    // Expose startCamera method to parent\n    startCamera: async () => {\n      if (!isCameraActive) {\n        return connectToMqttAndStartStreaming();\n      }\n      return Promise.resolve(false);\n    },\n    // Apply saved camera settings\n    applySettings: async settings => {\n      if (!settings) return false;\n\n      // Disconnect and reconnect if topic changes\n      let shouldReconnect = false;\n      if (settings.mqttTopic && settings.mqttTopic !== mqttTopic) {\n        setMqttTopic(settings.mqttTopic);\n        shouldReconnect = true;\n      }\n      try {\n        // Apply MQTT settings if provided\n        if (settings.pollingInterval) {\n          setPollingInterval(settings.pollingInterval);\n        }\n\n        // Apply resolution\n        if (settings.resolution) {\n          setCameraResolution(settings.resolution);\n\n          // Parse the resolution into width and height\n          const [width, height] = settings.resolution.split('x').map(Number);\n\n          // Update camera size based on resolution\n          setCameraSize({\n            width,\n            height\n          });\n\n          // Update aspect ratio\n          if (width && height) {\n            setImageAspectRatio(width / height);\n          }\n        }\n\n        // Apply crop settings if available\n        if (settings.cropRange && Array.isArray(settings.cropRange) && settings.cropRange.length === 4) {\n          setCropRange(settings.cropRange);\n\n          // Enable crop mode if we have a valid crop range\n          if (settings.cropRange.some(val => val !== 0)) {\n            setIsCropMode(true);\n          }\n        }\n        if (typeof settings.cropInterval === 'number') {\n          setCropInterval(settings.cropInterval);\n        }\n\n        // Apply stream image setting if available\n        if (typeof settings.streamImage === 'boolean') {\n          setStreamCropImage(settings.streamImage);\n        }\n\n        // Apply to graph setting if available\n        if (typeof settings.toGraph === 'boolean') {\n          setCropToGraph(settings.toGraph);\n        }\n\n        // If camera is not active OR if topic changed, start/restart connection\n        if (!isCameraActive || shouldReconnect) {\n          if (isCameraActive) {\n            disconnectFromMqtt(); // Disconnect first if topic changed\n            await new Promise(resolve => setTimeout(resolve, 500)); // Wait for disconnect\n          }\n          // Short delay to allow state update\n          setTimeout(() => connectToMqttAndStartStreaming(), 100);\n\n          // Wait for camera to start before continuing\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        // After camera settings are applied, handle line drawing settings\n        if (settings.isLineDrawn && settings.lineStart && settings.lineEnd) {\n          // Set original line points\n          setOriginalLineStart(settings.lineStart);\n          setOriginalLineEnd(settings.lineEnd);\n\n          // Set current line points (will be adjusted by offset/rotation later)\n          setCurrentLine(settings);\n\n          // Mark line as drawn\n          setIsLineDrawn(true);\n\n          // Apply line adjustments\n          if (settings.lineYOffset !== undefined) {\n            setLineYOffset(settings.lineYOffset);\n          }\n          if (settings.lineXOffset !== undefined) {\n            setLineXOffset(settings.lineXOffset);\n          }\n\n          // Send the loaded line to the backend immediately\n          // Use a timeout to ensure connection is established after potential restart\n          setTimeout(() => {\n            const finalLine = calculateTransformedLinePosition(settings.lineStart, settings.lineEnd, settings.lineYOffset, settings.lineXOffset);\n            sendLineUpdate(finalLine);\n            redrawCanvas(); // Redraw with the loaded line\n          }, 1500); // Increased delay to ensure connection\n        }\n        return true;\n      } catch (error) {\n        console.error('Error applying camera settings:', error);\n        return false;\n      }\n    }\n  }));\n\n  // Connect to MQTT broker and start streaming\n  const connectToMqttAndStartStreaming = async () => {\n    try {\n      // Use the WS_URL from config instead of trying to connect directly to MQTT broker\n      console.log('Connecting to WebSocket server at:', WS_URL);\n\n      // Create WebSocket connection using WS_URL\n      const websocket = new WebSocket(WS_URL);\n      websocket.onopen = () => {\n        console.log('Connected to WebSocket server successfully');\n        setIsMqttConnected(true);\n\n        // Explicitly subscribe to the response topic via WebSocket\n        const subscribeMessage = {\n          topic: \"common/subscribe\",\n          payload: `${mqttTopic}/response/full_frame`\n        };\n        websocket.send(JSON.stringify(subscribeMessage));\n\n        // Subscribe to config response topic\n        const subscribeConfig = {\n          topic: \"common/subscribe\",\n          payload: `${mqttTopic}/response/config`\n        };\n        websocket.send(JSON.stringify(subscribeConfig));\n\n        // Subscribe to cropped frame response topic\n        const subscribeCroppedFrame = {\n          topic: \"common/subscribe\",\n          payload: `${mqttTopic}/response/crop_frame`\n        };\n        console.log(`[MQTTCamera] Subscribing to cropped frame topic: ${subscribeCroppedFrame.payload}`);\n        websocket.send(JSON.stringify(subscribeCroppedFrame));\n\n        // Request current config\n        const requestConfigMessage = {\n          topic: `${mqttTopic}/request/config`,\n          payload: {\n            timestamp: Date.now()\n          }\n        };\n        websocket.send(JSON.stringify(requestConfigMessage));\n        setLastPublishedMessage(requestConfigMessage);\n\n        // Add a diagnostic function to verify and re-subscribe if needed\n        const diagnosticCheckCallback = () => {\n          if (websocket && websocket.readyState === WebSocket.OPEN) {\n            console.log(\"[MQTTCamera] Running subscription diagnostic check\");\n\n            // Re-subscribe to crop_frame topic to ensure it's active\n            const resubCroppedFrame = {\n              topic: \"common/subscribe\",\n              payload: `${mqttTopic}/response/crop_frame`\n            };\n            websocket.send(JSON.stringify(resubCroppedFrame));\n            console.log(`[MQTTCamera] Re-subscribed to cropped frame topic: ${resubCroppedFrame.payload}`);\n\n            // Request subscription status if supported by server\n            const statusRequest = {\n              topic: \"common/subscription_status\",\n              payload: {\n                client_id: mqttSettings.clientId\n              }\n            };\n            websocket.send(JSON.stringify(statusRequest));\n          }\n        };\n\n        // Run diagnostic check after a delay\n        setTimeout(diagnosticCheckCallback, 3000);\n\n        // Start streaming right away\n        startStreaming(websocket);\n      };\n      websocket.onmessage = event => {\n        try {\n          const rawData = event.data;\n          console.debug('[MQTTCamera] Raw WS Message:', rawData);\n          const data = JSON.parse(rawData);\n\n          // Handle cropped frame response\n          if (data.topic === `${mqttTopic}/response/crop_frame`) {\n            try {\n              console.log(\"[MQTTCamera] Received cropped frame response:\", data);\n              let imageData = null;\n\n              // Handle payload based on its type\n              if (data.payload) {\n                if (typeof data.payload === 'string') {\n                  try {\n                    console.log(\"[MQTTCamera] Parsing string payload:\", data.payload.substring(0, 100) + \"...\");\n                    const parsedPayload = JSON.parse(data.payload);\n                    if (parsedPayload.image) {\n                      imageData = parsedPayload.image;\n                      console.log(\"[MQTTCamera] Found image in parsed payload, length:\", imageData.length);\n                    }\n                  } catch (e) {\n                    console.warn(\"[MQTTCamera] Error parsing payload:\", e);\n                    // Silent catch - not valid JSON\n                  }\n                } else if (typeof data.payload === 'object' && data.payload.image) {\n                  imageData = data.payload.image;\n                  console.log(\"[MQTTCamera] Found image in object payload, length:\", imageData.length);\n                }\n              }\n              if (imageData) {\n                updateCropPreviewWithBase64Image(imageData);\n                console.log(\"[MQTTCamera] Updated crop preview with image data\");\n              } else {\n                console.warn('⚠️ Cropped frame response has no image data');\n              }\n\n              // Mark that we've received a crop response and can send another request\n              setIsWaitingForCropResponse(false);\n            } catch (err) {\n              console.error('Error processing cropped frame response:', err);\n              setIsWaitingForCropResponse(false); // Reset flag even on error\n            }\n            return; // Exit after handling cropped frame\n          }\n\n          // Handle Config Response\n          if (data.topic === `${mqttTopic}/response/config`) {\n            try {\n              let configData = null;\n              console.debug('[MQTTCamera] Received config response, Payload type:', typeof data.payload, 'Payload:', data.payload);\n              if (data.payload) {\n                if (typeof data.payload === 'string') {\n                  // Attempt to parse if it looks like JSON\n                  try {\n                    configData = JSON.parse(data.payload);\n                    console.debug('[MQTTCamera] Parsed string payload to config object:', configData);\n                  } catch (e) {\n                    console.warn('[MQTTCamera] Config payload is a string but not valid JSON:', data.payload, 'Error:', e);\n                    // Keep configData null\n                  }\n                } else {\n                  // Payload is already an object\n                  configData = data.payload;\n                  console.debug('[MQTTCamera] Config payload is already an object:', configData);\n                }\n              }\n              if (configData) {\n                console.log(\"[MQTTCamera] Processing received config:\", configData);\n                // Validate received config structure slightly\n                if (configData.camera && configData.processing && configData.processing.roi) {\n                  setCameraConfig(configData);\n                  setPendingConfig(JSON.parse(JSON.stringify(configData))); // Update pending config too\n                  // Update relevant states based on config if needed (e.g., ROI might affect cameraSize view)\n                  const [w, h] = configData.camera.resolution || [640, 480]; // Fallback resolution\n                  if (w && h) {\n                    setCameraSize({\n                      width: w,\n                      height: h\n                    });\n                    setImageAspectRatio(w / h);\n                  }\n                } else {\n                  console.warn(\"Received invalid config structure\", configData);\n                }\n              } else {\n                console.warn(\"Received empty or non-parsable config response payload\");\n                // Maybe add error state here?\n              }\n            } catch (err) {\n              console.error('Error processing config response:', err, 'Data:', data.payload);\n            }\n            return; // Processed config, exit\n          }\n\n          // DIRECTLY CHECK for the specific response topic first\n          if (data.topic === `${mqttTopic}/response/full_frame`) {\n            try {\n              let imageData = null;\n\n              // Handle payload based on its type\n              let resolution = null;\n              if (data.payload) {\n                if (typeof data.payload === 'string') {\n                  try {\n                    const parsedPayload = JSON.parse(data.payload);\n                    if (parsedPayload.image) {\n                      imageData = parsedPayload.image;\n                    }\n                    if (parsedPayload.resolution) {\n                      resolution = parsedPayload.resolution;\n                    }\n                  } catch (e) {\n                    // Silently continue\n                  }\n                } else if (typeof data.payload === 'object' && data.payload.image) {\n                  imageData = data.payload.image;\n                  if (data.payload.resolution) {\n                    resolution = data.payload.resolution;\n                  }\n                }\n              }\n              if (imageData) {\n                // If resolution was sent with the image, update aspect ratio based on it\n                if (resolution && Array.isArray(resolution) && resolution.length === 2) {\n                  const [imgW, imgH] = resolution;\n                  if (imgW > 0 && imgH > 0) {\n                    updateAspectRatioAndResolutions(imgW, imgH);\n                  }\n                }\n                setLastMqttResponse(data.payload);\n                updateVideoWithBase64Image(imageData);\n              } else {\n                console.warn('⚠️ Response has correct topic but no image data found');\n              }\n\n              // Mark that we've received a response and can send another request\n              setIsWaitingForResponse(false);\n            } catch (err) {\n              console.error('Error processing response:', err);\n              setIsWaitingForResponse(false); // Reset flag even on error\n            }\n\n            // Return after handling the main topic to avoid redundant processing\n            return;\n          }\n\n          // Log unhandled message topics for debugging\n          if (data.topic && data.topic.includes(mqttTopic) && data.topic !== `${mqttTopic}/response/full_frame` && data.topic !== `${mqttTopic}/response/crop_frame` && data.topic !== `${mqttTopic}/response/config` && data.topic !== `${mqttTopic}/response/data`) {\n            console.log(`[MQTTCamera] Unhandled topic received: ${data.topic}`, data);\n          }\n\n          // Fallback: Check for common/device_response which might contain our response\n          if (data.topic === 'common/device_response') {\n            // Process common/device_response\n            if (data.payload && typeof data.payload === 'string') {\n              if (data.payload.includes(mqttTopic)) {\n                try {\n                  if (data.payload.includes('image')) {\n                    const responseData = JSON.parse(data.payload);\n                    if (responseData.image) {\n                      updateVideoWithBase64Image(responseData.image);\n                      setLastMqttResponse(responseData);\n                    }\n                  }\n                } catch (err) {\n                  console.error('Error parsing device response:', err);\n                }\n              }\n            }\n          }\n\n          // Final fallback: Look for anything that might contain image data\n          const fullEventData = JSON.stringify(data).toLowerCase();\n          if (fullEventData.includes('image') || fullEventData.includes('frame') || fullEventData.includes('response')) {\n            tryExtractAndShowImage(data);\n          }\n        } catch (error) {\n          console.error('❌ Error processing WebSocket message:', error, 'Raw data:', event.data);\n          // Reset waiting flags in case of error\n          setIsWaitingForResponse(false);\n          setIsWaitingForCropResponse(false);\n        }\n      };\n      websocket.onerror = error => {\n        console.error('WebSocket error:', error);\n        setIsMqttConnected(false);\n        setIsCameraActive(false);\n      };\n      setMqttClient(websocket);\n      setIsCameraActive(true);\n      return true;\n    } catch (error) {\n      console.error('Error connecting to WebSocket:', error);\n      return false;\n    }\n  };\n\n  // Disconnect from MQTT broker\n  const disconnectFromMqtt = () => {\n    // Stop streaming first\n    stopStreaming();\n\n    // Unsubscribe from the response topic before closing the connection\n    if (mqttClient && mqttClient.readyState === WebSocket.OPEN) {\n      // Send unsubscribe message\n      const unsubscribeMessage = {\n        topic: \"common/unsubscribe\",\n        payload: `${mqttTopic}/response/full_frame`\n      };\n      mqttClient.send(JSON.stringify(unsubscribeMessage));\n\n      // Add a small delay before closing to ensure the unsubscribe is processed\n      setTimeout(() => {\n        mqttClient.close();\n      }, 100);\n    }\n    setIsMqttConnected(false);\n    setIsCameraActive(false);\n    setMqttClient(null);\n  };\n\n  // Start streaming frames\n  const startStreaming = websocket => {\n    if (!websocket) return;\n    setIsStreaming(true);\n\n    // Send first frame request immediately\n    requestFullFrame(websocket);\n\n    // Set up interval to check if we should request a new frame\n    intervalRef.current = setInterval(() => {\n      // Only send a new request if:\n      // 1. We're not in crop mode\n      // 2. We're not already waiting for a response\n      // 3. WebSocket is connected\n      if (!isCropMode && !isWaitingForResponse && websocket && websocket.readyState === WebSocket.OPEN) {\n        requestFullFrame(websocket);\n      }\n    }, pollingInterval);\n  };\n\n  // Request a single full frame\n  const requestFullFrame = websocket => {\n    // Format the message according to the system's expected format\n    const message = {\n      topic: `${mqttTopic}/request/full_frame`,\n      payload: {\n        timestamp: Date.now()\n      }\n    };\n    setLastPublishedMessage(message);\n    setIsWaitingForResponse(true);\n    websocket.send(JSON.stringify(message));\n  };\n\n  // Stop streaming frames\n  const stopStreaming = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n      setIsStreaming(false);\n    }\n  };\n\n  // Update aspect ratio and available resolutions when we receive an image\n  const updateAspectRatioAndResolutions = (width, height) => {\n    const newAspectRatio = width / height;\n    if (Math.abs(newAspectRatio - imageAspectRatio) > 0.01) {\n      // Small threshold to avoid unnecessary updates\n      setImageAspectRatio(newAspectRatio);\n\n      // Generate resolution options that match this aspect ratio\n      const baseWidths = [640, 800, 1024, 1280, 1600, 1920];\n      const newResolutions = baseWidths.map(w => {\n        const h = Math.round(w / newAspectRatio);\n        return `${w}x${h}`;\n      });\n      setAvailableResolutions(newResolutions);\n\n      // Set cameraResolution to match actual camera resolution\n      setCameraResolution(`${width}x${height}`);\n\n      // Adjust current camera size to match aspect ratio\n      setCameraSize(prev => ({\n        width: prev.width,\n        height: Math.round(prev.width / newAspectRatio)\n      }));\n    }\n  };\n\n  // Update video with base64 encoded image data\n  const updateVideoWithBase64Image = base64Data => {\n    if (!base64Data) {\n      console.error('Cannot update image: missing base64 data');\n      return;\n    }\n    if (!canvasRef.current) {\n      console.error('Cannot update image: canvas reference is null');\n      return;\n    }\n\n    // Validate that the base64 string looks correct\n    if (!base64Data.match(/^[A-Za-z0-9+/=]+$/)) {\n      console.error('Invalid base64 data format. Data does not appear to be valid base64.');\n      return;\n    }\n\n    // Create an image element to load the data\n    const img = new Image();\n\n    // Add load event listener before setting src\n    img.onload = () => {\n      // Store the image reference for later use\n      imageRef.current = img;\n\n      // Update aspect ratio and available resolutions\n      updateAspectRatioAndResolutions(img.width, img.height);\n\n      // Call redrawCanvas instead of drawing directly here\n      redrawCanvas();\n    };\n    img.onerror = error => {\n      console.error('Failed to load image:', error);\n      console.error('Image load failed. This usually means the base64 data is invalid or incomplete.');\n    };\n\n    // Set the image source to the base64 data\n    try {\n      img.src = `data:image/jpeg;base64,${base64Data}`;\n    } catch (e) {\n      console.error('Error setting image source:', e);\n    }\n  };\n\n  // Update preview with base64 encoded cropped image data\n  const updateCropPreviewWithBase64Image = base64Data => {\n    if (!base64Data) {\n      console.error('Cannot update crop preview: missing base64 data');\n      return;\n    }\n\n    // Set the preview image data\n    setCropPreviewImage(`data:image/jpeg;base64,${base64Data}`);\n  };\n\n  // Clean up on component unmount\n  useEffect(() => {\n    return () => {\n      stopStreaming();\n      stopCropStreaming();\n      disconnectFromMqtt();\n    };\n  }, []);\n\n  // Initialize canvas size when video size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      canvasRef.current.width = cameraSize.width;\n      canvasRef.current.height = cameraSize.height;\n\n      // If line is drawn, redraw it when canvas size changes\n      if (isLineDrawn) {\n        // Ensure the redraw happens after the canvas size is updated\n        // by using a small timeout\n        setTimeout(() => {\n          redrawCanvas(); // Use redrawCanvas which handles coordinates\n\n          // Double-check with another redraw after a slight delay\n          setTimeout(() => redrawCanvas(), 100);\n        }, 0);\n      }\n    }\n  }, [cameraSize.width, cameraSize.height, isLineDrawn]);\n\n  // Effect for continuous redrawing of the canvas (image + line)\n  useEffect(() => {\n    let animationId;\n\n    // Function to continuously redraw the canvas (image + line)\n    const redrawLoop = () => {\n      if (canvasRef.current) {\n        redrawCanvas();\n      }\n      animationId = requestAnimationFrame(redrawLoop);\n    };\n\n    // Start animation loop if camera is active\n    if (isCameraActive || isLineDrawn) {\n      animationId = requestAnimationFrame(redrawLoop);\n      console.debug(\"[Animation] Starting redraw loop\");\n    }\n\n    // Cleanup function\n    return () => {\n      if (animationId) {\n        console.debug(\"[Animation] Stopping redraw loop\");\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [isCameraActive, isLineDrawn]); // Re-run when camera activity or line drawing state changes\n\n  // Start camera stream (now connects to MQTT)\n  const startCamera = async () => {\n    return connectToMqttAndStartStreaming();\n  };\n\n  // Stop camera stream (now disconnects from MQTT)\n  const stopCamera = () => {\n    disconnectFromMqtt();\n  };\n\n  // Function to send the line update to the backend\n  const sendLineUpdate = line => {\n    if (mqttClient && mqttClient.readyState === WebSocket.OPEN && line) {\n      // Ensure we have valid coordinates\n      if (!line.start || !line.end) {\n        console.warn('Invalid line coordinates:', line);\n        return;\n      }\n\n      // Send integer coordinates\n      const payload = {\n        start_x: Math.round(line.start.x),\n        end_x: Math.round(line.end.x),\n        y: Math.round(line.start.y) // Y is the same for start and end since line is horizontal\n      };\n      const message = {\n        topic: `${mqttTopic}/request/set_line`,\n        payload: payload\n      };\n      console.log(\"Sending line update:\", message);\n      mqttClient.send(JSON.stringify(message));\n      setLastPublishedMessage(message);\n    } else {\n      console.warn('Cannot send line update: WebSocket not connected or line not defined.', {\n        wsState: mqttClient === null || mqttClient === void 0 ? void 0 : mqttClient.readyState,\n        line: line\n      });\n    }\n  };\n\n  // Calculate the current line position with offsets applied\n  const calculateTransformedLinePosition = () => {\n    if (!originalLineStart || !originalLineEnd) return null;\n\n    // Return the original line coordinates with any offsets applied\n    return {\n      start: {\n        x: originalLineStart.x,\n        y: originalLineStart.y\n      },\n      end: {\n        x: originalLineEnd.x,\n        y: originalLineEnd.y\n      }\n    };\n  };\n\n  // Handle line Y-offset adjustment\n  const handleLineYOffsetChange = e => {\n    const newOffset = parseInt(e.target.value);\n    setLineYOffset(newOffset);\n    // Send update only on adjustment, not during initial draw\n    if (isLineDrawn && originalLineStart && originalLineEnd) {\n      const newLine = calculateTransformedLinePosition(originalLineStart, originalLineEnd, newOffset, lineXOffset);\n      // Force redraw immediately to improve responsiveness\n      redrawCanvas();\n      sendLineUpdate(newLine);\n    }\n  };\n\n  // Handle line X-offset adjustment\n  const handleLineXOffsetChange = e => {\n    const newOffset = parseInt(e.target.value);\n    setLineXOffset(newOffset);\n    // Send update only on adjustment, not during initial draw\n    if (isLineDrawn && originalLineStart && originalLineEnd) {\n      const newLine = calculateTransformedLinePosition(originalLineStart, originalLineEnd, lineYOffset, newOffset);\n      // Force redraw immediately to improve responsiveness  \n      redrawCanvas();\n      sendLineUpdate(newLine);\n    }\n  };\n\n  // Convert canvas coordinates to relative image coordinates\n  const getRelativeImageCoordinates = event => {\n    if (!canvasRef.current || !imageRef.current) return null;\n    const canvas = canvasRef.current;\n    const image = imageRef.current;\n    const rect = canvas.getBoundingClientRect();\n\n    // Get click coordinates relative to canvas\n    const canvasX = event.clientX - rect.left;\n    const canvasY = event.clientY - rect.top;\n\n    // Calculate scale factors\n    const scaleX = image.naturalWidth / rect.width;\n    const scaleY = image.naturalHeight / rect.height;\n    const imageX = Math.round(canvasX * scaleX);\n    const imageY = Math.round(canvasY * scaleY);\n\n    // Add 2px margin to boundaries\n    const margin = 2;\n    if (imageX < margin || imageX > image.naturalWidth - margin || imageY < margin || imageY > image.naturalHeight - margin) {\n      console.warn('Click outside image boundaries');\n      return null;\n    }\n    return {\n      x: Math.round(imageX),\n      y: Math.round(imageY)\n    };\n  };\n\n  // Render camera controls\n  const renderCameraControls = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: floatingComponentStyles.controls,\n      children: !isCameraActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n        style: buttonVariants.primaryButton,\n        onClick: startCamera,\n        children: \"Connect to Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1043,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.primaryButton,\n            backgroundColor: 'rgba(255, 50, 50, 0.7)'\n          },\n          onClick: stopCamera,\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 13\n        }, this), isLineDrawn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: buttonVariants.smallSecondary,\n            onClick: clearLine,\n            children: \"Clear Line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1063,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: buttonVariants.smallSecondary,\n            disabled: true // Disable extraction button as it's now handled by backend\n            ,\n            title: \"Data extraction handled by backend\",\n            children: \"Extract (Backend)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1069,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonVariants.smallSecondary,\n          disabled: isDrawing,\n          title: \"Click and drag on video to draw a line\",\n          children: \"Draw Line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Clear the drawn line\n  const clearLine = () => {\n    setIsLineDrawn(false);\n    setIsDrawing(false);\n    setCurrentLine(null);\n\n    // Send message to backend to clear the line (optional, or send invalid coords)\n    sendLineUpdate({\n      start: {\n        x: -1,\n        y: -1\n      },\n      end: {\n        x: -1,\n        y: -1\n      }\n    }); // Send dummy coords\n\n    // Clear canvas\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      // Need to redraw the image after clearing\n      if (imageRef.current) {\n        redrawCanvas();\n      }\n    }\n  };\n\n  // Start line drawing on mouse down\n  const startLineDrawing = event => {\n    if (!canvasRef.current || !imageRef.current) return;\n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) {\n      console.warn('Invalid start coordinates');\n      return;\n    }\n    setIsDrawing(true);\n    setCurrentLine({\n      start: coords,\n      end: coords\n    });\n    console.log('Started line at:', coords);\n  };\n\n  // Update line drawing on mouse move\n  const updateLineDrawing = event => {\n    if (!isDrawing || !canvasRef.current || !imageRef.current) return;\n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) {\n      console.warn('Invalid move coordinates');\n      return;\n    }\n\n    // Force horizontal line by keeping Y coordinate the same as start\n    coords.y = currentLine.start.y;\n    setCurrentLine(prev => ({\n      ...prev,\n      end: coords\n    }));\n    redrawCanvas();\n  };\n\n  // Finish line drawing on mouse up\n  const finishLineDrawing = event => {\n    if (!isDrawing || !canvasRef.current || !imageRef.current) return;\n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) {\n      console.warn('Invalid end coordinates');\n      setIsDrawing(false);\n      setCurrentLine(null);\n      return;\n    }\n\n    // Force horizontal line\n    coords.y = currentLine.start.y;\n    const finalLine = {\n      start: currentLine.start,\n      end: coords\n    };\n\n    // Calculate distance\n    const distance = Math.abs(finalLine.end.x - finalLine.start.x);\n    console.log('Line distance:', distance, 'px');\n    if (distance < MIN_LINE_LENGTH) {\n      console.warn(`Line too short (distance: ${distance}px). Clearing.`);\n      setIsDrawing(false);\n      setCurrentLine(null);\n      redrawCanvas();\n      return;\n    }\n\n    // Ensure start_x is always less than end_x\n    if (finalLine.start.x > finalLine.end.x) {\n      const temp = finalLine.start;\n      finalLine.start = finalLine.end;\n      finalLine.end = temp;\n    }\n    console.log('Finished line:', finalLine);\n    setIsDrawing(false);\n    setCurrentLine(finalLine);\n    sendLineUpdate(finalLine);\n    redrawCanvas();\n  };\n\n  // Handle resize start\n  const handleResizeStart = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = cameraSize.width;\n    const startHeight = cameraSize.height;\n    setIsResizing(true);\n    setShowResizeInfo(true);\n    const handleMouseMove = moveEvent => {\n      const deltaX = moveEvent.clientX - startX;\n\n      // Calculate new width, constrained to minimum of 320px\n      const newWidth = Math.max(320, startWidth + deltaX);\n\n      // Calculate height based on aspect ratio\n      const newHeight = Math.round(newWidth / imageAspectRatio);\n      setCameraSize({\n        width: newWidth,\n        height: newHeight\n      });\n\n      // Notify parent if onResize callback is provided\n      if (onResize) {\n        onResize({\n          width: newWidth,\n          height: newHeight\n        });\n      }\n      moveEvent.preventDefault();\n    };\n    const handleMouseUp = () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 1000);\n    };\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Helper function to try extracting and displaying image data from various message formats\n  const tryExtractAndShowImage = data => {\n    try {\n      // Check multiple potential payload locations\n      let imageData = null;\n      let imagePayload = null;\n\n      // Case 1: data.payload is an object with image property\n      if (data.payload && typeof data.payload === 'object' && data.payload.image) {\n        imageData = data.payload.image;\n        imagePayload = data.payload;\n      }\n      // Case 2: data.payload is a string that might be JSON\n      else if (data.payload && typeof data.payload === 'string') {\n        try {\n          const parsedPayload = JSON.parse(data.payload);\n          if (parsedPayload && parsedPayload.image) {\n            imageData = parsedPayload.image;\n            imagePayload = parsedPayload;\n          }\n        } catch (e) {\n          // Silent catch - not valid JSON\n        }\n      }\n      // Case 3: data itself has an image property\n      else if (data.image) {\n        imageData = data.image;\n        imagePayload = data;\n      }\n      if (imageData) {\n        setLastMqttResponse(imagePayload);\n        updateVideoWithBase64Image(imageData);\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      console.error('Error trying to extract image data:', err);\n      return false;\n    }\n  };\n\n  // State variables for camera settings\n  const [cropToGraph, setCropToGraph] = useState(false);\n  const [streamCropImage, setStreamCropImage] = useState(true); // Default to true for backward compatibility\n  const [fullData, setFullData] = useState(false); // Control whether to send full channel data or optimized data\n\n  // Add a function to calculate pixel ranges from wavelength ranges\n  const calculatePixelRangesFromWavelengths = calibrationPoints => {\n    if (!calibrationPoints || calibrationPoints.length < 2) {\n      console.warn(\"Cannot calculate pixel ranges: insufficient calibration points\");\n      return null;\n    }\n\n    // Extract calibration points\n    const point1 = {\n      position: calibrationPoints[0].position,\n      wavelength: calibrationPoints[0].wavelength\n    };\n    const point2 = {\n      position: calibrationPoints[1].position,\n      wavelength: calibrationPoints[1].wavelength\n    };\n\n    // Calculate the linear mapping from wavelength to position\n    // wavelength = a + b * position\n    // position = (wavelength - a) / b\n    const b = (point2.wavelength - point1.wavelength) / (point2.position - point1.position);\n    const a = point1.wavelength - b * point1.position;\n\n    // Convert position (0-1) to pixel ranges using the linear mapping\n    const calculatePixelFromWavelength = wavelength => {\n      // The inverse transform: position = (wavelength - a) / b\n      return (wavelength - a) / b;\n    };\n\n    // Extract channel ranges from spectral_config.json\n    const channelRanges = spectralConfig.CHANNEL_RANGES;\n\n    // Calculate pixel ranges for each channel\n    const pixelRanges = {\n      b: [calculatePixelFromWavelength(channelRanges.b[0]), calculatePixelFromWavelength(channelRanges.b[1])],\n      g: [calculatePixelFromWavelength(channelRanges.g[0]), calculatePixelFromWavelength(channelRanges.g[1])],\n      r: [calculatePixelFromWavelength(channelRanges.r[0]), calculatePixelFromWavelength(channelRanges.r[1])]\n    };\n    return pixelRanges;\n  };\n\n  // Start crop frame streaming\n  const startCropStreaming = () => {\n    if (!mqttClient || mqttClient.readyState !== WebSocket.OPEN) {\n      console.error('Cannot start crop streaming: WebSocket not connected');\n      return;\n    }\n    if (!cropRange || cropRange.every(val => val === 0)) {\n      console.error('Cannot start crop streaming: No crop region defined');\n      return;\n    }\n\n    // Stop any existing crop interval\n    stopCropStreaming();\n\n    // If we're starting crop streaming, stop full frame streaming\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    // Calculate pixel ranges from wavelength ranges if we have calibration points\n    let pixelRanges = null;\n    if (!fullData && calibrationRef.current && calibrationRef.current.calibrationPoints) {\n      pixelRanges = calculatePixelRangesFromWavelengths(calibrationRef.current.calibrationPoints);\n      console.log('Calculated pixel ranges:', pixelRanges);\n    }\n\n    // Send crop request with interval in the payload - server will handle streaming\n    const message = {\n      topic: `${mqttTopic}/request/crop_frame`,\n      payload: {\n        interval: cropInterval,\n        // Pass actual interval to server\n        crop_range: cropRange,\n        to_graph: cropToGraph,\n        // Add flag to indicate if the crop should be processed for graph\n        stream_image: streamCropImage,\n        // Add flag to indicate if the image should be sent\n        full_data: fullData,\n        // Add flag to indicate if full data should be sent\n        pixel_ranges: pixelRanges // Send calculated pixel ranges (will be null if full_data is true)\n      }\n    };\n    console.log(`Starting crop streaming with interval ${cropInterval}ms`, message);\n    mqttClient.send(JSON.stringify(message));\n    setLastPublishedMessage(message);\n\n    // Set streaming state if interval > 0 and we want to stream images\n    if (cropInterval > 0 && (streamCropImage || cropToGraph)) {\n      setIsCropStreaming(true);\n      setIsWaitingForCropResponse(true);\n    } else {\n      // Single frame request\n      setIsWaitingForCropResponse(true);\n    }\n  };\n\n  // Stop crop frame streaming\n  const stopCropStreaming = () => {\n    if (cropIntervalRef.current) {\n      clearInterval(cropIntervalRef.current);\n      cropIntervalRef.current = null;\n    }\n    if (mqttClient && mqttClient.readyState === WebSocket.OPEN) {\n      // Send message to stop streaming (interval=0)\n      const message = {\n        topic: `${mqttTopic}/request/crop_frame`,\n        payload: {\n          interval: 0,\n          crop_range: cropRange\n        }\n      };\n      mqttClient.send(JSON.stringify(message));\n      setLastPublishedMessage(message);\n    }\n    setIsCropStreaming(false);\n    setIsWaitingForCropResponse(false); // Reset waiting state when stopping\n  };\n\n  // Convert crop points to crop range\n  const pointsToCropRange = (start, end) => {\n    if (!start || !end) return [0, 0, 0, 0];\n\n    // Ensure start is top-left and end is bottom-right\n    const x_min = Math.min(start.x, end.x);\n    const y_min = Math.min(start.y, end.y);\n    const x_max = Math.max(start.x, end.x);\n    const y_max = Math.max(start.y, end.y);\n    return [x_min, y_min, x_max, y_max];\n  };\n\n  // Handle crop start (mousedown)\n  const startCropDrawing = event => {\n    if (!isCropMode || !canvasRef.current || !imageRef.current) return;\n    event.preventDefault();\n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) return;\n    setIsDrawingCrop(true);\n    setCropStart(coords);\n    setCropEnd(coords);\n  };\n\n  // Handle crop update (mousemove)\n  const updateCropDrawing = event => {\n    if (!isDrawingCrop || !isCropMode) return;\n    event.preventDefault();\n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) return;\n    setCropEnd(coords);\n\n    // Update the crop range during drawing\n    setCropRange(pointsToCropRange(cropStart, coords));\n\n    // Redraw canvas to show current crop rectangle\n    redrawCanvas();\n  };\n\n  // Handle crop end (mouseup)\n  const finishCropDrawing = event => {\n    if (!isDrawingCrop || !isCropMode) return;\n    event.preventDefault();\n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) {\n      setIsDrawingCrop(false);\n      return;\n    }\n    setCropEnd(coords);\n\n    // Calculate final crop range\n    const newCropRange = pointsToCropRange(cropStart, coords);\n\n    // Check if crop size is valid\n    const width = newCropRange[2] - newCropRange[0];\n    const height = newCropRange[3] - newCropRange[1];\n    if (width < MIN_CROP_SIZE || height < MIN_CROP_SIZE) {\n      console.warn(`Crop rectangle too small (${width}x${height}px). Minimum size is ${MIN_CROP_SIZE}x${MIN_CROP_SIZE}px.`);\n      setIsDrawingCrop(false);\n      // Reset crop\n      setCropStart(null);\n      setCropEnd(null);\n      setCropRange([0, 0, 0, 0]);\n      redrawCanvas();\n      return;\n    }\n\n    // Set the final crop range\n    setCropRange(newCropRange);\n    setIsDrawingCrop(false);\n\n    // Request a single cropped frame to preview\n    requestCroppedFrame(newCropRange);\n\n    // Redraw to show the final crop rectangle\n    redrawCanvas();\n  };\n\n  // Request a single cropped frame\n  const requestCroppedFrame = range => {\n    if (!mqttClient || mqttClient.readyState !== WebSocket.OPEN) return;\n\n    // Calculate pixel ranges from wavelength ranges if we have calibration points\n    let pixelRanges = null;\n    if (!fullData && calibrationRef.current && calibrationRef.current.calibrationPoints) {\n      pixelRanges = calculatePixelRangesFromWavelengths(calibrationRef.current.calibrationPoints);\n      console.log('Calculated pixel ranges:', pixelRanges);\n    }\n    const message = {\n      topic: `${mqttTopic}/request/crop_frame`,\n      payload: {\n        interval: 0,\n        // Single frame\n        crop_range: range,\n        to_graph: cropToGraph,\n        // Add flag to indicate if the crop should be processed for graph\n        stream_image: streamCropImage,\n        // Add flag to indicate if the image should be sent\n        full_data: fullData,\n        // Add flag to indicate if full data should be sent\n        pixel_ranges: pixelRanges // Send calculated pixel ranges (will be null if full_data is true)\n      }\n    };\n    mqttClient.send(JSON.stringify(message));\n    setLastPublishedMessage(message);\n    setIsWaitingForCropResponse(true);\n  };\n\n  // Handle manual crop range input change\n  const handleCropRangeChange = (index, value) => {\n    const newCropRange = [...cropRange];\n    newCropRange[index] = parseInt(value) || 0;\n\n    // Ensure min <= max\n    if (index === 0 && newCropRange[0] > newCropRange[2]) {\n      newCropRange[2] = newCropRange[0];\n    }\n    if (index === 1 && newCropRange[1] > newCropRange[3]) {\n      newCropRange[3] = newCropRange[1];\n    }\n    if (index === 2 && newCropRange[2] < newCropRange[0]) {\n      newCropRange[0] = newCropRange[2];\n    }\n    if (index === 3 && newCropRange[3] < newCropRange[1]) {\n      newCropRange[1] = newCropRange[3];\n    }\n    setCropRange(newCropRange);\n    redrawCanvas();\n  };\n\n  // Toggle crop mode\n  const toggleCropMode = () => {\n    const newCropMode = !isCropMode;\n    setIsCropMode(newCropMode);\n    if (!newCropMode) {\n      // Exiting crop mode, clean up and restart full frame streaming\n      setIsDrawingCrop(false);\n      stopCropStreaming();\n\n      // Restart full frame streaming if camera is active\n      if (isCameraActive && mqttClient && mqttClient.readyState === WebSocket.OPEN) {\n        startStreaming(mqttClient);\n      }\n    } else {\n      // Entering crop mode, stop full frame streaming\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      // Stop line drawing if active\n      setIsDrawing(false);\n    }\n    redrawCanvas();\n  };\n\n  // Reset crop\n  const resetCrop = () => {\n    setCropStart(null);\n    setCropEnd(null);\n    setCropRange([0, 0, 0, 0]);\n    setCropPreviewImage(null);\n    stopCropStreaming();\n    redrawCanvas();\n  };\n\n  // Render crop controls\n  const renderCropControls = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: floatingComponentStyles.cropControls,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: floatingComponentStyles.cropTitle,\n        children: \"Crop Frame Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1604,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.cropInputGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.cropLabel,\n          children: \"X Min:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1607,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: cropRange[0],\n          onChange: e => handleCropRangeChange(0, e.target.value),\n          style: floatingComponentStyles.cropInput,\n          disabled: !isCameraActive\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1608,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.cropLabel,\n          children: \"Y Min:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1616,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: cropRange[1],\n          onChange: e => handleCropRangeChange(1, e.target.value),\n          style: floatingComponentStyles.cropInput,\n          disabled: !isCameraActive\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1617,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1606,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.cropInputGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.cropLabel,\n          children: \"X Max:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1627,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: cropRange[2],\n          onChange: e => handleCropRangeChange(2, e.target.value),\n          style: floatingComponentStyles.cropInput,\n          disabled: !isCameraActive\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.cropLabel,\n          children: \"Y Max:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1636,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: cropRange[3],\n          onChange: e => handleCropRangeChange(3, e.target.value),\n          style: floatingComponentStyles.cropInput,\n          disabled: !isCameraActive\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1637,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.cropInputGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.cropLabel,\n          children: \"Interval (ms):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1647,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: cropInterval,\n          onChange: e => setCropInterval(parseInt(e.target.value) || 0),\n          style: floatingComponentStyles.cropInput,\n          min: \"0\",\n          step: \"100\",\n          disabled: !isCameraActive\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1648,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: floatingComponentStyles.cropHint,\n          children: \"0 = single capture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1657,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1646,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.cropButtonGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonVariants.smallSecondary,\n          onClick: toggleCropMode,\n          disabled: !isCameraActive,\n          children: isCropMode ? 'Exit Crop Mode' : 'Enter Crop Mode'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonVariants.smallSecondary,\n          onClick: resetCrop,\n          disabled: !isCameraActive || cropRange.every(val => val === 0),\n          children: \"Reset Crop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1671,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1662,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.checkboxGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.checkboxLabel,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: streamCropImage,\n            onChange: e => setStreamCropImage(e.target.checked),\n            style: floatingComponentStyles.checkbox,\n            disabled: !isCameraActive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1682,\n            columnNumber: 13\n          }, this), \"Stream Image\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1681,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.checkboxLabel,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: cropToGraph,\n            onChange: e => setCropToGraph(e.target.checked),\n            style: floatingComponentStyles.checkbox,\n            disabled: !isCameraActive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1693,\n            columnNumber: 13\n          }, this), \"To Graph\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1692,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.checkboxLabel,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: fullData,\n            onChange: e => setFullData(e.target.checked),\n            style: floatingComponentStyles.checkbox,\n            disabled: !isCameraActive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1704,\n            columnNumber: 13\n          }, this), \"Full Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1703,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1680,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.cropButtonGroup,\n        children: !isCropStreaming ? /*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonVariants.smallPrimary,\n          onClick: startCropStreaming,\n          disabled: !isCameraActive || cropRange.every(val => val === 0) || !streamCropImage && !cropToGraph,\n          children: cropInterval > 0 ? 'Start Streaming' : 'Capture Frame'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1717,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallPrimary,\n            backgroundColor: 'rgba(255, 50, 50, 0.7)'\n          },\n          onClick: stopCropStreaming,\n          children: \"Stop Streaming\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1725,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1715,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1603,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render crop preview\n  const renderCropPreview = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: floatingComponentStyles.cropPreviewContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: floatingComponentStyles.cropTitle,\n        children: \"Crop Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1741,\n        columnNumber: 9\n      }, this), cropPreviewImage ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: cropPreviewImage,\n        alt: \"Cropped preview\",\n        style: floatingComponentStyles.cropPreviewImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1743,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.cropPreviewPlaceholder,\n        children: \"No crop preview available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1749,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1740,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to render the configuration menu\n  const renderConfigMenu = () => {\n    // Handler for input changes within the config menu\n    const handleConfigChange = (section, key, value) => {\n      setPendingConfig(prev => {\n        const newConfig = JSON.parse(JSON.stringify(prev)); // Deep copy\n        if (section === 'roi') {\n          // ROI is an array [x, y, w, h]\n          const roiIndex = {\n            'x': 0,\n            'y': 1,\n            'w': 2,\n            'h': 3\n          }[key];\n          newConfig.processing.roi[roiIndex] = parseInt(value) || 0;\n        } else {\n          newConfig[section][key] = value;\n        }\n\n        // Trigger redraw immediately after ROI change\n        if (section === 'roi') {\n          requestAnimationFrame(redrawCanvas);\n        }\n        return newConfig;\n      });\n    };\n\n    // Handler to send config update\n    const applyConfigChanges = () => {\n      if (pendingConfig) {\n        sendCameraConfigUpdate(pendingConfig);\n      }\n    };\n    if (!pendingConfig) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading configuration...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1787,\n        columnNumber: 14\n      }, this); // Or some loading indicator\n    }\n    const roi = pendingConfig.processing.roi || [0, 0, 0, 0];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: floatingComponentStyles.configMenuContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Camera Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1794,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.configRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.configLabel,\n          children: \"Exposure Time (\\u03BCs):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1798,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: pendingConfig.camera.exposure_time || '',\n          onChange: e => handleConfigChange('camera', 'exposure_time', e.target.value),\n          style: floatingComponentStyles.configInput,\n          disabled: pendingConfig.camera.exposure_mode !== 'manual'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1799,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1797,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.configRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.configLabel,\n          children: \"Exposure Mode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1808,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: pendingConfig.camera.exposure_mode || 'auto',\n          onChange: e => handleConfigChange('camera', 'exposure_mode', e.target.value),\n          style: floatingComponentStyles.configInput,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"auto\",\n            children: \"Auto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1814,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"manual\",\n            children: \"Manual\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1815,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1809,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1807,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.configRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.configLabel,\n          children: \"ISO:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1821,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: pendingConfig.camera.iso || '' // Handle null case\n          ,\n          onChange: e => handleConfigChange('camera', 'iso', e.target.value ? parseInt(e.target.value) : null) // Send null if empty\n          ,\n          style: floatingComponentStyles.configInput,\n          min: \"100\" // Example range, adjust as needed\n          ,\n          max: \"1600\",\n          step: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1822,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1820,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...buttonVariants.smallPrimary,\n          marginTop: '10px'\n        },\n        onClick: applyConfigChanges,\n        children: \"Apply Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1833,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1793,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to send camera configuration update via MQTT\n  const sendCameraConfigUpdate = configToSend => {\n    if (mqttClient && mqttClient.readyState === WebSocket.OPEN) {\n      const message = {\n        topic: `${mqttTopic}/request/set_config`,\n        // Assuming this is the topic the backend listens on\n        payload: configToSend\n      };\n      console.log(\"Sending config update:\", message);\n      mqttClient.send(JSON.stringify(message));\n      setLastPublishedMessage(message);\n      // Optional: Maybe reset pendingConfig or wait for confirmation?\n    } else {\n      console.error('Cannot send config: WebSocket not connected');\n    }\n  };\n\n  // Centralized drawing function\n  const redrawCanvas = () => {\n    if (!canvasRef.current || !imageRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const image = imageRef.current;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw image\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n    // Draw line if we have valid coordinates\n    if (currentLine && currentLine.start && currentLine.end) {\n      ctx.beginPath();\n      ctx.moveTo(currentLine.start.x, currentLine.start.y);\n      ctx.lineTo(currentLine.end.x, currentLine.end.y);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n\n    // Draw crop rectangle if in crop mode and we have valid coordinates\n    if (isCropMode && cropRange && cropRange.some(val => val !== 0)) {\n      const [x_min, y_min, x_max, y_max] = cropRange;\n\n      // Draw rectangle\n      ctx.beginPath();\n      ctx.rect(x_min, y_min, x_max - x_min, y_max - y_min);\n\n      // Use green while drawing, yellow when set\n      if (isDrawingCrop) {\n        ctx.strokeStyle = 'green';\n        ctx.fillStyle = 'rgba(0, 255, 0, 0.1)';\n      } else {\n        ctx.strokeStyle = 'yellow';\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.1)';\n      }\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Semi-transparent fill\n      ctx.fill();\n\n      // Draw corner markers\n      const markerSize = 5;\n      ctx.fillStyle = isDrawingCrop ? 'green' : 'yellow';\n\n      // Top-left\n      ctx.fillRect(x_min - markerSize, y_min - markerSize, markerSize * 2, markerSize * 2);\n      // Top-right\n      ctx.fillRect(x_max - markerSize, y_min - markerSize, markerSize * 2, markerSize * 2);\n      // Bottom-left\n      ctx.fillRect(x_min - markerSize, y_max - markerSize, markerSize * 2, markerSize * 2);\n      // Bottom-right\n      ctx.fillRect(x_max - markerSize, y_max - markerSize, markerSize * 2, markerSize * 2);\n    }\n  };\n\n  // Effect to load calibration settings from localStorage\n  useEffect(() => {\n    // Try to load detector_settings from localStorage\n    const detectorId = mqttTopic.split('/')[0] || 'default';\n    const settingsKey = `detector_settings_${detectorId}`;\n    const savedSettingsStr = localStorage.getItem(settingsKey);\n    if (savedSettingsStr) {\n      try {\n        const savedSettings = JSON.parse(savedSettingsStr);\n        if (savedSettings.calibration && savedSettings.calibration.calibrationPoints) {\n          // Store calibration points in ref for pixel range calculations\n          calibrationRef.current = {\n            calibrationPoints: savedSettings.calibration.calibrationPoints\n          };\n          console.log('Loaded calibration points from settings:', calibrationRef.current.calibrationPoints);\n        }\n      } catch (err) {\n        console.error('Error loading settings from localStorage:', err);\n      }\n    }\n  }, [mqttTopic]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: floatingComponentStyles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: floatingComponentStyles.title,\n      children: \"Spectrometer Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1946,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: floatingComponentStyles.mqttInputs,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: floatingComponentStyles.inputLabel,\n        children: \"MQTT Topic:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1950,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: mqttTopic,\n        onChange: e => setMqttTopic(e.target.value),\n        style: floatingComponentStyles.input,\n        disabled: isCameraActive,\n        placeholder: \"e.g. spectrometer_1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1951,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1949,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: floatingComponentStyles.mqttInputs,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: floatingComponentStyles.inputLabel,\n        children: \"Poll Rate:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1963,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"100\",\n        max: \"2000\",\n        step: \"100\",\n        value: pollingInterval,\n        onChange: e => setPollingInterval(parseInt(e.target.value)),\n        style: floatingComponentStyles.slider,\n        disabled: !isCameraActive\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1964,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: floatingComponentStyles.value,\n        children: [pollingInterval, \"ms\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1974,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1962,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: cameraContainerRef,\n      style: floatingComponentStyles.cameraView,\n      onMouseDown: isCameraActive ? isCropMode ? startCropDrawing : startLineDrawing : undefined,\n      onMouseMove: isCameraActive ? isCropMode ? updateCropDrawing : updateLineDrawing : undefined,\n      onMouseUp: isCameraActive ? isCropMode ? finishCropDrawing : finishLineDrawing : undefined,\n      onMouseLeave: isCameraActive ? isCropMode ? finishCropDrawing : finishLineDrawing : undefined,\n      children: [!isCameraActive && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          color: '#999'\n        },\n        children: \"Device feed will appear here when connected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1987,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          ...floatingComponentStyles.canvas,\n          aspectRatio: `${cameraSize.width} / ${cameraSize.height}`,\n          cursor: isCameraActive ? isCropMode ? 'crosshair' : 'crosshair' : 'default'\n        },\n        width: cameraSize.width,\n        height: cameraSize.height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1992,\n        columnNumber: 9\n      }, this), isCameraActive && !isLineDrawn && !isDrawing && !isCropMode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.overlayText,\n        children: \"Click and drag to draw a line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2005,\n        columnNumber: 11\n      }, this), isCameraActive && isCropMode && !isDrawingCrop && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.overlayText,\n        children: \"Click and drag to define crop region\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2011,\n        columnNumber: 11\n      }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.overlayText,\n        children: \"Drawing line...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2018,\n        columnNumber: 11\n      }, this), isDrawingCrop && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.overlayText,\n        children: \"Drawing crop region...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2024,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.connectionStatusOverlay,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...floatingComponentStyles.statusIndicator,\n            backgroundColor: isMqttConnected ? '#0f0' : '#f00'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2031,\n          columnNumber: 11\n        }, this), isMqttConnected ? 'Connected' : 'Disconnected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2030,\n        columnNumber: 9\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.resizeInfo,\n        children: [cameraSize.width, \" \\xD7 \", cameraSize.height]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2037,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.resizeHandle,\n        onMouseDown: handleResizeStart,\n        title: \"Resize camera view\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"12\",\n          height: \"12\",\n          viewBox: \"0 0 12 12\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M9,3 L3,9 M11,5 L5,11 M11,8 L8,11\",\n            stroke: \"white\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2049,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2048,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2043,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1978,\n      columnNumber: 7\n    }, this), renderCameraControls(), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        ...buttonVariants.smallSecondary,\n        marginTop: '8px'\n      },\n      onClick: () => {\n        // Initialize default config if none exists\n        if (!pendingConfig) {\n          setPendingConfig({\n            camera: {\n              exposure_time: 10000,\n              exposure_mode: 'auto',\n              iso: 100,\n              resolution: [cameraSize.width, cameraSize.height]\n            },\n            processing: {\n              roi: [0, 0, cameraSize.width, cameraSize.height]\n            }\n          });\n        }\n        setShowConfigMenu(!showConfigMenu);\n      },\n      children: showConfigMenu ? 'Hide Config' : 'Show Config'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2063,\n      columnNumber: 7\n    }, this), showConfigMenu && renderConfigMenu(), isLineDrawn && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: floatingComponentStyles.lineControls,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.controlRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.controlLabel,\n          children: \"Y Offset:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2093,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"-50\",\n          max: \"50\",\n          value: lineYOffset,\n          onChange: handleLineYOffsetChange,\n          style: floatingComponentStyles.slider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2094,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: floatingComponentStyles.value,\n          children: [lineYOffset, \"px\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2092,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.controlRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: floatingComponentStyles.controlLabel,\n          children: \"X Offset:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"-50\",\n          max: \"50\",\n          value: lineXOffset,\n          onChange: handleLineXOffsetChange,\n          style: floatingComponentStyles.slider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: floatingComponentStyles.value,\n          children: [lineXOffset, \"px\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2091,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: floatingComponentStyles.cropSection,\n      children: [renderCropControls(), renderCropPreview()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2121,\n      columnNumber: 7\n    }, this), debugMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: floatingComponentStyles.debugPanel,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          marginBottom: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"MQTT Debug:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setDebugMode(false),\n          style: floatingComponentStyles.debugHideButton,\n          children: \"Hide\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '4px 0'\n        },\n        children: [\"Status: \", isMqttConnected ? '✅ Connected' : '❌ Disconnected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '4px 0'\n        },\n        children: [\"Topic ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#4CAF50'\n          },\n          children: mqttTopic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2139,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '4px 0'\n        },\n        children: [\"WebSocket Connection: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#4CAF50'\n          },\n          children: WS_URL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2140,\n          columnNumber: 64\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '4px 0'\n        },\n        children: [\"MQTT Broker: \", mqttSettings.protocol, \"://\", mqttSettings.host, \":\", mqttSettings.port, \" (via WebSocket server)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '4px 0'\n        },\n        children: [\"Waiting for full frame: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: isWaitingForResponse ? '#f44336' : '#4CAF50'\n          },\n          children: isWaitingForResponse ? 'Yes' : 'No'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2145,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '4px 0'\n        },\n        children: [\"Waiting for crop frame: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: isWaitingForCropResponse ? '#f44336' : '#4CAF50'\n          },\n          children: isWaitingForCropResponse ? 'Yes' : 'No'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2150,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.debugInfoRow,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Display:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2158,\n            columnNumber: 15\n          }, this), \" \", cameraSize.width, \"x\", cameraSize.height]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Aspect Ratio:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2161,\n            columnNumber: 15\n          }, this), \" \", imageAspectRatio.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Resolution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2164,\n            columnNumber: 15\n          }, this), \" \", cameraResolution]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2163,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.debugMessageBlock,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Last published:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2169,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: floatingComponentStyles.debugPre,\n          children: lastPublishedMessage ? JSON.stringify(lastPublishedMessage, null, 2) : 'None'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: floatingComponentStyles.debugMessageBlock,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Last received:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2175,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: floatingComponentStyles.debugPre,\n          children: lastReceivedMessage ? lastReceivedMessage.payload && typeof lastReceivedMessage.payload === 'object' && lastReceivedMessage.payload.image ? `${JSON.stringify({\n            ...lastReceivedMessage,\n            payload: {\n              ...lastReceivedMessage.payload,\n              image: '[Image data truncated]'\n            }\n          }, null, 2)}` : JSON.stringify(lastReceivedMessage, null, 2) : 'None'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2176,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2174,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1945,\n    columnNumber: 5\n  }, this);\n}, \"axEjSX2yDYd4kpkxsN7qM7C0gME=\", false, function () {\n  return [useButtonStyles];\n})), \"axEjSX2yDYd4kpkxsN7qM7C0gME=\", false, function () {\n  return [useButtonStyles];\n});\n\n// Add display name for debugging\n_c2 = MQTTCameraComponent;\nMQTTCameraComponent.displayName = 'MQTTCameraComponent';\nexport default MQTTCameraComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"MQTTCameraComponent$React.forwardRef\");\n$RefreshReg$(_c2, \"MQTTCameraComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useImperativeHandle","useButtonStyles","WS_URL","floatingComponentStyles","spectralConfig","jsxDEV","_jsxDEV","Fragment","_Fragment","cropStyles","cropControls","marginTop","padding","backgroundColor","borderRadius","cropTitle","fontSize","margin","fontWeight","cropInputGroup","display","alignItems","marginBottom","gap","cropLabel","width","color","cropInput","border","cropHint","marginLeft","cropButtonGroup","flexWrap","checkboxGroup","checkboxLabel","userSelect","cursor","checkbox","marginRight","cropPreviewContainer","flexDirection","cropPreviewImage","height","cropPreviewPlaceholder","justifyContent","Object","assign","console","error","SETTINGS_STORAGE_KEY","MIN_LINE_LENGTH","MIN_CROP_SIZE","getSettingsFromStorage","settings","localStorage","getItem","JSON","parse","mqttBroker","port","MQTTCameraComponent","_s","forwardRef","_c","props","ref","onResize","detectorId","buttonVariants","cameraSize","setCameraSize","isResizing","setIsResizing","showResizeInfo","setShowResizeInfo","imageAspectRatio","setImageAspectRatio","mqttTopic","setMqttTopic","mqttClient","setMqttClient","isMqttConnected","setIsMqttConnected","lastMqttResponse","setLastMqttResponse","isStreaming","setIsStreaming","pollingInterval","setPollingInterval","intervalRef","isWaitingForResponse","setIsWaitingForResponse","isWaitingForCropResponse","setIsWaitingForCropResponse","isCameraActive","setIsCameraActive","showAdvancedCapabilities","setShowAdvancedCapabilities","cameraCapabilities","setCameraCapabilities","exposureMode","setExposureMode","isDrawing","setIsDrawing","currentLine","setCurrentLine","isLineDrawn","setIsLineDrawn","lineYOffset","setLineYOffset","lineXOffset","setLineXOffset","originalLineStart","setOriginalLineStart","x","y","originalLineEnd","setOriginalLineEnd","isCropMode","setIsCropMode","isDrawingCrop","setIsDrawingCrop","cropStart","setCropStart","cropEnd","setCropEnd","cropRange","setCropRange","cropInterval","setCropInterval","isCropStreaming","setIsCropStreaming","setCropPreviewImage","cropIntervalRef","cameraResolution","setCameraResolution","showConfigMenu","setShowConfigMenu","cameraConfig","setCameraConfig","camera","exposure_time","exposure_mode","iso","processing","roi","pendingConfig","setPendingConfig","cameraContainerRef","canvasRef","imageRef","animationRequestRef","lastLineUpdateTimeRef","calibrationRef","calibrationPoints","videoRef","mqttClientRef","mqttSettings","setMqttSettings","savedSettings","host","protocol","clientId","Math","random","toString","substr","handleStorageChange","prev","window","addEventListener","removeEventListener","availableResolutions","setAvailableResolutions","lastPublishedMessage","setLastPublishedMessage","lastReceivedMessage","setLastReceivedMessage","debugMode","setDebugMode","log","getSettings","resolution","lineStart","lineEnd","getCropSettings","streamImage","streamCropImage","toGraph","cropToGraph","applyCropSettings","Array","isArray","length","some","val","setStreamCropImage","setCropToGraph","setTimeout","startCropStreaming","startCamera","connectToMqttAndStartStreaming","Promise","resolve","applySettings","shouldReconnect","split","map","Number","disconnectFromMqtt","undefined","finalLine","calculateTransformedLinePosition","sendLineUpdate","redrawCanvas","websocket","WebSocket","onopen","subscribeMessage","topic","payload","send","stringify","subscribeConfig","subscribeCroppedFrame","requestConfigMessage","timestamp","Date","now","diagnosticCheckCallback","readyState","OPEN","resubCroppedFrame","statusRequest","client_id","startStreaming","onmessage","event","rawData","data","debug","imageData","substring","parsedPayload","image","e","warn","updateCropPreviewWithBase64Image","err","configData","w","h","imgW","imgH","updateAspectRatioAndResolutions","updateVideoWithBase64Image","includes","responseData","fullEventData","toLowerCase","tryExtractAndShowImage","onerror","stopStreaming","unsubscribeMessage","close","requestFullFrame","current","setInterval","message","clearInterval","newAspectRatio","abs","baseWidths","newResolutions","round","base64Data","match","img","Image","onload","src","stopCropStreaming","animationId","redrawLoop","requestAnimationFrame","cancelAnimationFrame","stopCamera","line","start","end","start_x","end_x","wsState","handleLineYOffsetChange","newOffset","parseInt","target","value","newLine","handleLineXOffsetChange","getRelativeImageCoordinates","canvas","rect","getBoundingClientRect","canvasX","clientX","left","canvasY","clientY","top","scaleX","naturalWidth","scaleY","naturalHeight","imageX","imageY","renderCameraControls","style","controls","children","primaryButton","onClick","fileName","_jsxFileName","lineNumber","columnNumber","smallSecondary","clearLine","disabled","title","ctx","getContext","clearRect","startLineDrawing","coords","updateLineDrawing","finishLineDrawing","distance","temp","handleResizeStart","preventDefault","stopPropagation","startX","startY","startWidth","startHeight","handleMouseMove","moveEvent","deltaX","newWidth","max","newHeight","handleMouseUp","document","imagePayload","fullData","setFullData","calculatePixelRangesFromWavelengths","point1","position","wavelength","point2","b","a","calculatePixelFromWavelength","channelRanges","CHANNEL_RANGES","pixelRanges","g","r","every","interval","crop_range","to_graph","stream_image","full_data","pixel_ranges","pointsToCropRange","x_min","min","y_min","x_max","y_max","startCropDrawing","updateCropDrawing","finishCropDrawing","newCropRange","requestCroppedFrame","range","handleCropRangeChange","index","toggleCropMode","newCropMode","resetCrop","renderCropControls","type","onChange","step","checked","smallPrimary","renderCropPreview","alt","renderConfigMenu","handleConfigChange","section","key","newConfig","roiIndex","applyConfigChanges","sendCameraConfigUpdate","configMenuContainer","configRow","configLabel","configInput","configToSend","drawImage","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","fillStyle","fill","markerSize","fillRect","settingsKey","savedSettingsStr","calibration","container","mqttInputs","inputLabel","input","placeholder","slider","cameraView","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","transform","aspectRatio","overlayText","connectionStatusOverlay","statusIndicator","resizeInfo","resizeHandle","viewBox","d","strokeWidth","strokeLinecap","lineControls","controlRow","controlLabel","cropSection","debugPanel","debugHideButton","debugInfoRow","toFixed","debugMessageBlock","debugPre","_c2","displayName","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/SpectrometerMQTT/MQTTCameraComponent.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\nimport { WS_URL } from '../../../config';\nimport floatingComponentStyles from '../../../styles/FloatingComponentStyles';\nimport spectralConfig from './spectral_config.json'; // Import the spectral config\n\n// Define local styles for the crop functionality\nconst cropStyles = {\n  cropControls: {\n    marginTop: '10px',\n    padding: '8px',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderRadius: '4px'\n  },\n  cropTitle: {\n    fontSize: '14px',\n    margin: '0 0 8px 0',\n    fontWeight: 'bold'\n  },\n  cropInputGroup: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '8px',\n    gap: '8px'\n  },\n  cropLabel: {\n    width: '50px',\n    fontSize: '14px',\n    color: '#ccc'\n  },\n  cropInput: {\n    width: '60px',\n    backgroundColor: 'rgba(60, 60, 60, 0.7)',\n    border: '1px solid rgba(100, 100, 100, 0.5)',\n    borderRadius: '4px',\n    padding: '4px 8px',\n    color: 'white',\n    fontSize: '14px'\n  },\n  cropHint: {\n    fontSize: '12px',\n    color: '#999',\n    marginLeft: '8px'\n  },\n  cropButtonGroup: {\n    display: 'flex',\n    gap: '8px',\n    marginTop: '8px',\n    flexWrap: 'wrap'\n  },\n  checkboxGroup: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: '12px',\n    marginTop: '8px'\n  },\n  checkboxLabel: {\n    display: 'flex',\n    alignItems: 'center',\n    fontSize: '14px',\n    color: '#ccc',\n    userSelect: 'none',\n    cursor: 'pointer'\n  },\n  checkbox: {\n    marginRight: '5px'\n  },\n  cropPreviewContainer: {\n    marginTop: '10px',\n    padding: '8px',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderRadius: '4px',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  cropPreviewImage: {\n    width: '100%',\n    height: 'auto',\n    borderRadius: '4px',\n    marginTop: '8px'\n  },\n  cropPreviewPlaceholder: {\n    height: '120px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.2)',\n    borderRadius: '4px',\n    color: '#666',\n    marginTop: '8px'\n  }\n};\n\n// Add the crop styles to floatingComponentStyles\nif (floatingComponentStyles) {\n  Object.assign(floatingComponentStyles, cropStyles);\n} else {\n  console.error(\"floatingComponentStyles is undefined\");\n}\n\n// Constants for settings\nconst SETTINGS_STORAGE_KEY = 'fluidicgui_settings';\nconst MIN_LINE_LENGTH = 10; // Minimum length in pixels for a valid line\nconst MIN_CROP_SIZE = 1; // Minimum crop rectangle size\n\n// Helper function to get settings from localStorage\nconst getSettingsFromStorage = () => {\n  try {\n    const settings = localStorage.getItem(SETTINGS_STORAGE_KEY);\n    return settings ? JSON.parse(settings) : {\n      mqttBroker: 'localhost',\n      port: '1883'\n    };\n  } catch (error) {\n    console.error('Error reading settings from localStorage:', error);\n    return {\n      mqttBroker: 'localhost',\n      port: '1883'\n    };\n  }\n};\n\nconst MQTTCameraComponent = React.forwardRef((props, ref) => {\n  const { onResize, detectorId } = props;\n  const buttonVariants = useButtonStyles();\n  \n  // Camera view state\n  const [cameraSize, setCameraSize] = useState({ width: 640, height: 480 });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [imageAspectRatio, setImageAspectRatio] = useState(640/480);\n  \n  // MQTT connection state\n  const [mqttTopic, setMqttTopic] = useState(detectorId || 'spectrometer_1');\n  const [mqttClient, setMqttClient] = useState(null);\n  const [isMqttConnected, setIsMqttConnected] = useState(false);\n  const [lastMqttResponse, setLastMqttResponse] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [pollingInterval, setPollingInterval] = useState(500);\n  const intervalRef = useRef(null);\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n  const [isWaitingForCropResponse, setIsWaitingForCropResponse] = useState(false);\n  \n  // Camera operation state\n  const [isCameraActive, setIsCameraActive] = useState(false);\n  const [showAdvancedCapabilities, setShowAdvancedCapabilities] = useState(false);\n  const [cameraCapabilities, setCameraCapabilities] = useState(null);\n  const [exposureMode, setExposureMode] = useState('continuous');\n  \n  // Line drawing state\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentLine, setCurrentLine] = useState(null);\n  const [isLineDrawn, setIsLineDrawn] = useState(false);\n  \n  // Line adjustment state\n  const [lineYOffset, setLineYOffset] = useState(0);\n  const [lineXOffset, setLineXOffset] = useState(0);\n  const [originalLineStart, setOriginalLineStart] = useState({ x: 0, y: 0 });\n  const [originalLineEnd, setOriginalLineEnd] = useState({ x: 0, y: 0 });\n  \n  // Crop frame state\n  const [isCropMode, setIsCropMode] = useState(false);\n  const [isDrawingCrop, setIsDrawingCrop] = useState(false);\n  const [cropStart, setCropStart] = useState(null);\n  const [cropEnd, setCropEnd] = useState(null);\n  const [cropRange, setCropRange] = useState([0, 0, 0, 0]); // [x_min, y_min, x_max, y_max]\n  const [cropInterval, setCropInterval] = useState(0);\n  const [isCropStreaming, setIsCropStreaming] = useState(false);\n  const [cropPreviewImage, setCropPreviewImage] = useState(null);\n  const cropIntervalRef = useRef(null);\n  \n  // Camera settings\n  const [cameraResolution, setCameraResolution] = useState('640x480');\n  const [showConfigMenu, setShowConfigMenu] = useState(false);\n  const [cameraConfig, setCameraConfig] = useState({\n    camera: { exposure_time: null, exposure_mode: 'auto', iso: null },\n    processing: { roi: [0, 0, 1280, 720] }\n  });\n  const [pendingConfig, setPendingConfig] = useState(null);\n  \n  // Refs\n  const cameraContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n  const animationRequestRef = useRef(null);\n  const lastLineUpdateTimeRef = useRef(null);\n  const calibrationRef = useRef({ calibrationPoints: [] }); // Store calibration points\n  const videoRef = useRef(null);\n  const mqttClientRef = useRef(null);\n  \n  // MQTT settings\n  const [mqttSettings, setMqttSettings] = useState(() => {\n    const savedSettings = getSettingsFromStorage();\n    return {\n      host: savedSettings.mqttBroker || 'localhost',\n      port: savedSettings.port || 1883,\n      protocol: 'ws',\n      clientId: `fluidic_gui_${Math.random().toString(16).substr(2, 8)}`\n    };\n  });\n  \n  // Effects to reload settings if they change in localStorage\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const savedSettings = getSettingsFromStorage();\n      setMqttSettings(prev => ({\n        ...prev,\n        host: savedSettings.mqttBroker || prev.host,\n        port: savedSettings.port || prev.port\n      }));\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n  \n  const [availableResolutions, setAvailableResolutions] = useState(['640x480', '800x600', '1024x768', '1280x960']);\n  const [lastPublishedMessage, setLastPublishedMessage] = useState(null);\n  const [lastReceivedMessage, setLastReceivedMessage] = useState(null);\n  const [debugMode, setDebugMode] = useState(true);\n  \n  // Debug log for detectorId\n  console.log('[MQTTCameraComponent] Initialized with detectorId:', detectorId);\n  \n  // Debug log when mqttTopic changes\n  useEffect(() => {\n    console.log('[MQTTCameraComponent] MQTT topic set to:', mqttTopic);\n  }, [mqttTopic]);\n  \n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    // Get current camera settings\n    getSettings: () => {\n      return {\n        mqttTopic: mqttTopic,\n        pollingInterval: pollingInterval,\n        mqttBroker: mqttSettings,\n        resolution: cameraResolution,\n        // Line drawing settings\n        isLineDrawn: isLineDrawn,\n        lineStart: originalLineStart,\n        lineEnd: originalLineEnd,\n        lineYOffset: lineYOffset,\n        lineXOffset: lineXOffset,\n        // Crop settings\n        cropRange: cropRange,\n        cropInterval: cropInterval\n      };\n    },\n    \n    // Get just the crop frame settings\n    getCropSettings: () => {\n      return {\n        cropRange: cropRange,\n        cropInterval: cropInterval,\n        isCropMode: isCropMode,\n        isCropStreaming: isCropStreaming,\n        streamImage: streamCropImage,\n        toGraph: cropToGraph\n      };\n    },\n    \n    // Apply crop settings from saved config\n    applyCropSettings: (settings) => {\n      if (!settings) return false;\n      \n      try {\n        // Apply crop range settings\n        if (settings.cropRange && Array.isArray(settings.cropRange) && settings.cropRange.length === 4) {\n          setCropRange(settings.cropRange);\n          \n          // If crop range is valid (not all zeros), enable crop mode\n          if (settings.cropRange.some(val => val !== 0)) {\n            setIsCropMode(true);\n          }\n        }\n        \n        // Apply crop interval\n        if (typeof settings.cropInterval === 'number') {\n          setCropInterval(settings.cropInterval);\n        }\n        \n        // Apply stream image setting if available\n        if (typeof settings.streamImage === 'boolean') {\n          setStreamCropImage(settings.streamImage);\n        }\n        \n        // Apply to graph setting if available\n        if (typeof settings.toGraph === 'boolean') {\n          setCropToGraph(settings.toGraph);\n        }\n        \n        // Apply crop streaming state if explicitly set\n        if (typeof settings.isCropStreaming === 'boolean' && settings.isCropStreaming) {\n          // Only start streaming if we have a valid crop range and mqtt is connected\n          if (cropRange.some(val => val !== 0) && isMqttConnected) {\n            // Wait for next tick to ensure crop range is updated\n            setTimeout(() => {\n              startCropStreaming();\n            }, 500);\n          }\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Error applying crop settings:', error);\n        return false;\n      }\n    },\n    \n    // Expose startCamera method to parent\n    startCamera: async () => {\n      if (!isCameraActive) {\n        return connectToMqttAndStartStreaming();\n      }\n      return Promise.resolve(false);\n    },\n    \n    // Apply saved camera settings\n    applySettings: async (settings) => {\n      if (!settings) return false;\n      \n      // Disconnect and reconnect if topic changes\n      let shouldReconnect = false;\n      if (settings.mqttTopic && settings.mqttTopic !== mqttTopic) {\n          setMqttTopic(settings.mqttTopic);\n        shouldReconnect = true;\n        }\n        \n      try {\n        // Apply MQTT settings if provided\n        if (settings.pollingInterval) {\n          setPollingInterval(settings.pollingInterval);\n        }\n        \n        // Apply resolution\n        if (settings.resolution) {\n          setCameraResolution(settings.resolution);\n          \n          // Parse the resolution into width and height\n          const [width, height] = settings.resolution.split('x').map(Number);\n          \n          // Update camera size based on resolution\n          setCameraSize({ width, height });\n          \n          // Update aspect ratio\n          if (width && height) {\n            setImageAspectRatio(width / height);\n          }\n        }\n\n        // Apply crop settings if available\n        if (settings.cropRange && Array.isArray(settings.cropRange) && settings.cropRange.length === 4) {\n          setCropRange(settings.cropRange);\n          \n          // Enable crop mode if we have a valid crop range\n          if (settings.cropRange.some(val => val !== 0)) {\n            setIsCropMode(true);\n          }\n        }\n        \n        if (typeof settings.cropInterval === 'number') {\n          setCropInterval(settings.cropInterval);\n        }\n        \n        // Apply stream image setting if available\n        if (typeof settings.streamImage === 'boolean') {\n          setStreamCropImage(settings.streamImage);\n        }\n        \n        // Apply to graph setting if available\n        if (typeof settings.toGraph === 'boolean') {\n          setCropToGraph(settings.toGraph);\n        }\n        \n        // If camera is not active OR if topic changed, start/restart connection\n        if (!isCameraActive || shouldReconnect) {\n          if (isCameraActive) {\n            disconnectFromMqtt(); // Disconnect first if topic changed\n            await new Promise(resolve => setTimeout(resolve, 500)); // Wait for disconnect\n          }\n          // Short delay to allow state update\n          setTimeout(() => connectToMqttAndStartStreaming(), 100);\n          \n          // Wait for camera to start before continuing\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n        \n        // After camera settings are applied, handle line drawing settings\n        if (settings.isLineDrawn && settings.lineStart && settings.lineEnd) {\n          // Set original line points\n          setOriginalLineStart(settings.lineStart);\n          setOriginalLineEnd(settings.lineEnd);\n          \n          // Set current line points (will be adjusted by offset/rotation later)\n          setCurrentLine(settings);\n          \n          // Mark line as drawn\n          setIsLineDrawn(true);\n          \n          // Apply line adjustments\n          if (settings.lineYOffset !== undefined) {\n            setLineYOffset(settings.lineYOffset);\n          }\n          \n          if (settings.lineXOffset !== undefined) {\n            setLineXOffset(settings.lineXOffset);\n          }\n          \n          // Send the loaded line to the backend immediately\n          // Use a timeout to ensure connection is established after potential restart\n          setTimeout(() => {\n            const finalLine = calculateTransformedLinePosition(settings.lineStart, settings.lineEnd, settings.lineYOffset, settings.lineXOffset);\n            sendLineUpdate(finalLine);\n            redrawCanvas(); // Redraw with the loaded line\n          }, 1500); // Increased delay to ensure connection\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Error applying camera settings:', error);\n        return false;\n      }\n    }\n  }));\n  \n  // Connect to MQTT broker and start streaming\n  const connectToMqttAndStartStreaming = async () => {\n    try {\n      // Use the WS_URL from config instead of trying to connect directly to MQTT broker\n      console.log('Connecting to WebSocket server at:', WS_URL);\n      \n      // Create WebSocket connection using WS_URL\n      const websocket = new WebSocket(WS_URL);\n      \n      websocket.onopen = () => {\n        console.log('Connected to WebSocket server successfully');\n        setIsMqttConnected(true);\n        \n        // Explicitly subscribe to the response topic via WebSocket\n        const subscribeMessage = {\n          topic: \"common/subscribe\",\n          payload: `${mqttTopic}/response/full_frame`\n        };\n        \n        websocket.send(JSON.stringify(subscribeMessage));\n        \n        // Subscribe to config response topic\n        const subscribeConfig = {\n          topic: \"common/subscribe\",\n          payload: `${mqttTopic}/response/config`\n        };\n        websocket.send(JSON.stringify(subscribeConfig));\n\n        // Subscribe to cropped frame response topic\n        const subscribeCroppedFrame = {\n          topic: \"common/subscribe\",\n          payload: `${mqttTopic}/response/crop_frame`\n        };\n        console.log(`[MQTTCamera] Subscribing to cropped frame topic: ${subscribeCroppedFrame.payload}`);\n        websocket.send(JSON.stringify(subscribeCroppedFrame));\n\n        // Request current config\n        const requestConfigMessage = {\n          topic: `${mqttTopic}/request/config`,\n          payload: { timestamp: Date.now() }\n        };\n        websocket.send(JSON.stringify(requestConfigMessage));\n        setLastPublishedMessage(requestConfigMessage);\n        \n        // Add a diagnostic function to verify and re-subscribe if needed\n        const diagnosticCheckCallback = () => {\n          if (websocket && websocket.readyState === WebSocket.OPEN) {\n            console.log(\"[MQTTCamera] Running subscription diagnostic check\");\n            \n            // Re-subscribe to crop_frame topic to ensure it's active\n            const resubCroppedFrame = {\n              topic: \"common/subscribe\",\n              payload: `${mqttTopic}/response/crop_frame`\n            };\n            websocket.send(JSON.stringify(resubCroppedFrame));\n            console.log(`[MQTTCamera] Re-subscribed to cropped frame topic: ${resubCroppedFrame.payload}`);\n            \n            // Request subscription status if supported by server\n            const statusRequest = {\n              topic: \"common/subscription_status\",\n              payload: { client_id: mqttSettings.clientId }\n            };\n            websocket.send(JSON.stringify(statusRequest));\n          }\n        };\n        \n        // Run diagnostic check after a delay\n        setTimeout(diagnosticCheckCallback, 3000);\n        \n        // Start streaming right away\n        startStreaming(websocket);\n      };\n\n      websocket.onmessage = (event) => {\n        try {\n          const rawData = event.data;\n          console.debug('[MQTTCamera] Raw WS Message:', rawData);\n          const data = JSON.parse(rawData);\n          \n          // Handle cropped frame response\n          if (data.topic === `${mqttTopic}/response/crop_frame`) {\n            try {\n              console.log(\"[MQTTCamera] Received cropped frame response:\", data);\n              let imageData = null;\n              \n              // Handle payload based on its type\n              if (data.payload) {\n                if (typeof data.payload === 'string') {\n                  try {\n                    console.log(\"[MQTTCamera] Parsing string payload:\", data.payload.substring(0, 100) + \"...\");\n                    const parsedPayload = JSON.parse(data.payload);\n                    if (parsedPayload.image) {\n                      imageData = parsedPayload.image;\n                      console.log(\"[MQTTCamera] Found image in parsed payload, length:\", imageData.length);\n                    }\n                  } catch (e) {\n                    console.warn(\"[MQTTCamera] Error parsing payload:\", e);\n                    // Silent catch - not valid JSON\n                  }\n                } else if (typeof data.payload === 'object' && data.payload.image) {\n                  imageData = data.payload.image;\n                  console.log(\"[MQTTCamera] Found image in object payload, length:\", imageData.length);\n                }\n              }\n              \n              if (imageData) {\n                updateCropPreviewWithBase64Image(imageData);\n                console.log(\"[MQTTCamera] Updated crop preview with image data\");\n              } else {\n                console.warn('⚠️ Cropped frame response has no image data');\n              }\n\n              // Mark that we've received a crop response and can send another request\n              setIsWaitingForCropResponse(false);\n            } catch (err) {\n              console.error('Error processing cropped frame response:', err);\n              setIsWaitingForCropResponse(false); // Reset flag even on error\n            }\n            return; // Exit after handling cropped frame\n          }\n          \n          // Handle Config Response\n          if (data.topic === `${mqttTopic}/response/config`) {\n            try {\n              let configData = null;\n              console.debug('[MQTTCamera] Received config response, Payload type:', typeof data.payload, 'Payload:', data.payload);\n              if (data.payload) {\n                if (typeof data.payload === 'string') {\n                  // Attempt to parse if it looks like JSON\n                  try {\n                  configData = JSON.parse(data.payload);\n                    console.debug('[MQTTCamera] Parsed string payload to config object:', configData);\n                  } catch (e) {\n                    console.warn('[MQTTCamera] Config payload is a string but not valid JSON:', data.payload, 'Error:', e);\n                    // Keep configData null\n                  }\n                } else { // Payload is already an object\n                  configData = data.payload;\n                  console.debug('[MQTTCamera] Config payload is already an object:', configData);\n                }\n              }\n              \n              if (configData) {\n                console.log(\"[MQTTCamera] Processing received config:\", configData);\n                // Validate received config structure slightly\n                if (configData.camera && configData.processing && configData.processing.roi) {\n                  setCameraConfig(configData);\n                  setPendingConfig(JSON.parse(JSON.stringify(configData))); // Update pending config too\n                  // Update relevant states based on config if needed (e.g., ROI might affect cameraSize view)\n                  const [w, h] = configData.camera.resolution || [640, 480]; // Fallback resolution\n                  if (w && h) {\n                  setCameraSize({ width: w, height: h });\n                  setImageAspectRatio(w / h);\n                  }\n                } else {\n                  console.warn(\"Received invalid config structure\", configData);\n                }\n              } else {\n                console.warn(\"Received empty or non-parsable config response payload\");\n                // Maybe add error state here?\n              }\n            } catch (err) {\n              console.error('Error processing config response:', err, 'Data:', data.payload);\n            }\n            return; // Processed config, exit\n          }\n          \n          // DIRECTLY CHECK for the specific response topic first\n          if (data.topic === `${mqttTopic}/response/full_frame`) {\n            try {\n              let imageData = null;\n              \n              // Handle payload based on its type\n              let resolution = null;\n              if (data.payload) {\n                if (typeof data.payload === 'string') {\n                  try {\n                    const parsedPayload = JSON.parse(data.payload);\n                    if (parsedPayload.image) {\n                      imageData = parsedPayload.image;\n                    }\n                    if (parsedPayload.resolution) {\n                      resolution = parsedPayload.resolution;\n                    }\n                  } catch (e) {\n                    // Silently continue\n                  }\n                }\n                else if (typeof data.payload === 'object' && data.payload.image) {\n                  imageData = data.payload.image;\n                  if (data.payload.resolution) {\n                    resolution = data.payload.resolution;\n                  }\n                }\n              }\n              \n              if (imageData) {\n                // If resolution was sent with the image, update aspect ratio based on it\n                if (resolution && Array.isArray(resolution) && resolution.length === 2) {\n                  const [imgW, imgH] = resolution;\n                  if (imgW > 0 && imgH > 0) {\n                    updateAspectRatioAndResolutions(imgW, imgH);\n                  }\n                }\n                setLastMqttResponse(data.payload);\n                updateVideoWithBase64Image(imageData);\n              } else {\n                console.warn('⚠️ Response has correct topic but no image data found');\n              }\n\n              // Mark that we've received a response and can send another request\n              setIsWaitingForResponse(false);\n            } catch (err) {\n              console.error('Error processing response:', err);\n              setIsWaitingForResponse(false); // Reset flag even on error\n            }\n            \n            // Return after handling the main topic to avoid redundant processing\n            return;\n          }\n          \n          // Log unhandled message topics for debugging\n          if (data.topic && data.topic.includes(mqttTopic) && \n              data.topic !== `${mqttTopic}/response/full_frame` && \n              data.topic !== `${mqttTopic}/response/crop_frame` && \n              data.topic !== `${mqttTopic}/response/config` &&\n              data.topic !== `${mqttTopic}/response/data`) {\n            console.log(`[MQTTCamera] Unhandled topic received: ${data.topic}`, data);\n          }\n          \n          // Fallback: Check for common/device_response which might contain our response\n          if (data.topic === 'common/device_response') {\n            // Process common/device_response\n            if (data.payload && typeof data.payload === 'string') {\n              if (data.payload.includes(mqttTopic)) {\n                try {\n                  if (data.payload.includes('image')) {\n                    const responseData = JSON.parse(data.payload);\n                    if (responseData.image) {\n                      updateVideoWithBase64Image(responseData.image);\n                      setLastMqttResponse(responseData);\n                    }\n                  }\n                } catch (err) {\n                  console.error('Error parsing device response:', err);\n                }\n              }\n            }\n          }\n          \n          // Final fallback: Look for anything that might contain image data\n          const fullEventData = JSON.stringify(data).toLowerCase();\n          if (\n            fullEventData.includes('image') || \n            fullEventData.includes('frame') || \n            fullEventData.includes('response')\n          ) {\n            tryExtractAndShowImage(data);\n          }\n          \n        } catch (error) {\n          console.error('❌ Error processing WebSocket message:', error, 'Raw data:', event.data);\n          // Reset waiting flags in case of error\n          setIsWaitingForResponse(false);\n          setIsWaitingForCropResponse(false);\n        }\n      };\n\n      websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsMqttConnected(false);\n        setIsCameraActive(false);\n      };\n\n      setMqttClient(websocket);\n      setIsCameraActive(true);\n      \n      return true;\n    } catch (error) {\n      console.error('Error connecting to WebSocket:', error);\n      return false;\n    }\n  };\n  \n  // Disconnect from MQTT broker\n  const disconnectFromMqtt = () => {\n    // Stop streaming first\n    stopStreaming();\n    \n    // Unsubscribe from the response topic before closing the connection\n    if (mqttClient && mqttClient.readyState === WebSocket.OPEN) {\n      // Send unsubscribe message\n      const unsubscribeMessage = {\n        topic: \"common/unsubscribe\", \n        payload: `${mqttTopic}/response/full_frame`\n      };\n      \n      mqttClient.send(JSON.stringify(unsubscribeMessage));\n      \n      // Add a small delay before closing to ensure the unsubscribe is processed\n      setTimeout(() => {\n        mqttClient.close();\n      }, 100);\n    }\n    \n    setIsMqttConnected(false);\n    setIsCameraActive(false);\n    setMqttClient(null);\n  };\n  \n  // Start streaming frames\n  const startStreaming = (websocket) => {\n    if (!websocket) return;\n    \n    setIsStreaming(true);\n    \n    // Send first frame request immediately\n    requestFullFrame(websocket);\n    \n    // Set up interval to check if we should request a new frame\n    intervalRef.current = setInterval(() => {\n      // Only send a new request if:\n      // 1. We're not in crop mode\n      // 2. We're not already waiting for a response\n      // 3. WebSocket is connected\n      if (!isCropMode && !isWaitingForResponse && websocket && websocket.readyState === WebSocket.OPEN) {\n        requestFullFrame(websocket);\n      }\n    }, pollingInterval);\n  };\n  \n  // Request a single full frame\n  const requestFullFrame = (websocket) => {\n    // Format the message according to the system's expected format\n    const message = {\n      topic: `${mqttTopic}/request/full_frame`,\n      payload: { timestamp: Date.now() }\n    };\n    \n    setLastPublishedMessage(message);\n    setIsWaitingForResponse(true);\n    \n    websocket.send(JSON.stringify(message));\n  };\n  \n  // Stop streaming frames\n  const stopStreaming = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n      setIsStreaming(false);\n    }\n  };\n  \n  // Update aspect ratio and available resolutions when we receive an image\n  const updateAspectRatioAndResolutions = (width, height) => {\n    const newAspectRatio = width / height;\n    if (Math.abs(newAspectRatio - imageAspectRatio) > 0.01) { // Small threshold to avoid unnecessary updates\n      setImageAspectRatio(newAspectRatio);\n      \n      // Generate resolution options that match this aspect ratio\n      const baseWidths = [640, 800, 1024, 1280, 1600, 1920];\n      const newResolutions = baseWidths.map(w => {\n        const h = Math.round(w / newAspectRatio);\n        return `${w}x${h}`;\n      });\n      \n      setAvailableResolutions(newResolutions);\n      \n      // Set cameraResolution to match actual camera resolution\n      setCameraResolution(`${width}x${height}`);\n      \n      // Adjust current camera size to match aspect ratio\n      setCameraSize(prev => ({\n        width: prev.width,\n        height: Math.round(prev.width / newAspectRatio)\n      }));\n    }\n  };\n\n  // Update video with base64 encoded image data\n  const updateVideoWithBase64Image = (base64Data) => {\n    if (!base64Data) {\n      console.error('Cannot update image: missing base64 data');\n      return;\n    }\n    \n    if (!canvasRef.current) {\n      console.error('Cannot update image: canvas reference is null');\n      return;\n    }\n\n    // Validate that the base64 string looks correct\n    if (!base64Data.match(/^[A-Za-z0-9+/=]+$/)) {\n      console.error('Invalid base64 data format. Data does not appear to be valid base64.');\n      return;\n    }\n\n    // Create an image element to load the data\n    const img = new Image();\n    \n    // Add load event listener before setting src\n    img.onload = () => {\n      // Store the image reference for later use\n      imageRef.current = img;\n      \n      // Update aspect ratio and available resolutions\n      updateAspectRatioAndResolutions(img.width, img.height);\n      \n      // Call redrawCanvas instead of drawing directly here\n      redrawCanvas(); \n    };\n    \n    img.onerror = (error) => {\n      console.error('Failed to load image:', error);\n      console.error('Image load failed. This usually means the base64 data is invalid or incomplete.');\n    };\n    \n    // Set the image source to the base64 data\n    try {\n      img.src = `data:image/jpeg;base64,${base64Data}`;\n    } catch (e) {\n      console.error('Error setting image source:', e);\n    }\n  };\n  \n  // Update preview with base64 encoded cropped image data\n  const updateCropPreviewWithBase64Image = (base64Data) => {\n    if (!base64Data) {\n      console.error('Cannot update crop preview: missing base64 data');\n      return;\n    }\n\n    // Set the preview image data\n    setCropPreviewImage(`data:image/jpeg;base64,${base64Data}`);\n  };\n  \n  // Clean up on component unmount\n  useEffect(() => {\n    return () => {\n      stopStreaming();\n      stopCropStreaming();\n      disconnectFromMqtt();\n    };\n  }, []);\n  \n  // Initialize canvas size when video size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      canvasRef.current.width = cameraSize.width;\n      canvasRef.current.height = cameraSize.height;\n      \n      // If line is drawn, redraw it when canvas size changes\n      if (isLineDrawn) {\n        // Ensure the redraw happens after the canvas size is updated\n        // by using a small timeout\n        setTimeout(() => {\n          redrawCanvas(); // Use redrawCanvas which handles coordinates\n          \n          // Double-check with another redraw after a slight delay\n          setTimeout(() => redrawCanvas(), 100);\n        }, 0);\n      }\n    }\n  }, [cameraSize.width, cameraSize.height, isLineDrawn]);\n  \n  // Effect for continuous redrawing of the canvas (image + line)\n  useEffect(() => {\n    let animationId;\n\n    // Function to continuously redraw the canvas (image + line)\n    const redrawLoop = () => {\n      if (canvasRef.current) {\n        redrawCanvas();\n      }\n      animationId = requestAnimationFrame(redrawLoop);\n    };\n\n    // Start animation loop if camera is active\n    if (isCameraActive || isLineDrawn) {\n      animationId = requestAnimationFrame(redrawLoop);\n      console.debug(\"[Animation] Starting redraw loop\");\n    }\n\n    // Cleanup function\n    return () => {\n      if (animationId) {\n        console.debug(\"[Animation] Stopping redraw loop\");\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [isCameraActive, isLineDrawn]); // Re-run when camera activity or line drawing state changes\n\n  // Start camera stream (now connects to MQTT)\n  const startCamera = async () => {\n    return connectToMqttAndStartStreaming();\n  };\n  \n  // Stop camera stream (now disconnects from MQTT)\n  const stopCamera = () => {\n    disconnectFromMqtt();\n  };\n  \n  // Function to send the line update to the backend\n  const sendLineUpdate = (line) => {\n    if (mqttClient && mqttClient.readyState === WebSocket.OPEN && line) {\n      // Ensure we have valid coordinates\n      if (!line.start || !line.end) {\n        console.warn('Invalid line coordinates:', line);\n        return;\n      }\n\n      // Send integer coordinates\n      const payload = {\n        start_x: Math.round(line.start.x),\n        end_x: Math.round(line.end.x),\n        y: Math.round(line.start.y) // Y is the same for start and end since line is horizontal\n      };\n\n      const message = {\n        topic: `${mqttTopic}/request/set_line`,\n        payload: payload\n      };\n\n      console.log(\"Sending line update:\", message);\n      mqttClient.send(JSON.stringify(message));\n      setLastPublishedMessage(message);\n    } else {\n      console.warn('Cannot send line update: WebSocket not connected or line not defined.', {\n        wsState: mqttClient?.readyState,\n        line: line\n      });\n    }\n  };\n  \n  // Calculate the current line position with offsets applied\n  const calculateTransformedLinePosition = () => {\n    if (!originalLineStart || !originalLineEnd) return null;\n\n    // Return the original line coordinates with any offsets applied\n    return {\n      start: {\n        x: originalLineStart.x,\n        y: originalLineStart.y\n      },\n      end: {\n        x: originalLineEnd.x,\n        y: originalLineEnd.y\n      }\n    };\n  };\n  \n  // Handle line Y-offset adjustment\n  const handleLineYOffsetChange = (e) => {\n    const newOffset = parseInt(e.target.value);\n    setLineYOffset(newOffset);\n    // Send update only on adjustment, not during initial draw\n    if (isLineDrawn && originalLineStart && originalLineEnd) { \n        const newLine = calculateTransformedLinePosition(originalLineStart, originalLineEnd, newOffset, lineXOffset);\n        // Force redraw immediately to improve responsiveness\n        redrawCanvas();\n        sendLineUpdate(newLine);\n    }\n  };\n  \n  // Handle line X-offset adjustment\n  const handleLineXOffsetChange = (e) => {\n    const newOffset = parseInt(e.target.value);\n    setLineXOffset(newOffset);\n    // Send update only on adjustment, not during initial draw\n    if (isLineDrawn && originalLineStart && originalLineEnd) {\n        const newLine = calculateTransformedLinePosition(originalLineStart, originalLineEnd, lineYOffset, newOffset);\n        // Force redraw immediately to improve responsiveness  \n        redrawCanvas();\n        sendLineUpdate(newLine);\n    }\n  };\n  \n  // Convert canvas coordinates to relative image coordinates\n  const getRelativeImageCoordinates = (event) => {\n    if (!canvasRef.current || !imageRef.current) return null;\n\n    const canvas = canvasRef.current;\n    const image = imageRef.current;\n    const rect = canvas.getBoundingClientRect();\n\n    // Get click coordinates relative to canvas\n    const canvasX = event.clientX - rect.left;\n    const canvasY = event.clientY - rect.top;\n\n    // Calculate scale factors\n    const scaleX = image.naturalWidth / rect.width;\n    const scaleY = image.naturalHeight / rect.height;\n    const imageX = Math.round(canvasX * scaleX);\n    const imageY = Math.round(canvasY * scaleY);\n\n    // Add 2px margin to boundaries\n    const margin = 2;\n    if (imageX < margin || imageX > image.naturalWidth - margin ||\n        imageY < margin || imageY > image.naturalHeight - margin) {\n      console.warn('Click outside image boundaries');\n      return null;\n    }\n\n    return {\n      x: Math.round(imageX),\n      y: Math.round(imageY)\n    };\n  };\n\n  // Render camera controls\n  const renderCameraControls = () => {\n    return (\n      <div style={floatingComponentStyles.controls}>\n        {/* Camera/MQTT connection controls */}\n        {!isCameraActive ? (\n          <button \n            style={buttonVariants.primaryButton}\n            onClick={startCamera}\n          >\n            Connect to Device\n          </button>\n        ) : (\n          <>\n            <button \n              style={{\n                ...buttonVariants.primaryButton,\n                backgroundColor: 'rgba(255, 50, 50, 0.7)',\n              }}\n              onClick={stopCamera}\n            >\n              Disconnect\n            </button>\n            \n            {isLineDrawn ? (\n              <>\n                <button \n                  style={buttonVariants.smallSecondary}\n                  onClick={clearLine}\n                >\n                  Clear Line\n                </button>\n                <button \n                  style={buttonVariants.smallSecondary} \n                  disabled={true} // Disable extraction button as it's now handled by backend\n                  title=\"Data extraction handled by backend\"\n                >\n                  Extract (Backend)\n                </button>\n              </>\n            ) : (\n              <button \n                style={buttonVariants.smallSecondary}\n                disabled={isDrawing}\n                title=\"Click and drag on video to draw a line\"\n              >\n                Draw Line\n              </button>\n            )}\n          </>\n        )}\n      </div>\n    );\n  };\n  \n  // Clear the drawn line\n  const clearLine = () => {\n    setIsLineDrawn(false);\n    setIsDrawing(false);\n    setCurrentLine(null);\n    \n    // Send message to backend to clear the line (optional, or send invalid coords)\n    sendLineUpdate({ start: { x: -1, y: -1 }, end: { x: -1, y: -1 } }); // Send dummy coords\n    \n    // Clear canvas\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      // Need to redraw the image after clearing\n      if (imageRef.current) {\n          redrawCanvas();\n      }\n    }\n  };\n\n  // Start line drawing on mouse down\n  const startLineDrawing = (event) => {\n    if (!canvasRef.current || !imageRef.current) return;\n\n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) {\n      console.warn('Invalid start coordinates');\n      return;\n    }\n\n    setIsDrawing(true);\n    setCurrentLine({\n      start: coords,\n      end: coords\n    });\n    console.log('Started line at:', coords);\n  };\n\n  // Update line drawing on mouse move\n  const updateLineDrawing = (event) => {\n    if (!isDrawing || !canvasRef.current || !imageRef.current) return;\n\n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) {\n      console.warn('Invalid move coordinates');\n      return;\n    }\n\n    // Force horizontal line by keeping Y coordinate the same as start\n    coords.y = currentLine.start.y;\n\n    setCurrentLine(prev => ({\n      ...prev,\n      end: coords\n    }));\n\n    redrawCanvas();\n  };\n\n  // Finish line drawing on mouse up\n  const finishLineDrawing = (event) => {\n    if (!isDrawing || !canvasRef.current || !imageRef.current) return;\n\n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) {\n      console.warn('Invalid end coordinates');\n      setIsDrawing(false);\n      setCurrentLine(null);\n      return;\n    }\n\n    // Force horizontal line\n    coords.y = currentLine.start.y;\n\n    const finalLine = {\n      start: currentLine.start,\n      end: coords\n    };\n\n    // Calculate distance\n    const distance = Math.abs(finalLine.end.x - finalLine.start.x);\n    console.log('Line distance:', distance, 'px');\n\n    if (distance < MIN_LINE_LENGTH) {\n      console.warn(`Line too short (distance: ${distance}px). Clearing.`);\n      setIsDrawing(false);\n      setCurrentLine(null);\n      redrawCanvas();\n      return;\n    }\n\n    // Ensure start_x is always less than end_x\n    if (finalLine.start.x > finalLine.end.x) {\n      const temp = finalLine.start;\n      finalLine.start = finalLine.end;\n      finalLine.end = temp;\n    }\n\n    console.log('Finished line:', finalLine);\n    setIsDrawing(false);\n    setCurrentLine(finalLine);\n    sendLineUpdate(finalLine);\n    redrawCanvas();\n  };\n  \n  // Handle resize start\n  const handleResizeStart = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = cameraSize.width;\n    const startHeight = cameraSize.height;\n    \n    setIsResizing(true);\n    setShowResizeInfo(true);\n    \n    const handleMouseMove = (moveEvent) => {\n      const deltaX = moveEvent.clientX - startX;\n      \n      // Calculate new width, constrained to minimum of 320px\n      const newWidth = Math.max(320, startWidth + deltaX);\n      \n      // Calculate height based on aspect ratio\n      const newHeight = Math.round(newWidth / imageAspectRatio);\n      \n      setCameraSize({\n        width: newWidth,\n        height: newHeight\n      });\n      \n      // Notify parent if onResize callback is provided\n      if (onResize) {\n        onResize({ width: newWidth, height: newHeight });\n      }\n      \n      moveEvent.preventDefault();\n    };\n    \n    const handleMouseUp = () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      \n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 1000);\n    };\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Helper function to try extracting and displaying image data from various message formats\n  const tryExtractAndShowImage = (data) => {\n    try {\n      // Check multiple potential payload locations\n      let imageData = null;\n      let imagePayload = null;\n      \n      // Case 1: data.payload is an object with image property\n      if (data.payload && typeof data.payload === 'object' && data.payload.image) {\n        imageData = data.payload.image;\n        imagePayload = data.payload;\n      }\n      // Case 2: data.payload is a string that might be JSON\n      else if (data.payload && typeof data.payload === 'string') {\n        try {\n          const parsedPayload = JSON.parse(data.payload);\n          if (parsedPayload && parsedPayload.image) {\n            imageData = parsedPayload.image;\n            imagePayload = parsedPayload;\n          }\n        } catch (e) {\n          // Silent catch - not valid JSON\n        }\n      }\n      // Case 3: data itself has an image property\n      else if (data.image) {\n        imageData = data.image;\n        imagePayload = data;\n      }\n      \n      if (imageData) {\n        setLastMqttResponse(imagePayload);\n        updateVideoWithBase64Image(imageData);\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      console.error('Error trying to extract image data:', err);\n      return false;\n    }\n  };\n\n  // State variables for camera settings\n  const [cropToGraph, setCropToGraph] = useState(false);\n  const [streamCropImage, setStreamCropImage] = useState(true); // Default to true for backward compatibility\n  const [fullData, setFullData] = useState(false); // Control whether to send full channel data or optimized data\n\n  // Add a function to calculate pixel ranges from wavelength ranges\n  const calculatePixelRangesFromWavelengths = (calibrationPoints) => {\n    if (!calibrationPoints || calibrationPoints.length < 2) {\n      console.warn(\"Cannot calculate pixel ranges: insufficient calibration points\");\n      return null;\n    }\n\n    // Extract calibration points\n    const point1 = {\n      position: calibrationPoints[0].position,\n      wavelength: calibrationPoints[0].wavelength\n    };\n    \n    const point2 = {\n      position: calibrationPoints[1].position,\n      wavelength: calibrationPoints[1].wavelength\n    };\n\n    // Calculate the linear mapping from wavelength to position\n    // wavelength = a + b * position\n    // position = (wavelength - a) / b\n    const b = (point2.wavelength - point1.wavelength) / (point2.position - point1.position);\n    const a = point1.wavelength - (b * point1.position);\n\n    // Convert position (0-1) to pixel ranges using the linear mapping\n    const calculatePixelFromWavelength = (wavelength) => {\n      // The inverse transform: position = (wavelength - a) / b\n      return (wavelength - a) / b;\n    };\n\n    // Extract channel ranges from spectral_config.json\n    const channelRanges = spectralConfig.CHANNEL_RANGES;\n    \n    // Calculate pixel ranges for each channel\n    const pixelRanges = {\n      b: [\n        calculatePixelFromWavelength(channelRanges.b[0]),\n        calculatePixelFromWavelength(channelRanges.b[1])\n      ],\n      g: [\n        calculatePixelFromWavelength(channelRanges.g[0]),\n        calculatePixelFromWavelength(channelRanges.g[1])\n      ],\n      r: [\n        calculatePixelFromWavelength(channelRanges.r[0]),\n        calculatePixelFromWavelength(channelRanges.r[1])\n      ]\n    };\n\n    return pixelRanges;\n  };\n\n  // Start crop frame streaming\n  const startCropStreaming = () => {\n    if (!mqttClient || mqttClient.readyState !== WebSocket.OPEN) {\n      console.error('Cannot start crop streaming: WebSocket not connected');\n      return;\n    }\n    \n    if (!cropRange || cropRange.every(val => val === 0)) {\n      console.error('Cannot start crop streaming: No crop region defined');\n      return;\n    }\n    \n    // Stop any existing crop interval\n    stopCropStreaming();\n    \n    // If we're starting crop streaming, stop full frame streaming\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    \n    // Calculate pixel ranges from wavelength ranges if we have calibration points\n    let pixelRanges = null;\n    if (!fullData && calibrationRef.current && calibrationRef.current.calibrationPoints) {\n      pixelRanges = calculatePixelRangesFromWavelengths(calibrationRef.current.calibrationPoints);\n      console.log('Calculated pixel ranges:', pixelRanges);\n    }\n    \n    // Send crop request with interval in the payload - server will handle streaming\n    const message = {\n      topic: `${mqttTopic}/request/crop_frame`,\n      payload: {\n        interval: cropInterval, // Pass actual interval to server\n        crop_range: cropRange,\n        to_graph: cropToGraph, // Add flag to indicate if the crop should be processed for graph\n        stream_image: streamCropImage, // Add flag to indicate if the image should be sent\n        full_data: fullData, // Add flag to indicate if full data should be sent\n        pixel_ranges: pixelRanges // Send calculated pixel ranges (will be null if full_data is true)\n      }\n    };\n    \n    console.log(`Starting crop streaming with interval ${cropInterval}ms`, message);\n    mqttClient.send(JSON.stringify(message));\n    setLastPublishedMessage(message);\n    \n    // Set streaming state if interval > 0 and we want to stream images\n    if (cropInterval > 0 && (streamCropImage || cropToGraph)) {\n      setIsCropStreaming(true);\n      setIsWaitingForCropResponse(true);\n    } else {\n      // Single frame request\n      setIsWaitingForCropResponse(true);\n    }\n  };\n  \n  // Stop crop frame streaming\n  const stopCropStreaming = () => {\n    if (cropIntervalRef.current) {\n      clearInterval(cropIntervalRef.current);\n      cropIntervalRef.current = null;\n    }\n    \n    if (mqttClient && mqttClient.readyState === WebSocket.OPEN) {\n      // Send message to stop streaming (interval=0)\n      const message = {\n        topic: `${mqttTopic}/request/crop_frame`,\n        payload: {\n          interval: 0,\n          crop_range: cropRange\n        }\n      };\n      \n      mqttClient.send(JSON.stringify(message));\n      setLastPublishedMessage(message);\n    }\n    \n    setIsCropStreaming(false);\n    setIsWaitingForCropResponse(false); // Reset waiting state when stopping\n  };\n  \n  // Convert crop points to crop range\n  const pointsToCropRange = (start, end) => {\n    if (!start || !end) return [0, 0, 0, 0];\n    \n    // Ensure start is top-left and end is bottom-right\n    const x_min = Math.min(start.x, end.x);\n    const y_min = Math.min(start.y, end.y);\n    const x_max = Math.max(start.x, end.x);\n    const y_max = Math.max(start.y, end.y);\n    \n    return [x_min, y_min, x_max, y_max];\n  };\n  \n  // Handle crop start (mousedown)\n  const startCropDrawing = (event) => {\n    if (!isCropMode || !canvasRef.current || !imageRef.current) return;\n    \n    event.preventDefault();\n    \n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) return;\n    \n    setIsDrawingCrop(true);\n    setCropStart(coords);\n    setCropEnd(coords);\n  };\n  \n  // Handle crop update (mousemove)\n  const updateCropDrawing = (event) => {\n    if (!isDrawingCrop || !isCropMode) return;\n    \n    event.preventDefault();\n    \n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) return;\n    \n    setCropEnd(coords);\n    \n    // Update the crop range during drawing\n    setCropRange(pointsToCropRange(cropStart, coords));\n    \n    // Redraw canvas to show current crop rectangle\n    redrawCanvas();\n  };\n  \n  // Handle crop end (mouseup)\n  const finishCropDrawing = (event) => {\n    if (!isDrawingCrop || !isCropMode) return;\n    \n    event.preventDefault();\n    \n    const coords = getRelativeImageCoordinates(event);\n    if (!coords) {\n      setIsDrawingCrop(false);\n      return;\n    }\n    \n    setCropEnd(coords);\n    \n    // Calculate final crop range\n    const newCropRange = pointsToCropRange(cropStart, coords);\n    \n    // Check if crop size is valid\n    const width = newCropRange[2] - newCropRange[0];\n    const height = newCropRange[3] - newCropRange[1];\n    \n    if (width < MIN_CROP_SIZE || height < MIN_CROP_SIZE) {\n      console.warn(`Crop rectangle too small (${width}x${height}px). Minimum size is ${MIN_CROP_SIZE}x${MIN_CROP_SIZE}px.`);\n      setIsDrawingCrop(false);\n      // Reset crop\n      setCropStart(null);\n      setCropEnd(null);\n      setCropRange([0, 0, 0, 0]);\n      redrawCanvas();\n      return;\n    }\n    \n    // Set the final crop range\n    setCropRange(newCropRange);\n    setIsDrawingCrop(false);\n    \n    // Request a single cropped frame to preview\n    requestCroppedFrame(newCropRange);\n    \n    // Redraw to show the final crop rectangle\n    redrawCanvas();\n  };\n  \n  // Request a single cropped frame\n  const requestCroppedFrame = (range) => {\n    if (!mqttClient || mqttClient.readyState !== WebSocket.OPEN) return;\n    \n    // Calculate pixel ranges from wavelength ranges if we have calibration points\n    let pixelRanges = null;\n    if (!fullData && calibrationRef.current && calibrationRef.current.calibrationPoints) {\n      pixelRanges = calculatePixelRangesFromWavelengths(calibrationRef.current.calibrationPoints);\n      console.log('Calculated pixel ranges:', pixelRanges);\n    }\n    \n    const message = {\n      topic: `${mqttTopic}/request/crop_frame`,\n      payload: {\n        interval: 0, // Single frame\n        crop_range: range,\n        to_graph: cropToGraph, // Add flag to indicate if the crop should be processed for graph\n        stream_image: streamCropImage, // Add flag to indicate if the image should be sent\n        full_data: fullData, // Add flag to indicate if full data should be sent\n        pixel_ranges: pixelRanges // Send calculated pixel ranges (will be null if full_data is true)\n      }\n    };\n    \n    mqttClient.send(JSON.stringify(message));\n    setLastPublishedMessage(message);\n    setIsWaitingForCropResponse(true);\n  };\n\n  // Handle manual crop range input change\n  const handleCropRangeChange = (index, value) => {\n    const newCropRange = [...cropRange];\n    newCropRange[index] = parseInt(value) || 0;\n    \n    // Ensure min <= max\n    if (index === 0 && newCropRange[0] > newCropRange[2]) {\n      newCropRange[2] = newCropRange[0];\n    }\n    if (index === 1 && newCropRange[1] > newCropRange[3]) {\n      newCropRange[3] = newCropRange[1];\n    }\n    if (index === 2 && newCropRange[2] < newCropRange[0]) {\n      newCropRange[0] = newCropRange[2];\n    }\n    if (index === 3 && newCropRange[3] < newCropRange[1]) {\n      newCropRange[1] = newCropRange[3];\n    }\n    \n    setCropRange(newCropRange);\n    redrawCanvas();\n  };\n\n  // Toggle crop mode\n  const toggleCropMode = () => {\n    const newCropMode = !isCropMode;\n    setIsCropMode(newCropMode);\n    \n    if (!newCropMode) {\n      // Exiting crop mode, clean up and restart full frame streaming\n      setIsDrawingCrop(false);\n      stopCropStreaming();\n      \n      // Restart full frame streaming if camera is active\n      if (isCameraActive && mqttClient && mqttClient.readyState === WebSocket.OPEN) {\n        startStreaming(mqttClient);\n      }\n    } else {\n      // Entering crop mode, stop full frame streaming\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      // Stop line drawing if active\n      setIsDrawing(false);\n    }\n    \n    redrawCanvas();\n  };\n\n  // Reset crop\n  const resetCrop = () => {\n    setCropStart(null);\n    setCropEnd(null);\n    setCropRange([0, 0, 0, 0]);\n    setCropPreviewImage(null);\n    stopCropStreaming();\n    redrawCanvas();\n  };\n\n  // Render crop controls\n  const renderCropControls = () => {\n    return (\n      <div style={floatingComponentStyles.cropControls}>\n        <h4 style={floatingComponentStyles.cropTitle}>Crop Frame Settings</h4>\n        \n        <div style={floatingComponentStyles.cropInputGroup}>\n          <label style={floatingComponentStyles.cropLabel}>X Min:</label>\n          <input \n            type=\"number\" \n            value={cropRange[0]} \n            onChange={(e) => handleCropRangeChange(0, e.target.value)}\n            style={floatingComponentStyles.cropInput}\n            disabled={!isCameraActive}\n          />\n          \n          <label style={floatingComponentStyles.cropLabel}>Y Min:</label>\n          <input \n            type=\"number\" \n            value={cropRange[1]} \n            onChange={(e) => handleCropRangeChange(1, e.target.value)}\n            style={floatingComponentStyles.cropInput}\n            disabled={!isCameraActive}\n          />\n        </div>\n        \n        <div style={floatingComponentStyles.cropInputGroup}>\n          <label style={floatingComponentStyles.cropLabel}>X Max:</label>\n          <input \n            type=\"number\" \n            value={cropRange[2]} \n            onChange={(e) => handleCropRangeChange(2, e.target.value)}\n            style={floatingComponentStyles.cropInput}\n            disabled={!isCameraActive}\n          />\n          \n          <label style={floatingComponentStyles.cropLabel}>Y Max:</label>\n          <input \n            type=\"number\" \n            value={cropRange[3]} \n            onChange={(e) => handleCropRangeChange(3, e.target.value)}\n            style={floatingComponentStyles.cropInput}\n            disabled={!isCameraActive}\n          />\n        </div>\n        \n        <div style={floatingComponentStyles.cropInputGroup}>\n          <label style={floatingComponentStyles.cropLabel}>Interval (ms):</label>\n          <input \n            type=\"number\" \n            value={cropInterval} \n            onChange={(e) => setCropInterval(parseInt(e.target.value) || 0)}\n            style={floatingComponentStyles.cropInput}\n            min=\"0\"\n            step=\"100\"\n            disabled={!isCameraActive}\n          />\n          <div style={floatingComponentStyles.cropHint}>\n            0 = single capture\n          </div>\n        </div>\n        \n        <div style={floatingComponentStyles.cropButtonGroup}>\n          <button\n            style={buttonVariants.smallSecondary}\n            onClick={toggleCropMode}\n            disabled={!isCameraActive}\n          >\n            {isCropMode ? 'Exit Crop Mode' : 'Enter Crop Mode'}\n          </button>\n          \n          <button\n            style={buttonVariants.smallSecondary}\n            onClick={resetCrop}\n            disabled={!isCameraActive || cropRange.every(val => val === 0)}\n          >\n            Reset Crop\n          </button>\n        </div>\n        \n        <div style={floatingComponentStyles.checkboxGroup}>\n          <label style={floatingComponentStyles.checkboxLabel}>\n            <input\n              type=\"checkbox\"\n              checked={streamCropImage}\n              onChange={(e) => setStreamCropImage(e.target.checked)}\n              style={floatingComponentStyles.checkbox}\n              disabled={!isCameraActive}\n            />\n            Stream Image\n          </label>\n          \n          <label style={floatingComponentStyles.checkboxLabel}>\n            <input\n              type=\"checkbox\"\n              checked={cropToGraph}\n              onChange={(e) => setCropToGraph(e.target.checked)}\n              style={floatingComponentStyles.checkbox}\n              disabled={!isCameraActive}\n            />\n            To Graph\n          </label>\n          \n          <label style={floatingComponentStyles.checkboxLabel}>\n            <input\n              type=\"checkbox\"\n              checked={fullData}\n              onChange={(e) => setFullData(e.target.checked)}\n              style={floatingComponentStyles.checkbox}\n              disabled={!isCameraActive}\n            />\n            Full Data\n          </label>\n        </div>\n        \n        <div style={floatingComponentStyles.cropButtonGroup}>\n          {!isCropStreaming ? (\n            <button\n              style={buttonVariants.smallPrimary}\n              onClick={startCropStreaming}\n              disabled={!isCameraActive || cropRange.every(val => val === 0) || (!streamCropImage && !cropToGraph)}\n            >\n              {cropInterval > 0 ? 'Start Streaming' : 'Capture Frame'}\n            </button>\n          ) : (\n            <button\n              style={{...buttonVariants.smallPrimary, backgroundColor: 'rgba(255, 50, 50, 0.7)'}}\n              onClick={stopCropStreaming}\n            >\n              Stop Streaming\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // Render crop preview\n  const renderCropPreview = () => {\n    return (\n      <div style={floatingComponentStyles.cropPreviewContainer}>\n        <h4 style={floatingComponentStyles.cropTitle}>Crop Preview</h4>\n        {cropPreviewImage ? (\n          <img \n            src={cropPreviewImage}\n            alt=\"Cropped preview\"\n            style={floatingComponentStyles.cropPreviewImage}\n          />\n        ) : (\n          <div style={floatingComponentStyles.cropPreviewPlaceholder}>\n            No crop preview available\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Function to render the configuration menu\n  const renderConfigMenu = () => {\n    // Handler for input changes within the config menu\n    const handleConfigChange = (section, key, value) => {\n      setPendingConfig(prev => {\n        const newConfig = JSON.parse(JSON.stringify(prev)); // Deep copy\n        if (section === 'roi') {\n          // ROI is an array [x, y, w, h]\n          const roiIndex = {'x': 0, 'y': 1, 'w': 2, 'h': 3}[key];\n          newConfig.processing.roi[roiIndex] = parseInt(value) || 0;\n        } else {\n          newConfig[section][key] = value;\n        }\n        \n        // Trigger redraw immediately after ROI change\n        if (section === 'roi') {\n          requestAnimationFrame(redrawCanvas);\n        }\n        return newConfig;\n      });\n    };\n    \n    // Handler to send config update\n    const applyConfigChanges = () => {\n      if (pendingConfig) {\n        sendCameraConfigUpdate(pendingConfig);\n      }\n    };\n\n    if (!pendingConfig) {\n      return <div>Loading configuration...</div>; // Or some loading indicator\n    }\n    \n    const roi = pendingConfig.processing.roi || [0, 0, 0, 0];\n    \n    return (\n      <div style={floatingComponentStyles.configMenuContainer}>\n        <h4>Camera Configuration</h4>\n        \n        {/* Exposure Settings */}\n        <div style={floatingComponentStyles.configRow}>\n          <label style={floatingComponentStyles.configLabel}>Exposure Time (μs):</label>\n          <input \n            type=\"number\"\n            value={pendingConfig.camera.exposure_time || ''}\n            onChange={(e) => handleConfigChange('camera', 'exposure_time', e.target.value)}\n            style={floatingComponentStyles.configInput}\n            disabled={pendingConfig.camera.exposure_mode !== 'manual'}\n          />\n        </div>\n        <div style={floatingComponentStyles.configRow}>\n          <label style={floatingComponentStyles.configLabel}>Exposure Mode:</label>\n          <select\n            value={pendingConfig.camera.exposure_mode || 'auto'}\n            onChange={(e) => handleConfigChange('camera', 'exposure_mode', e.target.value)}\n            style={floatingComponentStyles.configInput}\n          >\n            <option value=\"auto\">Auto</option>\n            <option value=\"manual\">Manual</option>\n          </select>\n        </div>\n        \n        {/* ISO Setting */}\n        <div style={floatingComponentStyles.configRow}>\n          <label style={floatingComponentStyles.configLabel}>ISO:</label>\n          <input \n            type=\"number\"\n            value={pendingConfig.camera.iso || ''} // Handle null case\n            onChange={(e) => handleConfigChange('camera', 'iso', e.target.value ? parseInt(e.target.value) : null)} // Send null if empty\n            style={floatingComponentStyles.configInput}\n            min=\"100\" // Example range, adjust as needed\n            max=\"1600\"\n            step=\"100\"\n          />\n        </div>\n        \n        <button \n          style={{...buttonVariants.smallPrimary, marginTop: '10px'}}\n          onClick={applyConfigChanges}\n        >\n          Apply Configuration\n        </button>\n      </div>\n    );\n  };\n  \n  // Function to send camera configuration update via MQTT\n  const sendCameraConfigUpdate = (configToSend) => {\n    if (mqttClient && mqttClient.readyState === WebSocket.OPEN) {\n      const message = {\n        topic: `${mqttTopic}/request/set_config`, // Assuming this is the topic the backend listens on\n        payload: configToSend\n      };\n      console.log(\"Sending config update:\", message);\n      mqttClient.send(JSON.stringify(message));\n      setLastPublishedMessage(message);\n      // Optional: Maybe reset pendingConfig or wait for confirmation?\n    } else {\n      console.error('Cannot send config: WebSocket not connected');\n    }\n  };\n\n  // Centralized drawing function\n  const redrawCanvas = () => {\n    if (!canvasRef.current || !imageRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const image = imageRef.current;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw image\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n    // Draw line if we have valid coordinates\n    if (currentLine && currentLine.start && currentLine.end) {\n      ctx.beginPath();\n      ctx.moveTo(currentLine.start.x, currentLine.start.y);\n      ctx.lineTo(currentLine.end.x, currentLine.end.y);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n    \n    // Draw crop rectangle if in crop mode and we have valid coordinates\n    if (isCropMode && cropRange && cropRange.some(val => val !== 0)) {\n      const [x_min, y_min, x_max, y_max] = cropRange;\n      \n      // Draw rectangle\n      ctx.beginPath();\n      ctx.rect(x_min, y_min, x_max - x_min, y_max - y_min);\n      \n      // Use green while drawing, yellow when set\n      if (isDrawingCrop) {\n        ctx.strokeStyle = 'green';\n        ctx.fillStyle = 'rgba(0, 255, 0, 0.1)';\n      } else {\n        ctx.strokeStyle = 'yellow';\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.1)';\n      }\n      \n      ctx.lineWidth = 2;\n      ctx.stroke();\n      \n      // Semi-transparent fill\n      ctx.fill();\n      \n      // Draw corner markers\n      const markerSize = 5;\n      ctx.fillStyle = isDrawingCrop ? 'green' : 'yellow';\n      \n      // Top-left\n      ctx.fillRect(x_min - markerSize, y_min - markerSize, markerSize * 2, markerSize * 2);\n      // Top-right\n      ctx.fillRect(x_max - markerSize, y_min - markerSize, markerSize * 2, markerSize * 2);\n      // Bottom-left\n      ctx.fillRect(x_min - markerSize, y_max - markerSize, markerSize * 2, markerSize * 2);\n      // Bottom-right\n      ctx.fillRect(x_max - markerSize, y_max - markerSize, markerSize * 2, markerSize * 2);\n    }\n  };\n\n  // Effect to load calibration settings from localStorage\n  useEffect(() => {\n    // Try to load detector_settings from localStorage\n    const detectorId = mqttTopic.split('/')[0] || 'default';\n    const settingsKey = `detector_settings_${detectorId}`;\n    const savedSettingsStr = localStorage.getItem(settingsKey);\n    \n    if (savedSettingsStr) {\n      try {\n        const savedSettings = JSON.parse(savedSettingsStr);\n        if (savedSettings.calibration && savedSettings.calibration.calibrationPoints) {\n          // Store calibration points in ref for pixel range calculations\n          calibrationRef.current = {\n            calibrationPoints: savedSettings.calibration.calibrationPoints\n          };\n          console.log('Loaded calibration points from settings:', calibrationRef.current.calibrationPoints);\n        }\n      } catch (err) {\n        console.error('Error loading settings from localStorage:', err);\n      }\n    }\n  }, [mqttTopic]);\n\n  return (\n    <div style={floatingComponentStyles.container}>\n      <h3 style={floatingComponentStyles.title}>Spectrometer Feed</h3>\n      \n      {/* MQTT Topic input */}\n      <div style={floatingComponentStyles.mqttInputs}>\n        <label style={floatingComponentStyles.inputLabel}>MQTT Topic:</label>\n        <input \n          type=\"text\"\n          value={mqttTopic}\n          onChange={(e) => setMqttTopic(e.target.value)}\n          style={floatingComponentStyles.input}\n          disabled={isCameraActive}\n          placeholder=\"e.g. spectrometer_1\"\n        />\n      </div>\n      \n      {/* Polling interval */}\n      <div style={floatingComponentStyles.mqttInputs}>\n        <label style={floatingComponentStyles.inputLabel}>Poll Rate:</label>\n        <input \n          type=\"range\"\n          min=\"100\"\n          max=\"2000\"\n          step=\"100\"\n          value={pollingInterval}\n          onChange={(e) => setPollingInterval(parseInt(e.target.value))}\n          style={floatingComponentStyles.slider}\n          disabled={!isCameraActive}\n        />\n        <span style={floatingComponentStyles.value}>{pollingInterval}ms</span>\n      </div>\n      \n      {/* Camera view with line drawing capability */}\n      <div \n        ref={cameraContainerRef}\n        style={floatingComponentStyles.cameraView}\n        onMouseDown={isCameraActive ? (isCropMode ? startCropDrawing : startLineDrawing) : undefined}\n        onMouseMove={isCameraActive ? (isCropMode ? updateCropDrawing : updateLineDrawing) : undefined}\n        onMouseUp={isCameraActive ? (isCropMode ? finishCropDrawing : finishLineDrawing) : undefined}\n        onMouseLeave={isCameraActive ? (isCropMode ? finishCropDrawing : finishLineDrawing) : undefined}\n      >\n        {!isCameraActive && (\n          <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: '#999' }}>\n            Device feed will appear here when connected\n          </div>\n        )}\n        \n        <canvas \n          ref={canvasRef}\n          style={{\n            ...floatingComponentStyles.canvas,\n            aspectRatio: `${cameraSize.width} / ${cameraSize.height}`,\n            cursor: isCameraActive ? (isCropMode ? 'crosshair' : 'crosshair') : 'default'\n          }}\n          width={cameraSize.width}\n          height={cameraSize.height}\n        />\n        \n        {/* Drawing mode indicators */}\n        {isCameraActive && !isLineDrawn && !isDrawing && !isCropMode && (\n          <div style={floatingComponentStyles.overlayText}>\n            Click and drag to draw a line\n          </div>\n        )}\n        \n        {isCameraActive && isCropMode && !isDrawingCrop && (\n          <div style={floatingComponentStyles.overlayText}>\n            Click and drag to define crop region\n          </div>\n        )}\n        \n        {/* Drawing indicators */}\n        {isDrawing && (\n          <div style={floatingComponentStyles.overlayText}>\n            Drawing line...\n          </div>\n        )}\n        \n        {isDrawingCrop && (\n          <div style={floatingComponentStyles.overlayText}>\n            Drawing crop region...\n          </div>\n        )}\n        \n        {/* Connection status indicator */}\n        <div style={floatingComponentStyles.connectionStatusOverlay}>\n          <div style={{...floatingComponentStyles.statusIndicator, backgroundColor: isMqttConnected ? '#0f0' : '#f00' }}></div>\n          {isMqttConnected ? 'Connected' : 'Disconnected'}\n        </div>\n        \n        {/* Resize info overlay */}\n        {showResizeInfo && (\n          <div style={floatingComponentStyles.resizeInfo}>\n            {cameraSize.width} × {cameraSize.height}\n          </div>\n        )}\n        \n        {/* Resize handle */}\n        <div \n          style={floatingComponentStyles.resizeHandle}\n          onMouseDown={handleResizeStart}\n          title=\"Resize camera view\"\n        >\n          <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\">\n            <path \n              d=\"M9,3 L3,9 M11,5 L5,11 M11,8 L8,11\" \n              stroke=\"white\" \n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n            />\n          </svg>\n        </div>\n      </div>\n      \n      {/* Camera controls */}\n      {renderCameraControls()}\n      \n      {/* Add button to toggle config menu */}\n      <button \n        style={{...buttonVariants.smallSecondary, marginTop: '8px'}}\n        onClick={() => {\n          // Initialize default config if none exists\n          if (!pendingConfig) {\n            setPendingConfig({\n              camera: { \n                exposure_time: 10000, \n                exposure_mode: 'auto', \n                iso: 100,\n                resolution: [cameraSize.width, cameraSize.height]\n              },\n              processing: { \n                roi: [0, 0, cameraSize.width, cameraSize.height] \n              }\n            });\n          }\n          setShowConfigMenu(!showConfigMenu);\n        }}\n      >\n        {showConfigMenu ? 'Hide Config' : 'Show Config'}\n      </button>\n\n      {/* Configuration Menu (conditional rendering) */}\n      {showConfigMenu && renderConfigMenu()}\n      \n      {/* Line adjustment controls */}\n      {isLineDrawn && (\n        <div style={floatingComponentStyles.lineControls}>\n          <div style={floatingComponentStyles.controlRow}>\n            <label style={floatingComponentStyles.controlLabel}>Y Offset:</label>\n            <input \n              type=\"range\"\n              min=\"-50\"\n              max=\"50\"\n              value={lineYOffset}\n              onChange={handleLineYOffsetChange}\n              style={floatingComponentStyles.slider}\n            />\n            <span style={floatingComponentStyles.value}>{lineYOffset}px</span>\n          </div>\n          \n          <div style={floatingComponentStyles.controlRow}>\n            <label style={floatingComponentStyles.controlLabel}>X Offset:</label>\n            <input \n              type=\"range\"\n              min=\"-50\"\n              max=\"50\"\n              value={lineXOffset}\n              onChange={handleLineXOffsetChange}\n              style={floatingComponentStyles.slider}\n            />\n            <span style={floatingComponentStyles.value}>{lineXOffset}px</span>\n          </div>\n        </div>\n      )}\n      \n      {/* Crop controls and preview */}\n      <div style={floatingComponentStyles.cropSection}>\n        {renderCropControls()}\n        {renderCropPreview()}\n      </div>\n      \n      {/* Debug panel */}\n      {debugMode && (\n        <div style={floatingComponentStyles.debugPanel}>\n          <div style={{display: 'flex', justifyContent: 'space-between', marginBottom: '5px'}}>\n            <strong>MQTT Debug:</strong>\n            <button \n              onClick={() => setDebugMode(false)}\n              style={floatingComponentStyles.debugHideButton}\n            >\n              Hide\n            </button>\n          </div>\n          <div style={{margin: '4px 0'}}>Status: {isMqttConnected ? '✅ Connected' : '❌ Disconnected'}</div>\n          <div style={{margin: '4px 0'}}>Topic ID: <span style={{color: '#4CAF50'}}>{mqttTopic}</span></div>\n          <div style={{margin: '4px 0'}}>WebSocket Connection: <span style={{color: '#4CAF50'}}>{WS_URL}</span></div>\n          <div style={{margin: '4px 0'}}>MQTT Broker: {mqttSettings.protocol}://{mqttSettings.host}:{mqttSettings.port} (via WebSocket server)</div>\n          \n          {/* Display request waiting state */}\n          <div style={{margin: '4px 0'}}>\n            Waiting for full frame: <span style={{color: isWaitingForResponse ? '#f44336' : '#4CAF50'}}>\n              {isWaitingForResponse ? 'Yes' : 'No'}\n            </span>\n          </div>\n          <div style={{margin: '4px 0'}}>\n            Waiting for crop frame: <span style={{color: isWaitingForCropResponse ? '#f44336' : '#4CAF50'}}>\n              {isWaitingForCropResponse ? 'Yes' : 'No'}\n            </span>\n          </div>\n          \n          {/* Display aspect ratio and resolution information */}\n          <div style={floatingComponentStyles.debugInfoRow}>\n            <div>\n              <strong>Display:</strong> {cameraSize.width}x{cameraSize.height}\n            </div>\n            <div>\n              <strong>Aspect Ratio:</strong> {imageAspectRatio.toFixed(2)}\n            </div>\n            <div>\n              <strong>Resolution:</strong> {cameraResolution}\n            </div>\n          </div>\n          \n          <div style={floatingComponentStyles.debugMessageBlock}>\n            <div><strong>Last published:</strong></div>\n            <pre style={floatingComponentStyles.debugPre}>\n              {lastPublishedMessage ? JSON.stringify(lastPublishedMessage, null, 2) : 'None'}\n            </pre>\n          </div>\n          <div style={floatingComponentStyles.debugMessageBlock}>\n            <div><strong>Last received:</strong></div>\n            <pre style={floatingComponentStyles.debugPre}>\n              {lastReceivedMessage ? \n                (lastReceivedMessage.payload && typeof lastReceivedMessage.payload === 'object' && lastReceivedMessage.payload.image ? \n                  `${JSON.stringify({...lastReceivedMessage, payload: {...lastReceivedMessage.payload, image: '[Image data truncated]'}}, null, 2)}` : \n                  JSON.stringify(lastReceivedMessage, null, 2)\n                ) : 'None'}\n            </pre>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\n// Add display name for debugging\nMQTTCameraComponent.displayName = 'MQTTCameraComponent';\n\nexport default MQTTCameraComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}