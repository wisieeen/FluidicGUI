{"ast":null,"code":"// Test script to simulate sending spectrometer data\n// This can be run in the browser console to test the MQTTGraphComponent\n\n// Function to generate test data\nfunction generateSpectrometerData() {\n  // Create a range of wavelengths from 400 to 700 nm\n  const wavelengths = Array.from({\n    length: 301\n  }, (_, i) => 400 + i);\n\n  // Generate simulated RGB values\n  const raw_red = wavelengths.map(w => {\n    // Red channel peaks at 650nm\n    const peak = 650;\n    const width = 50;\n    const height = 1000;\n    const background = 100;\n    return background + height * Math.exp(-((w - peak) ** 2) / (2 * width ** 2));\n  });\n  const raw_green = wavelengths.map(w => {\n    // Green channel peaks at 550nm\n    const peak = 550;\n    const width = 40;\n    const height = 800;\n    const background = 80;\n    return background + height * Math.exp(-((w - peak) ** 2) / (2 * width ** 2));\n  });\n  const raw_blue = wavelengths.map(w => {\n    // Blue channel peaks at 450nm\n    const peak = 450;\n    const width = 45;\n    const height = 900;\n    const background = 90;\n    return background + height * Math.exp(-((w - peak) ** 2) / (2 * width ** 2));\n  });\n\n  // Create the data object\n  return {\n    timestamp: Date.now(),\n    wavelengths: wavelengths,\n    raw_red: raw_red,\n    raw_green: raw_green,\n    raw_blue: raw_blue,\n    bit_depth: 12,\n    data_type: 'raw_rgb'\n  };\n}\n\n// Function to send test data to the frontend\nfunction sendTestSpectrometerData(detectorId = 'spectrometer_1') {\n  const data = generateSpectrometerData();\n\n  // Create a response object that simulates the MQTT message\n  const response = {\n    topic: `${detectorId}/response/data`,\n    payload: JSON.stringify(data)\n  };\n\n  // If we have a WebSocket connection, send the data\n  if (window.testWs && window.testWs.readyState === WebSocket.OPEN) {\n    window.testWs.send(JSON.stringify(response));\n    console.log('Sent test spectrometer data');\n  } else {\n    console.error('WebSocket not connected');\n  }\n}\n\n// Function to simulate crop frame data\nfunction generateCropFrameData() {\n  // Create a range of wavelengths from 400 to 700 nm\n  const wavelengths = Array.from({\n    length: 301\n  }, (_, i) => 400 + i);\n\n  // Generate simulated RGB values with multiple peaks\n  const red = wavelengths.map(w => {\n    // Red channel with multiple peaks\n    let value = 100; // Background\n\n    // Add peaks\n    value += 1000 * Math.exp(-((w - 650) ** 2) / (2 * 25 ** 2)); // Main peak at 650nm\n    value += 500 * Math.exp(-((w - 610) ** 2) / (2 * 15 ** 2)); // Secondary peak at 610nm\n    value += 300 * Math.exp(-((w - 680) ** 2) / (2 * 20 ** 2)); // Small peak at 680nm\n\n    return value;\n  });\n  const green = wavelengths.map(w => {\n    // Green channel with multiple peaks\n    let value = 80; // Background\n\n    // Add peaks\n    value += 900 * Math.exp(-((w - 550) ** 2) / (2 * 30 ** 2)); // Main peak at 550nm\n    value += 400 * Math.exp(-((w - 520) ** 2) / (2 * 20 ** 2)); // Secondary peak at 520nm\n    value += 250 * Math.exp(-((w - 570) ** 2) / (2 * 15 ** 2)); // Small peak at 570nm\n\n    return value;\n  });\n  const blue = wavelengths.map(w => {\n    // Blue channel with multiple peaks\n    let value = 90; // Background\n\n    // Add peaks\n    value += 950 * Math.exp(-((w - 450) ** 2) / (2 * 35 ** 2)); // Main peak at 450nm\n    value += 450 * Math.exp(-((w - 420) ** 2) / (2 * 20 ** 2)); // Secondary peak at 420nm\n    value += 280 * Math.exp(-((w - 470) ** 2) / (2 * 25 ** 2)); // Small peak at 470nm\n\n    return value;\n  });\n\n  // Create the graph_data object\n  return {\n    crop_range: [0, 100, 640, 120],\n    // Example crop range [x_min, y_min, x_max, y_max]\n    dimensions: [640, 20],\n    // Example dimensions\n    timestamp: Date.now(),\n    graph_data: {\n      timestamp: Date.now(),\n      wavelengths: wavelengths,\n      red: red,\n      green: green,\n      blue: blue,\n      bit_depth: 12,\n      data_type: 'raw_rgb'\n    }\n  };\n}\n\n// Function to send test crop frame data to the frontend\nfunction sendTestCropFrameData(detectorId = 'spectrometer_1') {\n  const data = generateCropFrameData();\n\n  // Create a response object that simulates the MQTT message\n  const response = {\n    topic: `${detectorId}/response/data`,\n    payload: JSON.stringify(data)\n  };\n\n  // If we have a WebSocket connection, send the data\n  if (window.testWs && window.testWs.readyState === WebSocket.OPEN) {\n    window.testWs.send(JSON.stringify(response));\n    console.log('Sent test crop frame data');\n  } else {\n    console.error('WebSocket not connected');\n  }\n}\n\n// Setup a test WebSocket if needed\nfunction setupTestWebSocket() {\n  if (!window.testWs || window.testWs.readyState !== WebSocket.OPEN) {\n    console.log('Creating test WebSocket');\n    window.testWs = {\n      readyState: WebSocket.OPEN,\n      send: function (data) {\n        // Parse the data and dispatch a custom event that our components can listen for\n        try {\n          const parsedData = JSON.parse(data);\n          const testEvent = new CustomEvent('test_spectrometer_data', {\n            detail: {\n              data: parsedData\n            }\n          });\n          window.dispatchEvent(testEvent);\n          console.log('Dispatched test data event', parsedData);\n        } catch (e) {\n          console.error('Error parsing test data', e);\n        }\n      }\n    };\n\n    // Setup listener in the component\n    setupTestListener();\n  }\n}\n\n// Setup a listener for test data events\nfunction setupTestListener() {\n  // This function would need to be called from the component\n  // You'd need to modify SpectrometerMQTT.js to listen for 'test_spectrometer_data' events\n  console.log(`\n  To use this test script:\n  1. Open the browser console\n  2. Run setupTestWebSocket()\n  3. Run sendTestSpectrometerData('spectrometer_1') or sendTestCropFrameData('spectrometer_1')\n  \n  You'll need to modify your SpectrometerMQTT.js component to listen for the 'test_spectrometer_data' event\n  and process it like a WebSocket message.\n  `);\n}\n\n// Export functions for use in browser console\nwindow.setupTestWebSocket = setupTestWebSocket;\nwindow.sendTestSpectrometerData = sendTestSpectrometerData;\nwindow.sendTestCropFrameData = sendTestCropFrameData;\n\n// If this script is imported as a module\nexport { setupTestWebSocket, sendTestSpectrometerData, sendTestCropFrameData };","map":{"version":3,"names":["generateSpectrometerData","wavelengths","Array","from","length","_","i","raw_red","map","w","peak","width","height","background","Math","exp","raw_green","raw_blue","timestamp","Date","now","bit_depth","data_type","sendTestSpectrometerData","detectorId","data","response","topic","payload","JSON","stringify","window","testWs","readyState","WebSocket","OPEN","send","console","log","error","generateCropFrameData","red","value","green","blue","crop_range","dimensions","graph_data","sendTestCropFrameData","setupTestWebSocket","parsedData","parse","testEvent","CustomEvent","detail","dispatchEvent","e","setupTestListener"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/SpectrometerMQTT/test_spectral_data.js"],"sourcesContent":["// Test script to simulate sending spectrometer data\n// This can be run in the browser console to test the MQTTGraphComponent\n\n// Function to generate test data\nfunction generateSpectrometerData() {\n  // Create a range of wavelengths from 400 to 700 nm\n  const wavelengths = Array.from({length: 301}, (_, i) => 400 + i);\n  \n  // Generate simulated RGB values\n  const raw_red = wavelengths.map(w => {\n    // Red channel peaks at 650nm\n    const peak = 650;\n    const width = 50;\n    const height = 1000;\n    const background = 100;\n    return background + height * Math.exp(-((w - peak) ** 2) / (2 * width ** 2));\n  });\n  \n  const raw_green = wavelengths.map(w => {\n    // Green channel peaks at 550nm\n    const peak = 550;\n    const width = 40;\n    const height = 800;\n    const background = 80;\n    return background + height * Math.exp(-((w - peak) ** 2) / (2 * width ** 2));\n  });\n  \n  const raw_blue = wavelengths.map(w => {\n    // Blue channel peaks at 450nm\n    const peak = 450;\n    const width = 45;\n    const height = 900;\n    const background = 90;\n    return background + height * Math.exp(-((w - peak) ** 2) / (2 * width ** 2));\n  });\n  \n  // Create the data object\n  return {\n    timestamp: Date.now(),\n    wavelengths: wavelengths,\n    raw_red: raw_red,\n    raw_green: raw_green,\n    raw_blue: raw_blue,\n    bit_depth: 12,\n    data_type: 'raw_rgb'\n  };\n}\n\n// Function to send test data to the frontend\nfunction sendTestSpectrometerData(detectorId = 'spectrometer_1') {\n  const data = generateSpectrometerData();\n  \n  // Create a response object that simulates the MQTT message\n  const response = {\n    topic: `${detectorId}/response/data`,\n    payload: JSON.stringify(data)\n  };\n  \n  // If we have a WebSocket connection, send the data\n  if (window.testWs && window.testWs.readyState === WebSocket.OPEN) {\n    window.testWs.send(JSON.stringify(response));\n    console.log('Sent test spectrometer data');\n  } else {\n    console.error('WebSocket not connected');\n  }\n}\n\n// Function to simulate crop frame data\nfunction generateCropFrameData() {\n  // Create a range of wavelengths from 400 to 700 nm\n  const wavelengths = Array.from({length: 301}, (_, i) => 400 + i);\n  \n  // Generate simulated RGB values with multiple peaks\n  const red = wavelengths.map(w => {\n    // Red channel with multiple peaks\n    let value = 100; // Background\n    \n    // Add peaks\n    value += 1000 * Math.exp(-((w - 650) ** 2) / (2 * 25 ** 2)); // Main peak at 650nm\n    value += 500 * Math.exp(-((w - 610) ** 2) / (2 * 15 ** 2)); // Secondary peak at 610nm\n    value += 300 * Math.exp(-((w - 680) ** 2) / (2 * 20 ** 2)); // Small peak at 680nm\n    \n    return value;\n  });\n  \n  const green = wavelengths.map(w => {\n    // Green channel with multiple peaks\n    let value = 80; // Background\n    \n    // Add peaks\n    value += 900 * Math.exp(-((w - 550) ** 2) / (2 * 30 ** 2)); // Main peak at 550nm\n    value += 400 * Math.exp(-((w - 520) ** 2) / (2 * 20 ** 2)); // Secondary peak at 520nm\n    value += 250 * Math.exp(-((w - 570) ** 2) / (2 * 15 ** 2)); // Small peak at 570nm\n    \n    return value;\n  });\n  \n  const blue = wavelengths.map(w => {\n    // Blue channel with multiple peaks\n    let value = 90; // Background\n    \n    // Add peaks\n    value += 950 * Math.exp(-((w - 450) ** 2) / (2 * 35 ** 2)); // Main peak at 450nm\n    value += 450 * Math.exp(-((w - 420) ** 2) / (2 * 20 ** 2)); // Secondary peak at 420nm\n    value += 280 * Math.exp(-((w - 470) ** 2) / (2 * 25 ** 2)); // Small peak at 470nm\n    \n    return value;\n  });\n  \n  // Create the graph_data object\n  return {\n    crop_range: [0, 100, 640, 120], // Example crop range [x_min, y_min, x_max, y_max]\n    dimensions: [640, 20], // Example dimensions\n    timestamp: Date.now(),\n    graph_data: {\n      timestamp: Date.now(),\n      wavelengths: wavelengths,\n      red: red,\n      green: green,\n      blue: blue,\n      bit_depth: 12,\n      data_type: 'raw_rgb'\n    }\n  };\n}\n\n// Function to send test crop frame data to the frontend\nfunction sendTestCropFrameData(detectorId = 'spectrometer_1') {\n  const data = generateCropFrameData();\n  \n  // Create a response object that simulates the MQTT message\n  const response = {\n    topic: `${detectorId}/response/data`,\n    payload: JSON.stringify(data)\n  };\n  \n  // If we have a WebSocket connection, send the data\n  if (window.testWs && window.testWs.readyState === WebSocket.OPEN) {\n    window.testWs.send(JSON.stringify(response));\n    console.log('Sent test crop frame data');\n  } else {\n    console.error('WebSocket not connected');\n  }\n}\n\n// Setup a test WebSocket if needed\nfunction setupTestWebSocket() {\n  if (!window.testWs || window.testWs.readyState !== WebSocket.OPEN) {\n    console.log('Creating test WebSocket');\n    window.testWs = {\n      readyState: WebSocket.OPEN,\n      send: function(data) {\n        // Parse the data and dispatch a custom event that our components can listen for\n        try {\n          const parsedData = JSON.parse(data);\n          const testEvent = new CustomEvent('test_spectrometer_data', { \n            detail: { data: parsedData }\n          });\n          window.dispatchEvent(testEvent);\n          console.log('Dispatched test data event', parsedData);\n        } catch (e) {\n          console.error('Error parsing test data', e);\n        }\n      }\n    };\n    \n    // Setup listener in the component\n    setupTestListener();\n  }\n}\n\n// Setup a listener for test data events\nfunction setupTestListener() {\n  // This function would need to be called from the component\n  // You'd need to modify SpectrometerMQTT.js to listen for 'test_spectrometer_data' events\n  console.log(`\n  To use this test script:\n  1. Open the browser console\n  2. Run setupTestWebSocket()\n  3. Run sendTestSpectrometerData('spectrometer_1') or sendTestCropFrameData('spectrometer_1')\n  \n  You'll need to modify your SpectrometerMQTT.js component to listen for the 'test_spectrometer_data' event\n  and process it like a WebSocket message.\n  `);\n}\n\n// Export functions for use in browser console\nwindow.setupTestWebSocket = setupTestWebSocket;\nwindow.sendTestSpectrometerData = sendTestSpectrometerData;\nwindow.sendTestCropFrameData = sendTestCropFrameData;\n\n// If this script is imported as a module\nexport {\n  setupTestWebSocket,\n  sendTestSpectrometerData,\n  sendTestCropFrameData\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}