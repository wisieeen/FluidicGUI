{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\SpectrometerMQTT.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport DraggablePanel from './DraggablePanel';\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\nimport { backgroundVariants } from '../../styles/backgroundStyles';\nimport styles from './styles/USBSpectrometerStyles';\nimport { WS_URL } from '../../config'; // Import WS_URL\n\n// Import subcomponents\nimport MQTTCameraComponent from './SpectrometerMQTT/MQTTCameraComponent';\nimport MQTTGraphComponent from './SpectrometerMQTT/MQTTGraphComponent';\nimport MQTTWaterfallComponent from './SpectrometerMQTT/MQTTWaterfallComponent';\nimport MQTTSettingsComponent from './SpectrometerMQTT/MQTTSettingsComponent';\n\n// Import test data script (only in development mode)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nif (process.env.NODE_ENV === 'development') {\n  import('./SpectrometerMQTT/test_spectral_data').then(() => {\n    console.log('[SpectrometerMQTT] Test data script loaded for development');\n  });\n}\n\n// Add MQTT-specific styles to complement the existing styles\nconst mqttStyles = {\n  cameraSettings: {\n    marginTop: '10px',\n    padding: '8px',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderRadius: '4px'\n  },\n  mqttInputs: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '8px'\n  },\n  inputLabel: {\n    width: '90px',\n    color: '#ccc',\n    fontSize: '14px'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: 'rgba(60, 60, 60, 0.7)',\n    border: '1px solid rgba(100, 100, 100, 0.5)',\n    borderRadius: '4px',\n    padding: '4px 8px',\n    color: 'white',\n    fontSize: '14px'\n  }\n};\n\n// Available waterfall color schemes\nconst waterfallColorSchemeOptions = {\n  grayscale: 'Grayscale',\n  viridis: 'Viridis',\n  plasma: 'Plasma',\n  inferno: 'Inferno',\n  cividis: 'Cividis',\n  turbo: 'Turbo'\n};\nconst SpectrometerMQTT = ({\n  detector,\n  readings = [],\n  onClose,\n  initialPosition = {\n    x: 150,\n    y: 100\n  },\n  detectorId,\n  detectorName,\n  isVisible,\n  position,\n  onMove,\n  onResize,\n  detectorStatus\n}) => {\n  _s();\n  const buttonVariants = useButtonStyles();\n  const [detectorReadings, setDetectorReadings] = useState([]);\n\n  // Panel resizing state\n  const [panelSize, setPanelSize] = useState({\n    width: 1100,\n    height: 750\n  });\n  const [isResizingPanel, setIsResizingPanel] = useState(false);\n  const panelRef = useRef(null);\n\n  // Add state for resize feedback\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n\n  // Subcomponent visibility toggles\n  const [showCamera, setShowCamera] = useState(true);\n  const [showGraph, setShowGraph] = useState(true);\n  const [showWaterfall, setShowWaterfall] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Data state - replace lineData with spectrumData\n  const [spectrumData, setSpectrumData] = useState(null); // Data from spectrometer\n  const [processedData, setProcessedData] = useState(null); // Data from crop processing\n\n  // Track if we're currently using processed crop data\n  const [usingCropData, setUsingCropData] = useState(false);\n\n  // Save/load settings state\n  const [saveMessage, setSaveMessage] = useState('');\n  const [cameraSettings, setCameraSettings] = useState(null);\n  const [calibrationSettings, setCalibrationSettings] = useState(null);\n\n  // Frame accumulation state (shared between Graph and Waterfall)\n  const [frameAccumCount, setFrameAccumCount] = useState(10);\n  const [isAccumulating, setIsAccumulating] = useState(true);\n\n  // Waterfall color scheme state\n  const [waterfallColorScheme, setWaterfallColorScheme] = useState('cividis');\n  const [showWaterfallColorMenu, setShowWaterfallColorMenu] = useState(false);\n\n  // References to component methods\n  const wsRef = useRef(null); // Ref to hold the WebSocket instance\n  const mqttTopicRef = useRef('spectrometer_1'); // Ref to hold the current MQTT topic\n  const cameraRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Handle frame accumulation change\n  const handleFrameAccumCountChange = count => {\n    setFrameAccumCount(count);\n  };\n\n  // Handle accumulation mode toggle\n  const handleAccumulationToggle = isActive => {\n    setIsAccumulating(isActive);\n  };\n\n  // Handle waterfall color scheme change\n  const handleWaterfallColorSchemeChange = scheme => {\n    setWaterfallColorScheme(scheme);\n    setShowWaterfallColorMenu(false);\n  };\n\n  // Process readings when they change\n  useEffect(() => {\n    var _detector$data;\n    if (readings && readings.length > 0 && detector !== null && detector !== void 0 && (_detector$data = detector.data) !== null && _detector$data !== void 0 && _detector$data.properties) {\n      // Process readings here\n      setDetectorReadings(readings);\n    }\n  }, [readings, detector]);\n\n  // Effect for WebSocket connection and message handling\n  useEffect(() => {\n    if (!detectorId) return; // Need detectorId to form topic\n\n    const mainDataTopic = `${detectorId}/response/data`; // Default data topic\n    mqttTopicRef.current = mainDataTopic;\n\n    // Flag to track if the component is still mounted\n    let isMounted = true;\n    console.log('[SpectrometerMQTT] Connecting WebSocket...', WS_URL);\n    const newWs = new WebSocket(WS_URL);\n    wsRef.current = newWs;\n    newWs.onopen = () => {\n      // Check if the component is still mounted and connection wasn't closed\n      if (!isMounted || newWs.readyState !== WebSocket.OPEN) {\n        console.log('[SpectrometerMQTT] WebSocket connected but component unmounted or connection closed');\n        return;\n      }\n      console.log('[SpectrometerMQTT] WebSocket connected');\n      try {\n        // Subscribe to the data topic\n        const subscribeData = {\n          topic: \"common/subscribe\",\n          payload: mainDataTopic\n        };\n\n        // Make sure WebSocket is still valid before sending\n        if (newWs && newWs.readyState === WebSocket.OPEN) {\n          newWs.send(JSON.stringify(subscribeData));\n          console.log(`[SpectrometerMQTT] Subscribed to: ${mainDataTopic}`);\n        } else {\n          console.warn('[SpectrometerMQTT] Cannot subscribe: WebSocket not available or not open');\n        }\n      } catch (err) {\n        console.error('[SpectrometerMQTT] Error in onopen handler:', err);\n      }\n    };\n    newWs.onmessage = event => {\n      if (!isMounted) return;\n      try {\n        const data = JSON.parse(event.data);\n        // Use the shared processWebsocketMessage function\n        processWebsocketMessage(data);\n      } catch (error) {\n        console.error('[SpectrometerMQTT] Error processing WebSocket message:', error, 'Raw:', event.data);\n      }\n    };\n    newWs.onerror = error => {\n      if (!isMounted) return;\n      console.error('[SpectrometerMQTT] WebSocket error:', error);\n    };\n    newWs.onclose = event => {\n      if (!isMounted) return;\n      console.log('[SpectrometerMQTT] WebSocket closed:', event.code, event.reason);\n      if (wsRef.current === newWs) {\n        wsRef.current = null;\n      }\n      // Don't clear data on disconnect - just keep the last values\n    };\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n\n      // Store a reference to the current WebSocket\n      const ws = wsRef.current;\n\n      // Important: Set wsRef.current to null BEFORE closing\n      // This prevents race conditions with the onopen callback\n      wsRef.current = null;\n      if (ws) {\n        console.log('[SpectrometerMQTT] Closing WebSocket connection...');\n        try {\n          // Only close if it's still in a state that can be closed\n          if (ws.readyState === WebSocket.CONNECTING || ws.readyState === WebSocket.OPEN) {\n            ws.close();\n          }\n        } catch (err) {\n          console.error('[SpectrometerMQTT] Error closing WebSocket:', err);\n        }\n      }\n    };\n  }, [detectorId]); // Reconnect if detectorId changes\n\n  // Add event listener for test data\n  useEffect(() => {\n    const handleTestData = event => {\n      try {\n        const {\n          data\n        } = event.detail;\n        console.log('[SpectrometerMQTT] Received test data:', data);\n\n        // Process the test data as if it were received from the WebSocket\n        const testData = {\n          topic: data.topic,\n          payload: data.payload\n        };\n        processWebsocketMessage(testData);\n      } catch (error) {\n        console.error('[SpectrometerMQTT] Error processing test data:', error);\n      }\n    };\n\n    // Add event listener\n    window.addEventListener('test_spectrometer_data', handleTestData);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('test_spectrometer_data', handleTestData);\n    };\n  }, [detectorId, usingCropData]); // Add dependencies as needed\n\n  // Function to process WebSocket messages (extracted for reuse with test data)\n  const processWebsocketMessage = data => {\n    if (!data || !data.topic) return;\n    try {\n      // Check if the message is on the subscribed data topic\n      if (data.topic === mqttTopicRef.current) {\n        let parsedPayload = null;\n        if (data.payload && typeof data.payload === 'string') {\n          try {\n            parsedPayload = JSON.parse(data.payload);\n          } catch (e) {/* Ignore if not JSON */}\n        } else if (data.payload && typeof data.payload === 'object') {\n          parsedPayload = data.payload;\n        }\n\n        // Check if payload contains spectral data\n        if (parsedPayload) {\n          // Check if this is graph data from crop processing\n          if (parsedPayload.graph_data) {\n            console.log('[SpectrometerMQTT] Received graph data from crop processing');\n            const cropGraphData = parsedPayload.graph_data;\n\n            // Transform the graph data to expected format\n            const graphData = {\n              pixelData: {\n                timestamp: cropGraphData.timestamp || Date.now(),\n                wavelengths: cropGraphData.wavelengths,\n                // Raw wavelength values\n                positions: cropGraphData.wavelengths.map((w, i) => i / (cropGraphData.wavelengths.length - 1)),\n                // Normalized positions\n                red: cropGraphData.red,\n                green: cropGraphData.green,\n                blue: cropGraphData.blue,\n                // We won't calculate intensity here, let the graph component do it\n                lineLength: cropGraphData.red.length,\n                isRawData: true,\n                bitDepth: cropGraphData.bit_depth || 12,\n                dataType: cropGraphData.data_type || 'raw_rgb'\n              }\n            };\n            setProcessedData(graphData);\n            setUsingCropData(true); // Flag that we're using crop data\n          }\n          // Check if this has raw data (wavelengths + raw channels)\n          else if (parsedPayload.wavelengths && (parsedPayload.raw_data || parsedPayload.raw_red)) {\n            console.log('[SpectrometerMQTT] Received raw spectral data');\n            setSpectrumData(parsedPayload);\n\n            // Only switch to spectral data if we're not actively using crop data\n            if (!usingCropData) {\n              // Create graph data format for raw data\n              const graphData = {\n                pixelData: {\n                  timestamp: parsedPayload.timestamp || Date.now(),\n                  wavelengths: parsedPayload.wavelengths,\n                  // Raw wavelength values\n                  positions: parsedPayload.wavelengths.map((w, i) => i / (parsedPayload.wavelengths.length - 1)),\n                  // Normalized positions\n                  isRawData: true,\n                  bitDepth: parsedPayload.bit_depth || 12,\n                  dataType: parsedPayload.data_type\n                }\n              };\n\n              // Handle different raw data formats\n              if (parsedPayload.data_type === 'raw_mono' && parsedPayload.raw_data) {\n                // For monochrome, use raw_data for all channels\n                graphData.pixelData.red = parsedPayload.raw_data;\n                graphData.pixelData.green = parsedPayload.raw_data;\n                graphData.pixelData.blue = parsedPayload.raw_data;\n                graphData.pixelData.lineLength = parsedPayload.raw_data.length;\n              } else if ((parsedPayload.data_type === 'raw_rgb' || parsedPayload.data_type === 'raw_rgba') && parsedPayload.raw_red && parsedPayload.raw_green && parsedPayload.raw_blue) {\n                // For RGB, use separate channels\n                graphData.pixelData.red = parsedPayload.raw_red;\n                graphData.pixelData.green = parsedPayload.raw_green;\n                graphData.pixelData.blue = parsedPayload.raw_blue;\n                // Don't calculate intensity here, let the graph component handle it\n                graphData.pixelData.lineLength = parsedPayload.raw_red.length;\n              }\n              setProcessedData(graphData);\n            }\n          }\n          // Legacy support for traditional spectral data (wavelengths + intensities)\n          else if (parsedPayload.wavelengths && parsedPayload.intensities) {\n            console.log('[SpectrometerMQTT] Received traditional spectral data');\n            setSpectrumData(parsedPayload);\n\n            // Only switch to spectral data if we're not actively using crop data\n            if (!usingCropData) {\n              // Create graph data format\n              const graphData = {\n                pixelData: {\n                  timestamp: parsedPayload.timestamp || Date.now(),\n                  wavelengths: parsedPayload.wavelengths,\n                  positions: parsedPayload.wavelengths.map((w, i) => i / (parsedPayload.wavelengths.length - 1)),\n                  intensity: parsedPayload.intensities,\n                  // Create uniform color channels from intensity\n                  red: parsedPayload.intensities,\n                  green: parsedPayload.intensities,\n                  blue: parsedPayload.intensities,\n                  lineLength: parsedPayload.intensities.length,\n                  isRawData: false\n                }\n              };\n              setProcessedData(graphData);\n            }\n          } else if (parsedPayload.error) {\n            console.warn(`[SpectrometerMQTT] Received error from backend: ${parsedPayload.error}`);\n            // Don't clear data on error - just leave the previous data\n          } else {\n            console.warn('[SpectrometerMQTT] Received data message with unexpected payload:', parsedPayload);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('[SpectrometerMQTT] Error processing message:', error);\n    }\n  };\n\n  // Handle crop data toggle\n  const handleCropDataToggle = isEnabled => {\n    setUsingCropData(isEnabled);\n  };\n\n  // Save camera and calibration settings\n  const saveSettings = () => {\n    try {\n      var _cameraRef$current, _cameraRef$current2, _graphRef$current, _graphRef$current2, _graphRef$current2$ge;\n      // Get camera settings\n      const camSettings = (_cameraRef$current = cameraRef.current) === null || _cameraRef$current === void 0 ? void 0 : _cameraRef$current.getSettings();\n\n      // Get crop frame settings\n      const cropSettings = (_cameraRef$current2 = cameraRef.current) === null || _cameraRef$current2 === void 0 ? void 0 : _cameraRef$current2.getCropSettings();\n\n      // Get calibration settings from graph component\n      const calSettings = (_graphRef$current = graphRef.current) === null || _graphRef$current === void 0 ? void 0 : _graphRef$current.getCalibrationSettings();\n      if (!camSettings && !calSettings && !cropSettings) {\n        console.warn('No settings to save - components may not be mounted');\n        setSaveMessage('No settings to save');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Create a settings object to save\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        cropFrame: cropSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Save waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        },\n        // Save frame accumulation settings\n        frameAccumulation: {\n          count: frameAccumCount,\n          isEnabled: isAccumulating\n        },\n        // Save peak markers settings if available from graph component\n        peakMarkers: ((_graphRef$current2 = graphRef.current) === null || _graphRef$current2 === void 0 ? void 0 : (_graphRef$current2$ge = _graphRef$current2.getPeakSettings) === null || _graphRef$current2$ge === void 0 ? void 0 : _graphRef$current2$ge.call(_graphRef$current2)) || {\n          count: 3,\n          showMarkers: true\n        },\n        // Save component visibility states\n        visibilityState: {\n          camera: showCamera,\n          graph: showGraph,\n          waterfall: showWaterfall,\n          settings: showSettings\n        },\n        // Save crop data state\n        usingCropData: usingCropData\n      };\n\n      // Save to localStorage\n      localStorage.setItem(`detector_settings_${detectorId || 'default'}`, JSON.stringify(settings));\n\n      // Set save message for user feedback\n      setSaveMessage('Settings saved successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n      setSaveMessage('Error saving settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      var _cameraRef$current3, _cameraRef$current4, _graphRef$current3, _graphRef$current4, _graphRef$current4$ge;\n      // Get camera settings\n      const camSettings = (_cameraRef$current3 = cameraRef.current) === null || _cameraRef$current3 === void 0 ? void 0 : _cameraRef$current3.getSettings();\n\n      // Get crop frame settings\n      const cropSettings = (_cameraRef$current4 = cameraRef.current) === null || _cameraRef$current4 === void 0 ? void 0 : _cameraRef$current4.getCropSettings();\n\n      // Get calibration settings from graph component\n      const calSettings = (_graphRef$current3 = graphRef.current) === null || _graphRef$current3 === void 0 ? void 0 : _graphRef$current3.getCalibrationSettings();\n      if (!camSettings && !calSettings && !cropSettings) {\n        console.warn('No settings to export - components may not be mounted');\n        setSaveMessage('No settings to export');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Create a settings object to export\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        cropFrame: cropSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Export waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        },\n        // Export frame accumulation settings\n        frameAccumulation: {\n          count: frameAccumCount,\n          isEnabled: isAccumulating\n        },\n        // Export peak markers settings if available from graph component\n        peakMarkers: ((_graphRef$current4 = graphRef.current) === null || _graphRef$current4 === void 0 ? void 0 : (_graphRef$current4$ge = _graphRef$current4.getPeakSettings) === null || _graphRef$current4$ge === void 0 ? void 0 : _graphRef$current4$ge.call(_graphRef$current4)) || {\n          count: 3,\n          showMarkers: true\n        },\n        // Export component visibility states\n        visibilityState: {\n          camera: showCamera,\n          graph: showGraph,\n          waterfall: showWaterfall,\n          settings: showSettings\n        },\n        // Export crop data state\n        usingCropData: usingCropData\n      };\n\n      // Create a file name with timestamp\n      const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\\./g, '_');\n      const fileName = `detector_settings_${detectorId || 'default'}_${timestamp}.json`;\n\n      // Create a Blob with the JSON data\n      const blob = new Blob([JSON.stringify(settings, null, 2)], {\n        type: 'application/json'\n      });\n\n      // Create a URL for the Blob\n      const url = URL.createObjectURL(blob);\n\n      // Create a temporary link element to trigger the download\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Append to the document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Set save message for user feedback\n      setSaveMessage('Settings exported to file');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    try {\n      var _cameraRef$current5, _savedSettings$waterf, _graphRef$current5;\n      // Get settings from localStorage\n      const savedSettingsStr = localStorage.getItem(`detector_settings_${detectorId || 'default'}`);\n      if (!savedSettingsStr) {\n        setSaveMessage('No saved settings found');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Parse the settings\n      const savedSettings = JSON.parse(savedSettingsStr);\n\n      // Apply camera settings if available\n      if (savedSettings.camera && cameraRef.current) {\n        try {\n          cameraRef.current.applySettings(savedSettings.camera);\n        } catch (err) {\n          console.error('Error applying camera settings:', err);\n        }\n      }\n\n      // Apply crop frame settings if available\n      if (savedSettings.cropFrame && (_cameraRef$current5 = cameraRef.current) !== null && _cameraRef$current5 !== void 0 && _cameraRef$current5.applyCropSettings) {\n        try {\n          cameraRef.current.applyCropSettings(savedSettings.cropFrame);\n        } catch (err) {\n          console.error('Error applying crop frame settings:', err);\n        }\n      }\n\n      // Apply calibration settings if available\n      if (savedSettings.calibration && graphRef.current) {\n        try {\n          graphRef.current.applyCalibrationSettings(savedSettings.calibration);\n        } catch (err) {\n          console.error('Error applying calibration settings:', err);\n        }\n      }\n\n      // Apply waterfall settings if available\n      if ((_savedSettings$waterf = savedSettings.waterfall) !== null && _savedSettings$waterf !== void 0 && _savedSettings$waterf.colorScheme) {\n        setWaterfallColorScheme(savedSettings.waterfall.colorScheme);\n      }\n\n      // Apply frame accumulation settings if available\n      if (savedSettings.frameAccumulation) {\n        if (typeof savedSettings.frameAccumulation.count === 'number') {\n          setFrameAccumCount(savedSettings.frameAccumulation.count);\n        }\n        if (typeof savedSettings.frameAccumulation.isEnabled === 'boolean') {\n          setIsAccumulating(savedSettings.frameAccumulation.isEnabled);\n        }\n      }\n\n      // Apply peak markers settings if available\n      if (savedSettings.peakMarkers && (_graphRef$current5 = graphRef.current) !== null && _graphRef$current5 !== void 0 && _graphRef$current5.applyPeakSettings) {\n        try {\n          graphRef.current.applyPeakSettings(savedSettings.peakMarkers);\n        } catch (err) {\n          console.error('Error applying peak markers settings:', err);\n        }\n      }\n\n      // Apply component visibility state if available\n      if (savedSettings.visibilityState) {\n        if (typeof savedSettings.visibilityState.camera === 'boolean') {\n          setShowCamera(savedSettings.visibilityState.camera);\n        }\n        if (typeof savedSettings.visibilityState.graph === 'boolean') {\n          setShowGraph(savedSettings.visibilityState.graph);\n        }\n        if (typeof savedSettings.visibilityState.waterfall === 'boolean') {\n          setShowWaterfall(savedSettings.visibilityState.waterfall);\n        }\n        if (typeof savedSettings.visibilityState.settings === 'boolean') {\n          setShowSettings(savedSettings.visibilityState.settings);\n        }\n      }\n\n      // Apply crop data state if available\n      if (typeof savedSettings.usingCropData === 'boolean') {\n        setUsingCropData(savedSettings.usingCropData);\n      }\n\n      // Make sure camera is started automatically\n      setTimeout(async () => {\n        if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n          try {\n            await cameraRef.current.startCamera();\n            console.log('Camera started automatically after loading settings');\n          } catch (err) {\n            console.error('Failed to auto-start camera:', err);\n          }\n        }\n      }, 500); // Short delay to allow settings to be applied\n\n      // Set save message for user feedback\n      setSaveMessage('Settings loaded successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      setSaveMessage('Error loading settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Import settings from a JSON file\n  const importSettings = () => {\n    try {\n      // Create a file input element\n      const fileInput = document.createElement('input');\n      fileInput.type = 'file';\n      fileInput.accept = '.json';\n\n      // Handle file selection\n      fileInput.onchange = event => {\n        const file = event.target.files[0];\n        if (!file) return;\n        const reader = new FileReader();\n        reader.onload = e => {\n          try {\n            var _cameraRef$current6, _importedSettings$wat, _graphRef$current6;\n            // Parse the file contents\n            const importedSettings = JSON.parse(e.target.result);\n\n            // Apply camera settings if available\n            if (importedSettings.camera && cameraRef.current) {\n              try {\n                cameraRef.current.applySettings(importedSettings.camera);\n              } catch (err) {\n                console.error('Error applying imported camera settings:', err);\n              }\n            }\n\n            // Apply crop frame settings if available\n            if (importedSettings.cropFrame && (_cameraRef$current6 = cameraRef.current) !== null && _cameraRef$current6 !== void 0 && _cameraRef$current6.applyCropSettings) {\n              try {\n                cameraRef.current.applyCropSettings(importedSettings.cropFrame);\n              } catch (err) {\n                console.error('Error applying imported crop frame settings:', err);\n              }\n            }\n\n            // Apply calibration settings if available\n            if (importedSettings.calibration && graphRef.current) {\n              try {\n                graphRef.current.applyCalibrationSettings(importedSettings.calibration);\n              } catch (err) {\n                console.error('Error applying imported calibration settings:', err);\n              }\n            }\n\n            // Apply waterfall settings if available\n            if ((_importedSettings$wat = importedSettings.waterfall) !== null && _importedSettings$wat !== void 0 && _importedSettings$wat.colorScheme) {\n              setWaterfallColorScheme(importedSettings.waterfall.colorScheme);\n            }\n\n            // Apply frame accumulation settings if available\n            if (importedSettings.frameAccumulation) {\n              if (typeof importedSettings.frameAccumulation.count === 'number') {\n                setFrameAccumCount(importedSettings.frameAccumulation.count);\n              }\n              if (typeof importedSettings.frameAccumulation.isEnabled === 'boolean') {\n                setIsAccumulating(importedSettings.frameAccumulation.isEnabled);\n              }\n            }\n\n            // Apply peak markers settings if available\n            if (importedSettings.peakMarkers && (_graphRef$current6 = graphRef.current) !== null && _graphRef$current6 !== void 0 && _graphRef$current6.applyPeakSettings) {\n              try {\n                graphRef.current.applyPeakSettings(importedSettings.peakMarkers);\n              } catch (err) {\n                console.error('Error applying peak markers settings:', err);\n              }\n            }\n\n            // Apply component visibility state if available\n            if (importedSettings.visibilityState) {\n              if (typeof importedSettings.visibilityState.camera === 'boolean') {\n                setShowCamera(importedSettings.visibilityState.camera);\n              }\n              if (typeof importedSettings.visibilityState.graph === 'boolean') {\n                setShowGraph(importedSettings.visibilityState.graph);\n              }\n              if (typeof importedSettings.visibilityState.waterfall === 'boolean') {\n                setShowWaterfall(importedSettings.visibilityState.waterfall);\n              }\n              if (typeof importedSettings.visibilityState.settings === 'boolean') {\n                setShowSettings(importedSettings.visibilityState.settings);\n              }\n            }\n\n            // Apply crop data state if available\n            if (typeof importedSettings.usingCropData === 'boolean') {\n              setUsingCropData(importedSettings.usingCropData);\n            }\n\n            // Make sure camera is started automatically\n            setTimeout(async () => {\n              if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n                try {\n                  await cameraRef.current.startCamera();\n                  console.log('Camera started automatically after loading settings');\n                } catch (err) {\n                  console.error('Failed to auto-start camera:', err);\n                }\n              }\n            }, 500); // Short delay to allow settings to be applied\n\n            // Set save message for user feedback\n            setSaveMessage('Settings imported successfully');\n            setTimeout(() => setSaveMessage(''), 3000);\n          } catch (parseError) {\n            console.error('Failed to parse imported settings file:', parseError);\n            setSaveMessage('Error: Invalid settings file');\n            setTimeout(() => setSaveMessage(''), 3000);\n          }\n        };\n        reader.onerror = () => {\n          setSaveMessage('Error reading file');\n          setTimeout(() => setSaveMessage(''), 3000);\n        };\n\n        // Read the file as text\n        reader.readAsText(file);\n      };\n\n      // Trigger file selection dialog\n      fileInput.click();\n    } catch (error) {\n      console.error('Failed to import settings:', error);\n      setSaveMessage('Error importing settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Handler for panel resizing - completely rewritten for reliability\n  const handlePanelResizeStart = e => {\n    var _panelRef$current, _panelRef$current2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_panelRef$current = panelRef.current) === null || _panelRef$current === void 0 ? void 0 : _panelRef$current.offsetWidth) || panelSize.width;\n    const startHeight = ((_panelRef$current2 = panelRef.current) === null || _panelRef$current2 === void 0 ? void 0 : _panelRef$current2.offsetHeight) || panelSize.height;\n\n    // Show resize feedback\n    setIsResizingPanel(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaX = moveEvent.clientX - startX;\n      const deltaY = moveEvent.clientY - startY;\n      const newWidth = Math.max(400, startWidth + deltaX);\n      const newHeight = Math.max(300, startHeight + deltaY);\n\n      // Update panel size\n      setPanelSize({\n        width: newWidth,\n        height: newHeight\n      });\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizingPanel(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle visibility of subcomponents\n  const toggleCamera = () => setShowCamera(!showCamera);\n  const toggleGraph = () => setShowGraph(!showGraph);\n  const toggleWaterfall = () => setShowWaterfall(!showWaterfall);\n  const toggleSettings = () => setShowSettings(!showSettings);\n\n  // Styles for toggle buttons\n  const getToggleButtonStyle = isActive => ({\n    ...buttonVariants.smallSecondary,\n    opacity: isActive ? 1 : 0.5,\n    marginRight: '4px',\n    marginBottom: '4px'\n  });\n\n  // Handle subcomponent resize events\n  const handleCameraResize = newSize => {\n    console.log('Camera resized:', newSize);\n    // Additional logic if needed\n  };\n  const handleGraphResize = newSize => {\n    console.log('Graph resized:', newSize);\n    // Additional logic if needed\n  };\n  const handleWaterfallResize = newSize => {\n    console.log('Waterfall resized:', newSize);\n    // Additional logic if needed\n  };\n\n  // Handle settings changes\n  const handleSettingsChange = settings => {\n    console.log('Settings changed:', settings);\n    // Update relevant state/behavior based on settings\n  };\n\n  // Render panel content\n  if (!detector) return null;\n  return /*#__PURE__*/_jsxDEV(DraggablePanel, {\n    title: `MQTT Spectrometer: ${detector.label || detector.id}`,\n    initialPosition: initialPosition,\n    width: panelSize.width,\n    height: panelSize.height,\n    onClose: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: panelRef,\n      style: {\n        ...styles.container,\n        width: `${panelSize.width}px`,\n        height: `${panelSize.height}px`,\n        minHeight: '300px',\n        position: 'relative',\n        border: isResizingPanel ? '1px dashed #4CAF50' : 'none',\n        transition: isResizingPanel ? 'none' : 'border 0.3s ease'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.controlBar,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.controlLabel,\n            children: \"Components:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleCamera,\n            style: getToggleButtonStyle(showCamera),\n            children: showCamera ? '📹 Hide Camera' : '📹 Show Camera'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 876,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleGraph,\n            style: getToggleButtonStyle(showGraph),\n            children: showGraph ? '📊 Hide Graph' : '📊 Show Graph'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleWaterfall,\n            style: getToggleButtonStyle(showWaterfall),\n            children: showWaterfall ? '🌊 Hide Waterfall' : '🌊 Show Waterfall'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleSettings,\n            style: getToggleButtonStyle(showSettings),\n            children: showSettings ? '⚙️ Hide Settings' : '⚙️ Show Settings'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: '15px',\n              borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n              paddingLeft: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: saveSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(50, 150, 50, 0.7)'\n              },\n              title: \"Save camera and calibration settings to browser storage\",\n              children: \"\\uD83D\\uDCBE Save Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: exportSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(120, 120, 30, 0.7)'\n              },\n              title: \"Export camera and calibration settings to JSON file\",\n              children: \"\\uD83D\\uDCE4 Export Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 918,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: loadSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(50, 100, 150, 0.7)'\n              },\n              title: \"Load saved camera and calibration settings from browser storage\",\n              children: \"\\uD83D\\uDCE5 Load Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 931,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: importSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(120, 70, 150, 0.7)'\n              },\n              title: \"Import camera and calibration settings from JSON file\",\n              children: \"\\uD83D\\uDCC1 Import File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 944,\n              columnNumber: 15\n            }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '12px',\n                backgroundColor: 'rgba(0, 0, 0, 0.6)',\n                padding: '2px 6px',\n                borderRadius: '3px',\n                marginLeft: '8px'\n              },\n              children: saveMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 958,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.columnsContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: showCamera ? 'block' : 'none',\n            flex: '1 1 50%',\n            minWidth: '320px',\n            maxWidth: '650px',\n            marginRight: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(MQTTCameraComponent, {\n            ref: cameraRef,\n            onResize: handleCameraResize,\n            detectorId: detectorId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 982,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...styles.rightColumn,\n            flex: '1 1 50%'\n          },\n          children: [showGraph && /*#__PURE__*/_jsxDEV(MQTTGraphComponent, {\n            ref: graphRef,\n            onResize: handleGraphResize,\n            lineData: processedData // Use processedData instead of spectrumData\n            // Pass the frame accumulation props up to parent to manage\n            ,\n            onFrameAccumCountChange: handleFrameAccumCountChange,\n            onAccumulationToggle: handleAccumulationToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 996,\n            columnNumber: 15\n          }, this), showWaterfall && /*#__PURE__*/_jsxDEV(MQTTWaterfallComponent, {\n            onResize: handleWaterfallResize,\n            lineData: processedData // Use processedData instead of spectrumData\n            ,\n            frameAccumCount: frameAccumCount,\n            isAccumulating: isAccumulating,\n            colorScale: waterfallColorScheme,\n            onColorScaleChange: handleWaterfallColorSchemeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1008,\n            columnNumber: 15\n          }, this), showSettings && /*#__PURE__*/_jsxDEV(MQTTSettingsComponent, {\n            onSettingChange: (setting, value) => console.log('Setting changed:', setting, value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1020,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 990,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 9\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          right: '30px',\n          bottom: '30px',\n          padding: '4px 8px',\n          background: 'rgba(0, 0, 0, 0.6)',\n          color: 'white',\n          borderRadius: '3px',\n          fontSize: '12px',\n          zIndex: 1000\n        },\n        children: [Math.round(panelSize.width), \" x \", Math.round(panelSize.height)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handlePanelResizeStart,\n        title: \"Drag to resize panel\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 20 20\",\n          style: {\n            display: 'block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            width: \"20\",\n            height: \"20\",\n            fill: \"transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1056,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M14,6 L6,14 M17,9 L9,17 M17,13 L13,17\",\n            stroke: \"white\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1057,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 852,\n    columnNumber: 5\n  }, this);\n};\n_s(SpectrometerMQTT, \"91gKalo4uSNnjxwfaNUi4AgvxhE=\", false, function () {\n  return [useButtonStyles];\n});\n_c = SpectrometerMQTT;\nexport default SpectrometerMQTT;\nvar _c;\n$RefreshReg$(_c, \"SpectrometerMQTT\");","map":{"version":3,"names":["React","useState","useRef","useEffect","DraggablePanel","useButtonStyles","backgroundVariants","styles","WS_URL","MQTTCameraComponent","MQTTGraphComponent","MQTTWaterfallComponent","MQTTSettingsComponent","jsxDEV","_jsxDEV","process","env","NODE_ENV","then","console","log","mqttStyles","cameraSettings","marginTop","padding","backgroundColor","borderRadius","mqttInputs","display","alignItems","marginBottom","inputLabel","width","color","fontSize","input","flex","border","waterfallColorSchemeOptions","grayscale","viridis","plasma","inferno","cividis","turbo","SpectrometerMQTT","detector","readings","onClose","initialPosition","x","y","detectorId","detectorName","isVisible","position","onMove","onResize","detectorStatus","_s","buttonVariants","detectorReadings","setDetectorReadings","panelSize","setPanelSize","height","isResizingPanel","setIsResizingPanel","panelRef","showResizeInfo","setShowResizeInfo","showCamera","setShowCamera","showGraph","setShowGraph","showWaterfall","setShowWaterfall","showSettings","setShowSettings","spectrumData","setSpectrumData","processedData","setProcessedData","usingCropData","setUsingCropData","saveMessage","setSaveMessage","setCameraSettings","calibrationSettings","setCalibrationSettings","frameAccumCount","setFrameAccumCount","isAccumulating","setIsAccumulating","waterfallColorScheme","setWaterfallColorScheme","showWaterfallColorMenu","setShowWaterfallColorMenu","wsRef","mqttTopicRef","cameraRef","graphRef","handleFrameAccumCountChange","count","handleAccumulationToggle","isActive","handleWaterfallColorSchemeChange","scheme","_detector$data","length","data","properties","mainDataTopic","current","isMounted","newWs","WebSocket","onopen","readyState","OPEN","subscribeData","topic","payload","send","JSON","stringify","warn","err","error","onmessage","event","parse","processWebsocketMessage","onerror","onclose","code","reason","ws","CONNECTING","close","handleTestData","detail","testData","window","addEventListener","removeEventListener","parsedPayload","e","graph_data","cropGraphData","graphData","pixelData","timestamp","Date","now","wavelengths","positions","map","w","i","red","green","blue","lineLength","isRawData","bitDepth","bit_depth","dataType","data_type","raw_data","raw_red","raw_green","raw_blue","intensities","intensity","handleCropDataToggle","isEnabled","saveSettings","_cameraRef$current","_cameraRef$current2","_graphRef$current","_graphRef$current2","_graphRef$current2$ge","camSettings","getSettings","cropSettings","getCropSettings","calSettings","getCalibrationSettings","setTimeout","settings","camera","calibration","cropFrame","toISOString","waterfall","colorScheme","frameAccumulation","peakMarkers","getPeakSettings","call","showMarkers","visibilityState","graph","localStorage","setItem","exportSettings","_cameraRef$current3","_cameraRef$current4","_graphRef$current3","_graphRef$current4","_graphRef$current4$ge","replace","fileName","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","loadSettings","_cameraRef$current5","_savedSettings$waterf","_graphRef$current5","savedSettingsStr","getItem","savedSettings","applySettings","applyCropSettings","applyCalibrationSettings","applyPeakSettings","startCamera","importSettings","fileInput","accept","onchange","file","target","files","reader","FileReader","onload","_cameraRef$current6","_importedSettings$wat","_graphRef$current6","importedSettings","result","parseError","readAsText","handlePanelResizeStart","_panelRef$current","_panelRef$current2","preventDefault","stopPropagation","startX","clientX","startY","clientY","startWidth","offsetWidth","startHeight","offsetHeight","handleMouseMove","moveEvent","deltaX","deltaY","newWidth","Math","max","newHeight","handleMouseUp","toggleCamera","toggleGraph","toggleWaterfall","toggleSettings","getToggleButtonStyle","smallSecondary","opacity","marginRight","handleCameraResize","newSize","handleGraphResize","handleWaterfallResize","handleSettingsChange","title","label","id","children","ref","style","container","minHeight","transition","controlBar","controlLabel","_jsxFileName","lineNumber","columnNumber","onClick","marginLeft","borderLeft","paddingLeft","smallPrimary","columnsContainer","minWidth","maxWidth","rightColumn","lineData","onFrameAccumCountChange","onAccumulationToggle","colorScale","onColorScaleChange","onSettingChange","setting","value","right","bottom","background","zIndex","round","resizeHandle","onMouseDown","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","_c","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/SpectrometerMQTT.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport DraggablePanel from './DraggablePanel';\r\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\r\nimport { backgroundVariants } from '../../styles/backgroundStyles';\r\nimport styles from './styles/USBSpectrometerStyles';\r\nimport { WS_URL } from '../../config'; // Import WS_URL\r\n\r\n// Import subcomponents\r\nimport MQTTCameraComponent from './SpectrometerMQTT/MQTTCameraComponent';\r\nimport MQTTGraphComponent from './SpectrometerMQTT/MQTTGraphComponent';\r\nimport MQTTWaterfallComponent from './SpectrometerMQTT/MQTTWaterfallComponent';\r\nimport MQTTSettingsComponent from './SpectrometerMQTT/MQTTSettingsComponent';\r\n\r\n// Import test data script (only in development mode)\r\nif (process.env.NODE_ENV === 'development') {\r\n  import('./SpectrometerMQTT/test_spectral_data').then(() => {\r\n    console.log('[SpectrometerMQTT] Test data script loaded for development');\r\n  });\r\n}\r\n\r\n// Add MQTT-specific styles to complement the existing styles\r\nconst mqttStyles = {\r\n  cameraSettings: {\r\n    marginTop: '10px',\r\n    padding: '8px',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n    borderRadius: '4px'\r\n  },\r\n  mqttInputs: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: '8px'\r\n  },\r\n  inputLabel: {\r\n    width: '90px',\r\n    color: '#ccc',\r\n    fontSize: '14px'\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    backgroundColor: 'rgba(60, 60, 60, 0.7)',\r\n    border: '1px solid rgba(100, 100, 100, 0.5)',\r\n    borderRadius: '4px',\r\n    padding: '4px 8px',\r\n    color: 'white',\r\n    fontSize: '14px'\r\n  }\r\n};\r\n\r\n// Available waterfall color schemes\r\nconst waterfallColorSchemeOptions = {\r\n  grayscale: 'Grayscale',\r\n  viridis: 'Viridis',\r\n  plasma: 'Plasma',\r\n  inferno: 'Inferno',\r\n  cividis: 'Cividis',\r\n  turbo: 'Turbo'\r\n};\r\n\r\nconst SpectrometerMQTT = ({ detector, readings = [], onClose, initialPosition = { x: 150, y: 100 }, detectorId, detectorName, isVisible, position, onMove, onResize, detectorStatus }) => {\r\n  const buttonVariants = useButtonStyles();\r\n  const [detectorReadings, setDetectorReadings] = useState([]);\r\n  \r\n  // Panel resizing state\r\n  const [panelSize, setPanelSize] = useState({ width: 1100, height: 750 });\r\n  const [isResizingPanel, setIsResizingPanel] = useState(false);\r\n  const panelRef = useRef(null);\r\n  \r\n  // Add state for resize feedback\r\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\r\n  \r\n  // Subcomponent visibility toggles\r\n  const [showCamera, setShowCamera] = useState(true);\r\n  const [showGraph, setShowGraph] = useState(true);\r\n  const [showWaterfall, setShowWaterfall] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  \r\n  // Data state - replace lineData with spectrumData\r\n  const [spectrumData, setSpectrumData] = useState(null); // Data from spectrometer\r\n  const [processedData, setProcessedData] = useState(null); // Data from crop processing\r\n\r\n  // Track if we're currently using processed crop data\r\n  const [usingCropData, setUsingCropData] = useState(false);\r\n  \r\n  // Save/load settings state\r\n  const [saveMessage, setSaveMessage] = useState('');\r\n  const [cameraSettings, setCameraSettings] = useState(null);\r\n  const [calibrationSettings, setCalibrationSettings] = useState(null);\r\n  \r\n  // Frame accumulation state (shared between Graph and Waterfall)\r\n  const [frameAccumCount, setFrameAccumCount] = useState(10);\r\n  const [isAccumulating, setIsAccumulating] = useState(true);\r\n  \r\n  // Waterfall color scheme state\r\n  const [waterfallColorScheme, setWaterfallColorScheme] = useState('cividis');\r\n  const [showWaterfallColorMenu, setShowWaterfallColorMenu] = useState(false);\r\n  \r\n  // References to component methods\r\n  const wsRef = useRef(null); // Ref to hold the WebSocket instance\r\n  const mqttTopicRef = useRef('spectrometer_1'); // Ref to hold the current MQTT topic\r\n  const cameraRef = useRef(null);\r\n  const graphRef = useRef(null);\r\n  \r\n  // Handle frame accumulation change\r\n  const handleFrameAccumCountChange = (count) => {\r\n    setFrameAccumCount(count);\r\n  };\r\n  \r\n  // Handle accumulation mode toggle\r\n  const handleAccumulationToggle = (isActive) => {\r\n    setIsAccumulating(isActive);\r\n  };\r\n  \r\n  // Handle waterfall color scheme change\r\n  const handleWaterfallColorSchemeChange = (scheme) => {\r\n    setWaterfallColorScheme(scheme);\r\n    setShowWaterfallColorMenu(false);\r\n  };\r\n  \r\n  // Process readings when they change\r\n  useEffect(() => {\r\n    if (readings && readings.length > 0 && detector?.data?.properties) {\r\n      // Process readings here\r\n      setDetectorReadings(readings);\r\n    }\r\n  }, [readings, detector]);\r\n  \r\n  // Effect for WebSocket connection and message handling\r\n  useEffect(() => {\r\n    if (!detectorId) return; // Need detectorId to form topic\r\n\r\n    const mainDataTopic = `${detectorId}/response/data`; // Default data topic\r\n    mqttTopicRef.current = mainDataTopic;\r\n\r\n    // Flag to track if the component is still mounted\r\n    let isMounted = true;\r\n\r\n    console.log('[SpectrometerMQTT] Connecting WebSocket...', WS_URL);\r\n    const newWs = new WebSocket(WS_URL);\r\n    wsRef.current = newWs;\r\n\r\n    newWs.onopen = () => {\r\n      // Check if the component is still mounted and connection wasn't closed\r\n      if (!isMounted || newWs.readyState !== WebSocket.OPEN) {\r\n        console.log('[SpectrometerMQTT] WebSocket connected but component unmounted or connection closed');\r\n        return;\r\n      }\r\n\r\n      console.log('[SpectrometerMQTT] WebSocket connected');\r\n\r\n      try {\r\n        // Subscribe to the data topic\r\n        const subscribeData = {\r\n          topic: \"common/subscribe\",\r\n          payload: mainDataTopic\r\n        };\r\n        \r\n        // Make sure WebSocket is still valid before sending\r\n        if (newWs && newWs.readyState === WebSocket.OPEN) {\r\n          newWs.send(JSON.stringify(subscribeData));\r\n          console.log(`[SpectrometerMQTT] Subscribed to: ${mainDataTopic}`);\r\n        } else {\r\n          console.warn('[SpectrometerMQTT] Cannot subscribe: WebSocket not available or not open');\r\n        }\r\n      } catch (err) {\r\n        console.error('[SpectrometerMQTT] Error in onopen handler:', err);\r\n      }\r\n    };\r\n\r\n    newWs.onmessage = (event) => {\r\n      if (!isMounted) return;\r\n      \r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        // Use the shared processWebsocketMessage function\r\n        processWebsocketMessage(data);\r\n      } catch (error) {\r\n        console.error('[SpectrometerMQTT] Error processing WebSocket message:', error, 'Raw:', event.data);\r\n      }\r\n    };\r\n\r\n    newWs.onerror = (error) => {\r\n      if (!isMounted) return;\r\n      console.error('[SpectrometerMQTT] WebSocket error:', error);\r\n    };\r\n\r\n    newWs.onclose = (event) => {\r\n      if (!isMounted) return;\r\n      console.log('[SpectrometerMQTT] WebSocket closed:', event.code, event.reason);\r\n      if (wsRef.current === newWs) {\r\n        wsRef.current = null;\r\n      }\r\n      // Don't clear data on disconnect - just keep the last values\r\n    };\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false;\r\n      \r\n      // Store a reference to the current WebSocket\r\n      const ws = wsRef.current;\r\n      \r\n      // Important: Set wsRef.current to null BEFORE closing\r\n      // This prevents race conditions with the onopen callback\r\n      wsRef.current = null;\r\n      \r\n      if (ws) {\r\n        console.log('[SpectrometerMQTT] Closing WebSocket connection...');\r\n        try {\r\n          // Only close if it's still in a state that can be closed\r\n          if (ws.readyState === WebSocket.CONNECTING || \r\n              ws.readyState === WebSocket.OPEN) {\r\n            ws.close();\r\n          }\r\n        } catch (err) {\r\n          console.error('[SpectrometerMQTT] Error closing WebSocket:', err);\r\n        }\r\n      }\r\n    };\r\n\r\n  }, [detectorId]); // Reconnect if detectorId changes\r\n\r\n  // Add event listener for test data\r\n  useEffect(() => {\r\n    const handleTestData = (event) => {\r\n      try {\r\n        const { data } = event.detail;\r\n        console.log('[SpectrometerMQTT] Received test data:', data);\r\n        \r\n        // Process the test data as if it were received from the WebSocket\r\n        const testData = { topic: data.topic, payload: data.payload };\r\n        processWebsocketMessage(testData);\r\n      } catch (error) {\r\n        console.error('[SpectrometerMQTT] Error processing test data:', error);\r\n      }\r\n    };\r\n    \r\n    // Add event listener\r\n    window.addEventListener('test_spectrometer_data', handleTestData);\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('test_spectrometer_data', handleTestData);\r\n    };\r\n  }, [detectorId, usingCropData]); // Add dependencies as needed\r\n\r\n  // Function to process WebSocket messages (extracted for reuse with test data)\r\n  const processWebsocketMessage = (data) => {\r\n    if (!data || !data.topic) return;\r\n    \r\n    try {\r\n      // Check if the message is on the subscribed data topic\r\n      if (data.topic === mqttTopicRef.current) {\r\n        let parsedPayload = null;\r\n        \r\n        if (data.payload && typeof data.payload === 'string') {\r\n          try {\r\n            parsedPayload = JSON.parse(data.payload);\r\n          } catch (e) { /* Ignore if not JSON */ }\r\n        } else if (data.payload && typeof data.payload === 'object') {\r\n          parsedPayload = data.payload;\r\n        }\r\n\r\n        // Check if payload contains spectral data\r\n        if (parsedPayload) {\r\n          // Check if this is graph data from crop processing\r\n          if (parsedPayload.graph_data) {\r\n            console.log('[SpectrometerMQTT] Received graph data from crop processing');\r\n            const cropGraphData = parsedPayload.graph_data;\r\n            \r\n            // Transform the graph data to expected format\r\n            const graphData = {\r\n              pixelData: {\r\n                timestamp: cropGraphData.timestamp || Date.now(),\r\n                wavelengths: cropGraphData.wavelengths, // Raw wavelength values\r\n                positions: cropGraphData.wavelengths.map((w, i) => i / (cropGraphData.wavelengths.length - 1)), // Normalized positions\r\n                red: cropGraphData.red,\r\n                green: cropGraphData.green,\r\n                blue: cropGraphData.blue,\r\n                // We won't calculate intensity here, let the graph component do it\r\n                lineLength: cropGraphData.red.length,\r\n                isRawData: true,\r\n                bitDepth: cropGraphData.bit_depth || 12,\r\n                dataType: cropGraphData.data_type || 'raw_rgb'\r\n              }\r\n            };\r\n            \r\n            setProcessedData(graphData);\r\n            setUsingCropData(true); // Flag that we're using crop data\r\n          }\r\n          // Check if this has raw data (wavelengths + raw channels)\r\n          else if (parsedPayload.wavelengths && (parsedPayload.raw_data || parsedPayload.raw_red)) {\r\n            console.log('[SpectrometerMQTT] Received raw spectral data');\r\n            setSpectrumData(parsedPayload);\r\n            \r\n            // Only switch to spectral data if we're not actively using crop data\r\n            if (!usingCropData) {\r\n              // Create graph data format for raw data\r\n              const graphData = {\r\n                pixelData: {\r\n                  timestamp: parsedPayload.timestamp || Date.now(),\r\n                  wavelengths: parsedPayload.wavelengths, // Raw wavelength values\r\n                  positions: parsedPayload.wavelengths.map((w, i) => i / (parsedPayload.wavelengths.length - 1)), // Normalized positions\r\n                  isRawData: true,\r\n                  bitDepth: parsedPayload.bit_depth || 12,\r\n                  dataType: parsedPayload.data_type\r\n                }\r\n              };\r\n              \r\n              // Handle different raw data formats\r\n              if (parsedPayload.data_type === 'raw_mono' && parsedPayload.raw_data) {\r\n                // For monochrome, use raw_data for all channels\r\n                graphData.pixelData.red = parsedPayload.raw_data;\r\n                graphData.pixelData.green = parsedPayload.raw_data;\r\n                graphData.pixelData.blue = parsedPayload.raw_data;\r\n                graphData.pixelData.lineLength = parsedPayload.raw_data.length;\r\n              } \r\n              else if ((parsedPayload.data_type === 'raw_rgb' || parsedPayload.data_type === 'raw_rgba') && \r\n                       parsedPayload.raw_red && parsedPayload.raw_green && parsedPayload.raw_blue) {\r\n                // For RGB, use separate channels\r\n                graphData.pixelData.red = parsedPayload.raw_red;\r\n                graphData.pixelData.green = parsedPayload.raw_green;\r\n                graphData.pixelData.blue = parsedPayload.raw_blue;\r\n                // Don't calculate intensity here, let the graph component handle it\r\n                graphData.pixelData.lineLength = parsedPayload.raw_red.length;\r\n              }\r\n              \r\n              setProcessedData(graphData);\r\n            }\r\n          }\r\n          // Legacy support for traditional spectral data (wavelengths + intensities)\r\n          else if (parsedPayload.wavelengths && parsedPayload.intensities) {\r\n            console.log('[SpectrometerMQTT] Received traditional spectral data');\r\n            setSpectrumData(parsedPayload);\r\n            \r\n            // Only switch to spectral data if we're not actively using crop data\r\n            if (!usingCropData) {\r\n              // Create graph data format\r\n              const graphData = {\r\n                pixelData: {\r\n                  timestamp: parsedPayload.timestamp || Date.now(),\r\n                  wavelengths: parsedPayload.wavelengths,\r\n                  positions: parsedPayload.wavelengths.map((w, i) => i / (parsedPayload.wavelengths.length - 1)),\r\n                  intensity: parsedPayload.intensities,\r\n                  // Create uniform color channels from intensity\r\n                  red: parsedPayload.intensities,\r\n                  green: parsedPayload.intensities,\r\n                  blue: parsedPayload.intensities,\r\n                  lineLength: parsedPayload.intensities.length,\r\n                  isRawData: false\r\n                }\r\n              };\r\n              \r\n              setProcessedData(graphData);\r\n            }\r\n          } else if (parsedPayload.error) {\r\n            console.warn(`[SpectrometerMQTT] Received error from backend: ${parsedPayload.error}`);\r\n            // Don't clear data on error - just leave the previous data\r\n          } else {\r\n            console.warn('[SpectrometerMQTT] Received data message with unexpected payload:', parsedPayload);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('[SpectrometerMQTT] Error processing message:', error);\r\n    }\r\n  };\r\n  \r\n  // Handle crop data toggle\r\n  const handleCropDataToggle = (isEnabled) => {\r\n    setUsingCropData(isEnabled);\r\n  };\r\n  \r\n  // Save camera and calibration settings\r\n  const saveSettings = () => {\r\n    try {\r\n      // Get camera settings\r\n      const camSettings = cameraRef.current?.getSettings();\r\n      \r\n      // Get crop frame settings\r\n      const cropSettings = cameraRef.current?.getCropSettings();\r\n      \r\n      // Get calibration settings from graph component\r\n      const calSettings = graphRef.current?.getCalibrationSettings();\r\n      \r\n      if (!camSettings && !calSettings && !cropSettings) {\r\n        console.warn('No settings to save - components may not be mounted');\r\n        setSaveMessage('No settings to save');\r\n        setTimeout(() => setSaveMessage(''), 3000);\r\n        return;\r\n      }\r\n      \r\n      // Create a settings object to save\r\n      const settings = {\r\n        camera: camSettings || null,\r\n        calibration: calSettings || null,\r\n        cropFrame: cropSettings || null,\r\n        timestamp: new Date().toISOString(),\r\n        detectorId: detectorId || 'default',\r\n        // Save waterfall settings\r\n        waterfall: {\r\n          colorScheme: waterfallColorScheme\r\n        },\r\n        // Save frame accumulation settings\r\n        frameAccumulation: {\r\n          count: frameAccumCount,\r\n          isEnabled: isAccumulating\r\n        },\r\n        // Save peak markers settings if available from graph component\r\n        peakMarkers: graphRef.current?.getPeakSettings?.() || {\r\n          count: 3,\r\n          showMarkers: true\r\n        },\r\n        // Save component visibility states\r\n        visibilityState: {\r\n          camera: showCamera,\r\n          graph: showGraph,\r\n          waterfall: showWaterfall,\r\n          settings: showSettings\r\n        },\r\n        // Save crop data state\r\n        usingCropData: usingCropData\r\n      };\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem(`detector_settings_${detectorId || 'default'}`, JSON.stringify(settings));\r\n      \r\n      // Set save message for user feedback\r\n      setSaveMessage('Settings saved successfully');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to save settings:', error);\r\n      setSaveMessage('Error saving settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Export settings to JSON file\r\n  const exportSettings = () => {\r\n    try {\r\n      // Get camera settings\r\n      const camSettings = cameraRef.current?.getSettings();\r\n      \r\n      // Get crop frame settings\r\n      const cropSettings = cameraRef.current?.getCropSettings();\r\n      \r\n      // Get calibration settings from graph component\r\n      const calSettings = graphRef.current?.getCalibrationSettings();\r\n      \r\n      if (!camSettings && !calSettings && !cropSettings) {\r\n        console.warn('No settings to export - components may not be mounted');\r\n        setSaveMessage('No settings to export');\r\n        setTimeout(() => setSaveMessage(''), 3000);\r\n        return;\r\n      }\r\n      \r\n      // Create a settings object to export\r\n      const settings = {\r\n        camera: camSettings || null,\r\n        calibration: calSettings || null,\r\n        cropFrame: cropSettings || null,\r\n        timestamp: new Date().toISOString(),\r\n        detectorId: detectorId || 'default',\r\n        // Export waterfall settings\r\n        waterfall: {\r\n          colorScheme: waterfallColorScheme\r\n        },\r\n        // Export frame accumulation settings\r\n        frameAccumulation: {\r\n          count: frameAccumCount,\r\n          isEnabled: isAccumulating\r\n        },\r\n        // Export peak markers settings if available from graph component\r\n        peakMarkers: graphRef.current?.getPeakSettings?.() || {\r\n          count: 3,\r\n          showMarkers: true\r\n        },\r\n        // Export component visibility states\r\n        visibilityState: {\r\n          camera: showCamera,\r\n          graph: showGraph,\r\n          waterfall: showWaterfall,\r\n          settings: showSettings\r\n        },\r\n        // Export crop data state\r\n        usingCropData: usingCropData\r\n      };\r\n      \r\n      // Create a file name with timestamp\r\n      const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\\./g, '_');\r\n      const fileName = `detector_settings_${detectorId || 'default'}_${timestamp}.json`;\r\n      \r\n      // Create a Blob with the JSON data\r\n      const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\r\n      \r\n      // Create a URL for the Blob\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      // Create a temporary link element to trigger the download\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = fileName;\r\n      \r\n      // Append to the document, click, and remove\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // Clean up\r\n      setTimeout(() => {\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n      }, 100);\r\n      \r\n      // Set save message for user feedback\r\n      setSaveMessage('Settings exported to file');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to export settings:', error);\r\n      setSaveMessage('Error exporting settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Load saved camera and calibration settings\r\n  const loadSettings = () => {\r\n    try {\r\n      // Get settings from localStorage\r\n      const savedSettingsStr = localStorage.getItem(`detector_settings_${detectorId || 'default'}`);\r\n      if (!savedSettingsStr) {\r\n        setSaveMessage('No saved settings found');\r\n        setTimeout(() => setSaveMessage(''), 3000);\r\n        return;\r\n      }\r\n      \r\n      // Parse the settings\r\n      const savedSettings = JSON.parse(savedSettingsStr);\r\n      \r\n      // Apply camera settings if available\r\n      if (savedSettings.camera && cameraRef.current) {\r\n        try {\r\n          cameraRef.current.applySettings(savedSettings.camera);\r\n        } catch (err) {\r\n          console.error('Error applying camera settings:', err);\r\n        }\r\n      }\r\n      \r\n      // Apply crop frame settings if available\r\n      if (savedSettings.cropFrame && cameraRef.current?.applyCropSettings) {\r\n        try {\r\n          cameraRef.current.applyCropSettings(savedSettings.cropFrame);\r\n        } catch (err) {\r\n          console.error('Error applying crop frame settings:', err);\r\n        }\r\n      }\r\n      \r\n      // Apply calibration settings if available\r\n      if (savedSettings.calibration && graphRef.current) {\r\n        try {\r\n          graphRef.current.applyCalibrationSettings(savedSettings.calibration);\r\n        } catch (err) {\r\n          console.error('Error applying calibration settings:', err);\r\n        }\r\n      }\r\n      \r\n      // Apply waterfall settings if available\r\n      if (savedSettings.waterfall?.colorScheme) {\r\n        setWaterfallColorScheme(savedSettings.waterfall.colorScheme);\r\n      }\r\n      \r\n      // Apply frame accumulation settings if available\r\n      if (savedSettings.frameAccumulation) {\r\n        if (typeof savedSettings.frameAccumulation.count === 'number') {\r\n          setFrameAccumCount(savedSettings.frameAccumulation.count);\r\n        }\r\n        if (typeof savedSettings.frameAccumulation.isEnabled === 'boolean') {\r\n          setIsAccumulating(savedSettings.frameAccumulation.isEnabled);\r\n        }\r\n      }\r\n      \r\n      // Apply peak markers settings if available\r\n      if (savedSettings.peakMarkers && graphRef.current?.applyPeakSettings) {\r\n        try {\r\n          graphRef.current.applyPeakSettings(savedSettings.peakMarkers);\r\n        } catch (err) {\r\n          console.error('Error applying peak markers settings:', err);\r\n        }\r\n      }\r\n      \r\n      // Apply component visibility state if available\r\n      if (savedSettings.visibilityState) {\r\n        if (typeof savedSettings.visibilityState.camera === 'boolean') {\r\n          setShowCamera(savedSettings.visibilityState.camera);\r\n        }\r\n        if (typeof savedSettings.visibilityState.graph === 'boolean') {\r\n          setShowGraph(savedSettings.visibilityState.graph);\r\n        }\r\n        if (typeof savedSettings.visibilityState.waterfall === 'boolean') {\r\n          setShowWaterfall(savedSettings.visibilityState.waterfall);\r\n        }\r\n        if (typeof savedSettings.visibilityState.settings === 'boolean') {\r\n          setShowSettings(savedSettings.visibilityState.settings);\r\n        }\r\n      }\r\n      \r\n      // Apply crop data state if available\r\n      if (typeof savedSettings.usingCropData === 'boolean') {\r\n        setUsingCropData(savedSettings.usingCropData);\r\n      }\r\n      \r\n      // Make sure camera is started automatically\r\n      setTimeout(async () => {\r\n        if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\r\n          try {\r\n            await cameraRef.current.startCamera();\r\n            console.log('Camera started automatically after loading settings');\r\n          } catch (err) {\r\n            console.error('Failed to auto-start camera:', err);\r\n          }\r\n        }\r\n      }, 500); // Short delay to allow settings to be applied\r\n      \r\n      // Set save message for user feedback\r\n      setSaveMessage('Settings loaded successfully');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to load settings:', error);\r\n      setSaveMessage('Error loading settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Import settings from a JSON file\r\n  const importSettings = () => {\r\n    try {\r\n      // Create a file input element\r\n      const fileInput = document.createElement('input');\r\n      fileInput.type = 'file';\r\n      fileInput.accept = '.json';\r\n      \r\n      // Handle file selection\r\n      fileInput.onchange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (!file) return;\r\n        \r\n        const reader = new FileReader();\r\n        \r\n        reader.onload = (e) => {\r\n          try {\r\n            // Parse the file contents\r\n            const importedSettings = JSON.parse(e.target.result);\r\n            \r\n            // Apply camera settings if available\r\n            if (importedSettings.camera && cameraRef.current) {\r\n              try {\r\n                cameraRef.current.applySettings(importedSettings.camera);\r\n              } catch (err) {\r\n                console.error('Error applying imported camera settings:', err);\r\n              }\r\n            }\r\n            \r\n            // Apply crop frame settings if available\r\n            if (importedSettings.cropFrame && cameraRef.current?.applyCropSettings) {\r\n              try {\r\n                cameraRef.current.applyCropSettings(importedSettings.cropFrame);\r\n              } catch (err) {\r\n                console.error('Error applying imported crop frame settings:', err);\r\n              }\r\n            }\r\n            \r\n            // Apply calibration settings if available\r\n            if (importedSettings.calibration && graphRef.current) {\r\n              try {\r\n                graphRef.current.applyCalibrationSettings(importedSettings.calibration);\r\n              } catch (err) {\r\n                console.error('Error applying imported calibration settings:', err);\r\n              }\r\n            }\r\n            \r\n            // Apply waterfall settings if available\r\n            if (importedSettings.waterfall?.colorScheme) {\r\n              setWaterfallColorScheme(importedSettings.waterfall.colorScheme);\r\n            }\r\n            \r\n            // Apply frame accumulation settings if available\r\n            if (importedSettings.frameAccumulation) {\r\n              if (typeof importedSettings.frameAccumulation.count === 'number') {\r\n                setFrameAccumCount(importedSettings.frameAccumulation.count);\r\n              }\r\n              if (typeof importedSettings.frameAccumulation.isEnabled === 'boolean') {\r\n                setIsAccumulating(importedSettings.frameAccumulation.isEnabled);\r\n              }\r\n            }\r\n            \r\n            // Apply peak markers settings if available\r\n            if (importedSettings.peakMarkers && graphRef.current?.applyPeakSettings) {\r\n              try {\r\n                graphRef.current.applyPeakSettings(importedSettings.peakMarkers);\r\n              } catch (err) {\r\n                console.error('Error applying peak markers settings:', err);\r\n              }\r\n            }\r\n            \r\n            // Apply component visibility state if available\r\n            if (importedSettings.visibilityState) {\r\n              if (typeof importedSettings.visibilityState.camera === 'boolean') {\r\n                setShowCamera(importedSettings.visibilityState.camera);\r\n              }\r\n              if (typeof importedSettings.visibilityState.graph === 'boolean') {\r\n                setShowGraph(importedSettings.visibilityState.graph);\r\n              }\r\n              if (typeof importedSettings.visibilityState.waterfall === 'boolean') {\r\n                setShowWaterfall(importedSettings.visibilityState.waterfall);\r\n              }\r\n              if (typeof importedSettings.visibilityState.settings === 'boolean') {\r\n                setShowSettings(importedSettings.visibilityState.settings);\r\n              }\r\n            }\r\n            \r\n            // Apply crop data state if available\r\n            if (typeof importedSettings.usingCropData === 'boolean') {\r\n              setUsingCropData(importedSettings.usingCropData);\r\n            }\r\n            \r\n            // Make sure camera is started automatically\r\n            setTimeout(async () => {\r\n              if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\r\n                try {\r\n                  await cameraRef.current.startCamera();\r\n                  console.log('Camera started automatically after loading settings');\r\n                } catch (err) {\r\n                  console.error('Failed to auto-start camera:', err);\r\n                }\r\n              }\r\n            }, 500); // Short delay to allow settings to be applied\r\n            \r\n            // Set save message for user feedback\r\n            setSaveMessage('Settings imported successfully');\r\n            setTimeout(() => setSaveMessage(''), 3000);\r\n          } catch (parseError) {\r\n            console.error('Failed to parse imported settings file:', parseError);\r\n            setSaveMessage('Error: Invalid settings file');\r\n            setTimeout(() => setSaveMessage(''), 3000);\r\n          }\r\n        };\r\n        \r\n        reader.onerror = () => {\r\n          setSaveMessage('Error reading file');\r\n          setTimeout(() => setSaveMessage(''), 3000);\r\n        };\r\n        \r\n        // Read the file as text\r\n        reader.readAsText(file);\r\n      };\r\n      \r\n      // Trigger file selection dialog\r\n      fileInput.click();\r\n    } catch (error) {\r\n      console.error('Failed to import settings:', error);\r\n      setSaveMessage('Error importing settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Handler for panel resizing - completely rewritten for reliability\r\n  const handlePanelResizeStart = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    // Get initial coordinates and size\r\n    const startX = e.clientX;\r\n    const startY = e.clientY;\r\n    const startWidth = panelRef.current?.offsetWidth || panelSize.width;\r\n    const startHeight = panelRef.current?.offsetHeight || panelSize.height;\r\n    \r\n    // Show resize feedback\r\n    setIsResizingPanel(true);\r\n    setShowResizeInfo(true);\r\n    \r\n    // Define move handler\r\n    function handleMouseMove(moveEvent) {\r\n      const deltaX = moveEvent.clientX - startX;\r\n      const deltaY = moveEvent.clientY - startY;\r\n      \r\n      const newWidth = Math.max(400, startWidth + deltaX);\r\n      const newHeight = Math.max(300, startHeight + deltaY);\r\n      \r\n      // Update panel size\r\n      setPanelSize({\r\n        width: newWidth,\r\n        height: newHeight\r\n      });\r\n      \r\n      // Prevent default to avoid text selection during resize\r\n      moveEvent.preventDefault();\r\n    }\r\n    \r\n    // Define up handler\r\n    function handleMouseUp() {\r\n      // Clean up\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseup', handleMouseUp);\r\n      \r\n      setIsResizingPanel(false);\r\n      setTimeout(() => setShowResizeInfo(false), 800);\r\n    }\r\n    \r\n    // Attach handlers to document to capture events outside component\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n  };\r\n  \r\n  // Toggle visibility of subcomponents\r\n  const toggleCamera = () => setShowCamera(!showCamera);\r\n  const toggleGraph = () => setShowGraph(!showGraph);\r\n  const toggleWaterfall = () => setShowWaterfall(!showWaterfall);\r\n  const toggleSettings = () => setShowSettings(!showSettings);\r\n  \r\n  // Styles for toggle buttons\r\n  const getToggleButtonStyle = (isActive) => ({\r\n    ...buttonVariants.smallSecondary,\r\n    opacity: isActive ? 1 : 0.5,\r\n    marginRight: '4px',\r\n    marginBottom: '4px'\r\n  });\r\n  \r\n  // Handle subcomponent resize events\r\n  const handleCameraResize = (newSize) => {\r\n    console.log('Camera resized:', newSize);\r\n    // Additional logic if needed\r\n  };\r\n  \r\n  const handleGraphResize = (newSize) => {\r\n    console.log('Graph resized:', newSize);\r\n    // Additional logic if needed\r\n  };\r\n  \r\n  const handleWaterfallResize = (newSize) => {\r\n    console.log('Waterfall resized:', newSize);\r\n    // Additional logic if needed\r\n  };\r\n  \r\n  // Handle settings changes\r\n  const handleSettingsChange = (settings) => {\r\n    console.log('Settings changed:', settings);\r\n    // Update relevant state/behavior based on settings\r\n  };\r\n  \r\n  // Render panel content\r\n  if (!detector) return null;\r\n  \r\n  return (\r\n    <DraggablePanel \r\n      title={`MQTT Spectrometer: ${detector.label || detector.id}`}\r\n      initialPosition={initialPosition}\r\n      width={panelSize.width}\r\n      height={panelSize.height}\r\n      onClose={onClose}\r\n    >\r\n      <div \r\n        ref={panelRef}\r\n        style={{\r\n          ...styles.container,\r\n          width: `${panelSize.width}px`,\r\n          height: `${panelSize.height}px`,\r\n          minHeight: '300px',\r\n          position: 'relative',\r\n          border: isResizingPanel ? '1px dashed #4CAF50' : 'none',\r\n          transition: isResizingPanel ? 'none' : 'border 0.3s ease',\r\n        }}\r\n      >\r\n        {/* Top control bar */}\r\n        <div style={styles.controlBar}>\r\n          <div>\r\n            <span style={styles.controlLabel}>Components:</span>\r\n            \r\n            <button \r\n              onClick={toggleCamera} \r\n              style={getToggleButtonStyle(showCamera)}\r\n            >\r\n              {showCamera ? '📹 Hide Camera' : '📹 Show Camera'}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={toggleGraph} \r\n              style={getToggleButtonStyle(showGraph)}\r\n            >\r\n              {showGraph ? '📊 Hide Graph' : '📊 Show Graph'}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={toggleWaterfall} \r\n              style={getToggleButtonStyle(showWaterfall)}\r\n            >\r\n              {showWaterfall ? '🌊 Hide Waterfall' : '🌊 Show Waterfall'}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={toggleSettings} \r\n              style={getToggleButtonStyle(showSettings)}\r\n            >\r\n              {showSettings ? '⚙️ Hide Settings' : '⚙️ Show Settings'}\r\n            </button>\r\n            \r\n            <span style={{ marginLeft: '15px', borderLeft: '1px solid rgba(255, 255, 255, 0.2)', paddingLeft: '10px' }}>\r\n              <button \r\n                onClick={saveSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(50, 150, 50, 0.7)'\r\n                }}\r\n                title=\"Save camera and calibration settings to browser storage\"\r\n              >\r\n                💾 Save Settings\r\n              </button>\r\n              \r\n              <button \r\n                onClick={exportSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(120, 120, 30, 0.7)'\r\n                }}\r\n                title=\"Export camera and calibration settings to JSON file\"\r\n              >\r\n                📤 Export Settings\r\n              </button>\r\n              \r\n              <button \r\n                onClick={loadSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(50, 100, 150, 0.7)'\r\n                }}\r\n                title=\"Load saved camera and calibration settings from browser storage\"\r\n              >\r\n                📥 Load Settings\r\n              </button>\r\n              \r\n              <button \r\n                onClick={importSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(120, 70, 150, 0.7)'\r\n                }}\r\n                title=\"Import camera and calibration settings from JSON file\"\r\n              >\r\n                📁 Import File\r\n              </button>\r\n              \r\n              {saveMessage && (\r\n                <span style={{\r\n                  fontSize: '12px',\r\n                  backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n                  padding: '2px 6px',\r\n                  borderRadius: '3px',\r\n                  marginLeft: '8px'\r\n                }}>\r\n                  {saveMessage}\r\n                </span>\r\n              )}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Two-column layout container */}\r\n        <div style={styles.columnsContainer}>\r\n          {/* Left column - Camera component */}\r\n          <div style={{ \r\n            display: showCamera ? 'block' : 'none',\r\n            flex: '1 1 50%',\r\n            minWidth: '320px',\r\n            maxWidth: '650px',\r\n            marginRight: '10px'\r\n          }}>\r\n            <MQTTCameraComponent\r\n              ref={cameraRef}\r\n              onResize={handleCameraResize}\r\n              detectorId={detectorId}\r\n            />\r\n          </div>\r\n          \r\n          {/* Right column with multiple components */}\r\n          <div style={{\r\n            ...styles.rightColumn,\r\n            flex: '1 1 50%'\r\n          }}>\r\n            {/* Graph component */}\r\n            {showGraph && (\r\n              <MQTTGraphComponent \r\n                ref={graphRef}\r\n                onResize={handleGraphResize}\r\n                lineData={processedData}  // Use processedData instead of spectrumData\r\n                // Pass the frame accumulation props up to parent to manage\r\n                onFrameAccumCountChange={handleFrameAccumCountChange}\r\n                onAccumulationToggle={handleAccumulationToggle}\r\n              />\r\n            )}\r\n            \r\n            {/* Waterfall component */}\r\n            {showWaterfall && (\r\n              <MQTTWaterfallComponent \r\n                onResize={handleWaterfallResize}\r\n                lineData={processedData}  // Use processedData instead of spectrumData\r\n                frameAccumCount={frameAccumCount}\r\n                isAccumulating={isAccumulating}\r\n                colorScale={waterfallColorScheme}\r\n                onColorScaleChange={handleWaterfallColorSchemeChange}\r\n              />\r\n            )}\r\n            \r\n            {/* Settings component */}\r\n            {showSettings && (\r\n              <MQTTSettingsComponent \r\n                onSettingChange={(setting, value) => console.log('Setting changed:', setting, value)}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Show resize info when active */}\r\n        {showResizeInfo && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            right: '30px',\r\n            bottom: '30px',\r\n            padding: '4px 8px',\r\n            background: 'rgba(0, 0, 0, 0.6)',\r\n            color: 'white',\r\n            borderRadius: '3px',\r\n            fontSize: '12px',\r\n            zIndex: 1000\r\n          }}>\r\n            {Math.round(panelSize.width)} x {Math.round(panelSize.height)}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Panel resize handle - make sure this comes last */}\r\n        <div \r\n          style={styles.resizeHandle}\r\n          onMouseDown={handlePanelResizeStart}\r\n          title=\"Drag to resize panel\"\r\n        >\r\n          <svg \r\n            width=\"20\" \r\n            height=\"20\" \r\n            viewBox=\"0 0 20 20\" \r\n            style={{ display: 'block' }}\r\n          >\r\n            <rect width=\"20\" height=\"20\" fill=\"transparent\" />\r\n            <path \r\n              d=\"M14,6 L6,14 M17,9 L9,17 M17,13 L13,17\" \r\n              stroke=\"white\" \r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    </DraggablePanel>\r\n  );\r\n};\r\n\r\nexport default SpectrometerMQTT; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}