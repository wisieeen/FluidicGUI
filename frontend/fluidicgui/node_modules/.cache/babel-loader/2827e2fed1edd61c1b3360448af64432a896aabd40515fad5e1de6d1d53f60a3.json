{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\SpectrometerMQTT\\\\MQTTGraphComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\nimport spectralConfig from './spectral_config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = /*#__PURE__*/_s(/*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    onResize,\n    lineData,\n    onFrameAccumCountChange,\n    onAccumulationToggle\n  } = props;\n  const buttonVariants = useButtonStyles();\n  const [graphSize, setGraphSize] = useState({\n    width: '100%',\n    height: 200\n  });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [displayChannels, setDisplayChannels] = useState({\n    red: false,\n    green: false,\n    blue: false,\n    intensity: true\n  });\n  const [graphData, setGraphData] = useState(null);\n\n  // Memory for storing graph data\n  const [memorizedData, setMemorizedData] = useState([]);\n\n  // Cursor tracking state\n  const [cursorPosition, setCursorPosition] = useState(null);\n  const [showCrosshair, setShowCrosshair] = useState(false);\n\n  // Frame accumulation state - internally managed but synced with parent\n  const [frameAccumCount, setFrameAccumCount] = useState(10); // Default to 10 frames\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\n  const [accumulatedData, setAccumulatedData] = useState(null);\n  const [isAccumulating, setIsAccumulating] = useState(false);\n\n  // Export file name prefix\n  const [filePrefix, setFilePrefix] = useState('spectrum');\n  const [includeDateInFilename, setIncludeDateInFilename] = useState(true);\n\n  // Status message for operations\n  const [saveMessage, setSaveMessage] = useState('');\n\n  // Peak detection state\n  const [showPeakMarkers, setShowPeakMarkers] = useState(true);\n  const [peakCount, setPeakCount] = useState(3); // Default to showing top 3 peaks\n\n  // Calibration state\n  const [showCalibration, setShowCalibration] = useState(false);\n  const [calibrationPoints, setCalibrationPoints] = useState([{\n    position: 0.25000,\n    wavelength: 450.0\n  }, {\n    position: 0.75000,\n    wavelength: 650.0\n  }]);\n  const [useCalibration, setUseCalibration] = useState(false);\n  const [flipXAxis, setFlipXAxis] = useState(false);\n  const graphContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    getCalibrationSettings: () => ({\n      calibrationPoints: [...calibrationPoints],\n      useCalibration,\n      flipXAxis\n    }),\n    applyCalibrationSettings: settings => {\n      if (!settings) return false;\n      try {\n        if (settings.calibrationPoints && Array.isArray(settings.calibrationPoints)) {\n          setCalibrationPoints(settings.calibrationPoints);\n        }\n        if (typeof settings.useCalibration === 'boolean') {\n          setUseCalibration(settings.useCalibration);\n          if (settings.useCalibration) {\n            setShowCalibration(true);\n          }\n        }\n        if (typeof settings.flipXAxis === 'boolean') {\n          setFlipXAxis(settings.flipXAxis);\n        }\n        return true;\n      } catch (error) {\n        console.error('Error applying calibration settings:', error);\n        return false;\n      }\n    },\n    getPeakSettings: () => ({\n      count: peakCount,\n      showMarkers: showPeakMarkers\n    }),\n    applyPeakSettings: settings => {\n      if (!settings) return false;\n      try {\n        if (typeof settings.count === 'number') {\n          setPeakCount(settings.count);\n        }\n        if (typeof settings.showMarkers === 'boolean') {\n          setShowPeakMarkers(settings.showMarkers);\n        }\n        return true;\n      } catch (error) {\n        console.error('Error applying peak settings:', error);\n        return false;\n      }\n    }\n  }));\n\n  // Update graph when line data changes\n  useEffect(() => {\n    if (lineData !== null && lineData !== void 0 && lineData.pixelData) {\n      // Process the incoming line data to ensure it has all necessary properties\n      const processedData = {\n        ...lineData.pixelData\n      };\n\n      // If we have wavelengths but no intensity, calculate intensity\n      if (processedData.wavelengths && processedData.red && processedData.green && processedData.blue && !processedData.intensity) {\n        const calculatedIntensity = [];\n        for (let i = 0; i < processedData.red.length; i++) {\n          const wavelength = processedData.wavelengths[i];\n          calculatedIntensity[i] = calculateIntensity(processedData.red[i], processedData.green[i], processedData.blue[i], wavelength);\n        }\n        processedData.intensity = calculatedIntensity;\n      } else if (!processedData.intensity && processedData.red && processedData.green && processedData.blue) {\n        // If no intensity data and no wavelengths, calculate average of RGB\n        const calculatedIntensity = processedData.red.map((r, i) => (r + processedData.green[i] + processedData.blue[i]) / 3);\n        processedData.intensity = calculatedIntensity;\n      }\n\n      // Always keep the latest raw frame data for display when not accumulating\n      setGraphData(processedData);\n      if (isAccumulating) {\n        // Add new frame to accumulation buffer\n        setAccumulatedFrames(prev => {\n          const newFrames = [...prev, processedData];\n\n          // If we've reached our target frame count, process the accumulated data\n          if (newFrames.length >= frameAccumCount) {\n            // Sum the color data across all frames\n            const summedData = sumFrameData(newFrames);\n\n            // Update accumulated data state\n            setAccumulatedData(summedData);\n\n            // Draw the accumulated data\n            drawGraph(summedData);\n\n            // Reset the accumulation buffer\n            return [];\n          }\n          return newFrames;\n        });\n      } else {\n        // If not accumulating, just display the raw frame\n        drawGraph(processedData);\n      }\n    }\n  }, [lineData, isAccumulating, frameAccumCount, useCalibration, calibrationPoints, flipXAxis]);\n\n  // When accumulated data changes, draw it\n  useEffect(() => {\n    if (accumulatedData && isAccumulating) {\n      drawGraph(accumulatedData);\n    }\n  }, [accumulatedData, useCalibration, calibrationPoints, flipXAxis]);\n\n  // Function to add current data to memory\n  const addToMemory = () => {\n    const dataToMemorize = isAccumulating ? accumulatedData : graphData;\n    if (!dataToMemorize) {\n      setSaveMessage('No data to memorize');\n      setTimeout(() => setSaveMessage(''), 3000);\n      return;\n    }\n\n    // Create a copy of the data with a timestamp\n    const memorizedItem = {\n      ...dataToMemorize,\n      memoryTimestamp: new Date().toISOString()\n    };\n\n    // Add to memory array\n    setMemorizedData(prev => [...prev, memorizedItem]);\n    setSaveMessage(`Data added to memory (${memorizedData.length + 1} items)`);\n    setTimeout(() => setSaveMessage(''), 3000);\n  };\n\n  // Function to clear memory\n  const clearMemory = () => {\n    setMemorizedData([]);\n    setSaveMessage('Memory cleared');\n    setTimeout(() => setSaveMessage(''), 3000);\n  };\n\n  // Find the nearest sensitivity factor for a given wavelength\n  const findNearestSensitivityFactor = wavelength => {\n    const sensitivities = spectralConfig.SENSITIVITY_FACTORS;\n    console.log('[MQTTGraphComponent] Wavelength:', wavelength);\n    console.log('[MQTTGraphComponent] Sensitivity factors:', sensitivities);\n    const wavelengths = Object.keys(sensitivities).map(Number);\n\n    // Find the closest wavelength in the sensitivity factors\n    let closestWavelength = wavelengths[0];\n    let minDistance = Math.abs(wavelength - closestWavelength);\n    for (const wl of wavelengths) {\n      const distance = Math.abs(wavelength - wl);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestWavelength = wl;\n      }\n    }\n    return sensitivities[closestWavelength.toString()];\n  };\n\n  // Check if wavelength is in range for a specific channel\n  const isInChannelRange = (wavelength, channel) => {\n    const ranges = spectralConfig.CHANNEL_RANGES;\n    if (!ranges[channel]) return false;\n    const [min, max] = ranges[channel];\n    return wavelength >= min && wavelength <= max;\n  };\n\n  // Calculate intensity based on RGB values and sensitivity factors\n  const calculateIntensity = (red, green, blue, wavelength) => {\n    // Get sensitivity factor for this wavelength\n    const sensitivityFactor = findNearestSensitivityFactor(wavelength);\n\n    // Determine which channels to use based on wavelength\n    let intensity = 0;\n    if (isInChannelRange(wavelength, 'r') && red !== undefined) {\n      intensity += red;\n    } else if (isInChannelRange(wavelength, 'g') && green !== undefined) {\n      intensity += green;\n    } else if (isInChannelRange(wavelength, 'b') && blue !== undefined) {\n      intensity += blue;\n    }\n\n    // If no channels in range, use average of all channels\n    if (red !== undefined && green !== undefined && blue !== undefined) {\n      intensity = (red + green + blue) / 3;\n    } else {\n      console.log('[MQTTGraphComponent] No channels in range');\n    }\n\n    // Apply sensitivity correction\n    if (sensitivityFactor > 0) {\n      intensity = intensity / sensitivityFactor;\n      console.log('[MQTTGraphComponent] Intensity after sensitivity correction:', intensity);\n      console.log('[MQTTGraphComponent] Sensitivity factor:', sensitivityFactor);\n    }\n    return intensity;\n  };\n\n  // Sum pixel data across multiple frames\n  const sumFrameData = frames => {\n    if (!frames.length) return null;\n\n    // Use the first frame as a template for structure\n    const template = frames[0];\n\n    // Initialize arrays for summed values\n    const summedRed = Array(template.red.length).fill(0);\n    const summedGreen = Array(template.green.length).fill(0);\n    const summedBlue = Array(template.blue.length).fill(0);\n    const summedIntensity = Array(template.intensity ? template.intensity.length : template.red.length).fill(0);\n\n    // Sum values across all frames\n    frames.forEach(frame => {\n      frame.red.forEach((val, i) => summedRed[i] += val);\n      frame.green.forEach((val, i) => summedGreen[i] += val);\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\n\n      // If frame has intensity data, use it, otherwise it will be calculated later\n      if (frame.intensity) {\n        frame.intensity.forEach((val, i) => summedIntensity[i] += val);\n      }\n    });\n\n    // If we have calibrated wavelengths, calculate intensity using sensitivity factors\n    if (template.wavelengths) {\n      for (let i = 0; i < summedRed.length; i++) {\n        const wavelength = template.wavelengths[i];\n        summedIntensity[i] = calculateIntensity(summedRed[i], summedGreen[i], summedBlue[i], wavelength);\n      }\n    }\n\n    // Return the summed data structure\n    return {\n      timestamp: Date.now(),\n      positions: template.positions,\n      // Positions remain the same\n      wavelengths: template.wavelengths,\n      // Pass through wavelengths if available\n      red: summedRed,\n      green: summedGreen,\n      blue: summedBlue,\n      intensity: summedIntensity,\n      lineLength: template.lineLength || summedRed.length,\n      frameCount: frames.length,\n      // Add count of frames that were summed\n\n      // Preserve raw data metadata if present in template\n      isRawData: template.isRawData || false,\n      bitDepth: template.bitDepth || null,\n      dataType: template.dataType || null\n    };\n  };\n\n  // Convert position to wavelength using calibration points\n  const positionToWavelength = position => {\n    if (!useCalibration || calibrationPoints.length < 2) {\n      return position;\n    }\n\n    // Sort calibration points by position\n    const sortedPoints = [...calibrationPoints].sort((a, b) => a.position - b.position);\n\n    // Find the two calibration points that surround the given position\n    let p1, p2;\n    for (let i = 0; i < sortedPoints.length - 1; i++) {\n      if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\n        p1 = sortedPoints[i];\n        p2 = sortedPoints[i + 1];\n        break;\n      }\n    }\n\n    // If position is outside the calibration range, use extrapolation\n    if (!p1 || !p2) {\n      if (position < sortedPoints[0].position) {\n        // Extrapolate below the first point\n        // Use the first two points for the slope calculation\n        p1 = sortedPoints[0];\n        p2 = sortedPoints[1];\n        // Calculate the slope between first two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p1.wavelength + slope * (position - p1.position);\n      } else {\n        // Extrapolate above the last point\n        // Use the last two points for the slope calculation\n        p1 = sortedPoints[sortedPoints.length - 2];\n        p2 = sortedPoints[sortedPoints.length - 1];\n        // Calculate the slope between last two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p2.wavelength + slope * (position - p2.position);\n      }\n    }\n\n    // Linear interpolation between the two calibration points\n    const t = (position - p1.position) / (p2.position - p1.position);\n    return p1.wavelength + t * (p2.wavelength - p1.wavelength);\n  };\n\n  // Handle changing the frame accumulation count\n  const handleFrameCountChange = e => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count > 0) {\n      setFrameAccumCount(count);\n      // Reset accumulation when count changes\n      setAccumulatedFrames([]);\n      setAccumulatedData(null);\n\n      // Notify parent of change\n      if (onFrameAccumCountChange) {\n        onFrameAccumCountChange(count);\n      }\n    }\n  };\n\n  // Toggle accumulation mode\n  const toggleAccumulation = () => {\n    const newValue = !isAccumulating;\n    setIsAccumulating(newValue);\n    // Reset accumulated data when toggling\n    setAccumulatedFrames([]);\n    setAccumulatedData(null);\n\n    // Notify parent of change\n    if (onAccumulationToggle) {\n      onAccumulationToggle(newValue);\n    }\n  };\n\n  // Toggle calibration controls\n  const toggleCalibration = () => {\n    setShowCalibration(!showCalibration);\n  };\n\n  // Toggle using calibration\n  const toggleUseCalibration = () => {\n    setUseCalibration(!useCalibration);\n  };\n\n  // Toggle flip X axis\n  const toggleFlipXAxis = () => {\n    setFlipXAxis(!flipXAxis);\n  };\n\n  // Update calibration point\n  const updateCalibrationPoint = (index, field, value) => {\n    const numValue = parseFloat(value);\n    if (isNaN(numValue)) return;\n\n    // Format position values to 3 decimal places\n    const formattedValue = field === 'position' ? parseFloat(numValue.toFixed(3)) : numValue;\n    setCalibrationPoints(points => {\n      const newPoints = [...points];\n      newPoints[index] = {\n        ...newPoints[index],\n        [field]: formattedValue\n      };\n      return newPoints;\n    });\n  };\n\n  // Initialize and resize the canvas when graph size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const container = graphContainerRef.current;\n      if (container) {\n        // Set canvas size to match container\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n\n        // Redraw graph with new size\n        if (isAccumulating && accumulatedData) {\n          drawGraph(accumulatedData);\n        } else if (graphData) {\n          drawGraph(graphData);\n        }\n      }\n    }\n  }, [graphSize, graphData, accumulatedData, isAccumulating, useCalibration, calibrationPoints, flipXAxis]);\n\n  // Find peaks in data array\n  const findPeaks = (values, positions, count = 3) => {\n    if (!values || values.length < 3) return [];\n\n    // Find local maxima (points higher than both neighbors)\n    const peaks = [];\n    for (let i = 1; i < values.length - 1; i++) {\n      if (values[i] > values[i - 1] && values[i] > values[i + 1]) {\n        // This is a local maximum\n        const peak = {\n          index: i,\n          position: positions[i],\n          value: values[i]\n        };\n\n        // Refine position using quadratic interpolation for better accuracy\n        try {\n          // Based on three points around the peak\n          const x1 = positions[i - 1];\n          const x2 = positions[i];\n          const x3 = positions[i + 1];\n          const y1 = values[i - 1];\n          const y2 = values[i];\n          const y3 = values[i + 1];\n\n          // Only apply refinement if we have valid neighboring points\n          const denom = (x1 - x2) * (x1 - x3) * (x2 - x3);\n          if (denom !== 0) {\n            // Quadratic interpolation formula\n            const A = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom;\n            const B = (x3 * x3 * (y1 - y2) + x2 * x2 * (y3 - y1) + x1 * x1 * (y2 - y3)) / denom;\n\n            // Calculate refined x position at the peak of the parabola\n            if (A !== 0) {\n              const refinedPos = -B / (2 * A);\n\n              // Only use refined position if it's within a reasonable range\n              if (refinedPos >= x1 && refinedPos <= x3) {\n                peak.refinedPosition = refinedPos;\n              }\n            }\n          }\n        } catch (e) {\n          console.warn('Error during peak refinement', e);\n          // If refinement fails, use the original position\n        }\n        peaks.push(peak);\n      }\n    }\n\n    // Sort peaks by value (descending)\n    peaks.sort((a, b) => b.value - a.value);\n\n    // Filter peaks to ensure they're at least 10nm apart (or equivalent in position space)\n    const filteredPeaks = [];\n\n    // Default position-based distance (approximately 5% of the position range)\n    const minPositionDistance = 0.05;\n    for (const peak of peaks) {\n      // Check if this peak is too close to any already-selected stronger peak\n      let tooClose = false;\n      for (const selectedPeak of filteredPeaks) {\n        // Use position-based distance (wavelength conversion will happen in the drawing code)\n        const distance = Math.abs(peak.position - selectedPeak.position);\n        if (distance < minPositionDistance) {\n          tooClose = true;\n          break;\n        }\n      }\n\n      // Add the peak if it's not too close to any stronger peak\n      if (!tooClose) {\n        filteredPeaks.push(peak);\n\n        // Stop if we have enough peaks\n        if (filteredPeaks.length >= count) {\n          break;\n        }\n      }\n    }\n    return filteredPeaks;\n  };\n\n  // Draw the graph based on pixel data\n  const drawGraph = data => {\n    if (!canvasRef.current || !data) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Draw background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n\n    // Horizontal grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const y = height * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n    }\n\n    // Vertical grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const x = width * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n    }\n\n    // Calculate min and max wavelength values for calibration upfront\n    let minWavelength, maxWavelength;\n    if (data.wavelengths) {\n      // If data already has wavelengths, use those\n      minWavelength = Math.min(...data.wavelengths);\n      maxWavelength = Math.max(...data.wavelengths);\n    } else if (useCalibration && calibrationPoints.length >= 2) {\n      // Otherwise use calibration points\n      const wavelengths = calibrationPoints.map(p => p.wavelength);\n      minWavelength = Math.min(...wavelengths);\n      maxWavelength = Math.max(...wavelengths);\n    }\n\n    // Set line styles for different channels\n    const styles = {\n      red: {\n        color: 'rgba(255, 0, 0, 0.8)',\n        width: 1.5\n      },\n      green: {\n        color: 'rgba(0, 255, 0, 0.8)',\n        width: 1.5\n      },\n      blue: {\n        color: 'rgba(0, 0, 255, 0.8)',\n        width: 1.5\n      },\n      intensity: {\n        color: 'rgba(255, 255, 255, 0.8)',\n        width: 2\n      }\n    };\n\n    // Ensure intensity data exists - if not, calculate it from RGB\n    if (!data.intensity && data.red && data.green && data.blue) {\n      if (data.wavelengths) {\n        // If we have wavelengths, calculate based on sensitivity factors\n        data.intensity = data.red.map((r, i) => calculateIntensity(r, data.green[i], data.blue[i], data.wavelengths[i]));\n      } else {\n        // If no wavelengths, use simple RGB average\n        data.intensity = data.red.map((r, i) => (r + data.green[i] + data.blue[i]) / 3);\n      }\n    }\n\n    // Find max values for scaling\n    const maxRed = Math.max(...data.red, 1);\n    const maxGreen = Math.max(...data.green, 1);\n    const maxBlue = Math.max(...data.blue, 1);\n    const maxIntensity = Math.max(...data.intensity, 1);\n\n    // Store the peak data for each displayed channel\n    const channelPeaks = {};\n\n    // Plot each enabled channel\n    Object.entries(displayChannels).forEach(([channel, isEnabled]) => {\n      if (!isEnabled || !data[channel]) return;\n      const values = data[channel];\n      const maxValue = channel === 'red' ? maxRed : channel === 'green' ? maxGreen : channel === 'blue' ? maxBlue : maxIntensity;\n\n      // Set line style\n      ctx.strokeStyle = styles[channel].color;\n      ctx.lineWidth = styles[channel].width;\n\n      // Begin the path\n      ctx.beginPath();\n\n      // Draw the line\n      for (let i = 0; i < values.length; i++) {\n        // Calculate x position, applying flip if enabled\n        let xPos;\n        if (data.wavelengths && useCalibration) {\n          // If we have real wavelengths and calibration is enabled, normalize to 0-1 range\n          const normalizedPos = (data.wavelengths[i] - minWavelength) / (maxWavelength - minWavelength);\n          xPos = flipXAxis ? 1 - normalizedPos : normalizedPos;\n        } else {\n          // Otherwise use the provided position array\n          xPos = data.positions[i];\n          if (flipXAxis) {\n            xPos = 1 - xPos; // Invert position (0 becomes 1, 1 becomes 0)\n          }\n        }\n\n        // Convert to pixel coordinates\n        const x = xPos * width;\n\n        // Invert Y since canvas 0,0 is top-left\n        const y = height - values[i] / maxValue * height;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n\n      // Draw the path\n      ctx.stroke();\n    });\n\n    // Detect peaks for intensity channel only if enabled\n    if (showPeakMarkers && displayChannels.intensity) {\n      const intensityValues = data.intensity;\n      // Use original positions for peak detection\n      const peaks = findPeaks(intensityValues, data.positions, peakCount);\n\n      // If calibration is enabled, perform additional wavelength-based filtering\n      if (useCalibration) {\n        // Convert positions to wavelengths and filter to ensure 10nm minimum distance\n        const wavelengthPeaks = [];\n\n        // Process peaks in order of intensity (already sorted by findPeaks)\n        for (const peak of peaks) {\n          const peakWavelength = positionToWavelength(peak.position);\n          let tooClose = false;\n\n          // Check if this peak is too close to any already selected peak\n          for (const selectedPeak of wavelengthPeaks) {\n            const selectedWavelength = positionToWavelength(selectedPeak.position);\n            const distance = Math.abs(peakWavelength - selectedWavelength);\n            if (distance < 10) {\n              // 10nm minimum distance\n              tooClose = true;\n              break;\n            }\n          }\n\n          // Add the peak if it's not too close to any already selected peak\n          if (!tooClose) {\n            wavelengthPeaks.push(peak);\n          }\n        }\n        channelPeaks['intensity'] = wavelengthPeaks;\n      } else {\n        channelPeaks['intensity'] = peaks;\n      }\n    }\n\n    // Draw timestamp and status information\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.font = '10px monospace';\n    ctx.textAlign = 'left';\n\n    // Show time and accumulation status\n    const timeText = `Time: ${new Date(data.timestamp).toLocaleTimeString()}`;\n    const statusText = isAccumulating ? `Accumulating: ${accumulatedFrames.length}/${frameAccumCount} frames` : 'Live data';\n    ctx.fillText(timeText, 5, 15);\n    ctx.fillText(statusText, width - 150, 15);\n\n    // Draw calibration status if enabled\n    if (useCalibration) {\n      ctx.fillText('Calibrated', width - 150, 45);\n    }\n\n    // Draw frame count if this is accumulated data\n    if (data.frameCount) {\n      ctx.fillText(`Summed ${data.frameCount} frames`, width - 150, 30);\n    }\n\n    // Draw raw data and bit depth information if available\n    if (data.isRawData) {\n      const bitDepth = data.bitDepth || 12;\n      const dataType = data.dataType || 'raw';\n      ctx.fillStyle = 'rgba(255, 200, 100, 0.9)';\n      ctx.fillText(`RAW ${bitDepth}-bit | ${dataType}`, 5, 60);\n    }\n\n    // Draw channel legend\n    const legendStartY = 30;\n    const legendSpacing = 15;\n    if (displayChannels.red) {\n      ctx.fillStyle = styles.red.color;\n      // For raw data, show max value as well\n      if (data.isRawData) {\n        ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)} (max: ${Math.round(maxRed)})`, 5, legendStartY);\n      } else {\n        ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)}`, 5, legendStartY);\n      }\n    }\n    if (displayChannels.green) {\n      ctx.fillStyle = styles.green.color;\n      // For raw data, show max value as well\n      if (data.isRawData) {\n        ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)} (max: ${Math.round(maxGreen)})`, 5, legendStartY + legendSpacing);\n      } else {\n        ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)}`, 5, legendStartY + legendSpacing);\n      }\n    }\n    if (displayChannels.blue) {\n      ctx.fillStyle = styles.blue.color;\n      // For raw data, show max value as well\n      if (data.isRawData) {\n        ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)} (max: ${Math.round(maxBlue)})`, 5, legendStartY + legendSpacing * 2);\n      } else {\n        ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)}`, 5, legendStartY + legendSpacing * 2);\n      }\n    }\n    if (displayChannels.intensity) {\n      ctx.fillStyle = styles.intensity.color;\n      // For raw data, show max value as well\n      if (data.isRawData) {\n        ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)} (max: ${Math.round(maxIntensity)})`, 5, legendStartY + legendSpacing * 3);\n      } else {\n        ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)}`, 5, legendStartY + legendSpacing * 3);\n      }\n    }\n\n    // Draw wavelength axis labels if calibration is enabled (unified section)\n    if (useCalibration && minWavelength !== undefined && maxWavelength !== undefined || data.wavelengths) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.font = '10px monospace';\n      ctx.textAlign = 'center';\n\n      // Clear the bottom area where labels will go\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'; // Match background color\n      ctx.fillRect(0, height - 20, width, 20);\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'; // Reset text color\n\n      // Draw axis labels at regular position intervals (0%, 25%, 50%, 75%, 100%)\n      // but show the corresponding wavelength values\n      for (let i = 0; i <= 4; i++) {\n        const position = i / 4; // Regular positions (0, 0.25, 0.5, 0.75, 1)\n\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - position : position;\n        const x = displayPosition * width;\n\n        // Convert position to wavelength using calibration or data.wavelengths\n        let wavelength;\n        if (data.wavelengths) {\n          // If data has wavelengths, interpolate between available values\n          const dataIdx = Math.round(position * (data.wavelengths.length - 1));\n          wavelength = data.wavelengths[dataIdx];\n        } else {\n          // Otherwise use calibration function\n          wavelength = positionToWavelength(position);\n        }\n        ctx.fillText(`${Math.round(wavelength)}nm`, x, height - 5);\n      }\n    }\n\n    // Draw calibration points if enabled\n    if (useCalibration) {\n      calibrationPoints.forEach(point => {\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - point.position : point.position;\n        // Draw vertical line at calibration point position\n        const x = displayPosition * width;\n        ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n\n        // Draw wavelength label at the calibration point\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\n        ctx.font = '10px monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${point.wavelength}nm`, x, height - 20); // Higher position to avoid overlap\n      });\n    }\n\n    // Draw peak markers if enabled\n    if (showPeakMarkers) {\n      // Draw peaks for each enabled channel\n      Object.entries(channelPeaks).forEach(([channel, peaks]) => {\n        // Use the same color as the channel with increased opacity\n        const baseColor = styles[channel].color;\n        const markerColor = baseColor.replace('rgba', 'rgb').replace(/,\\s*[\\d.]+\\)/, ')');\n\n        // Get max value for this channel for y-coordinate calculation\n        const maxValue = channel === 'red' ? maxRed : channel === 'green' ? maxGreen : channel === 'blue' ? maxBlue : maxIntensity;\n        peaks.forEach(peak => {\n          // Get the original position\n          let xPos = peak.position;\n\n          // Use refined position if available (within reasonable bounds)\n          if (peak.refinedPosition !== undefined) {\n            xPos = peak.refinedPosition;\n          }\n\n          // Apply flip if enabled\n          if (flipXAxis) {\n            xPos = 1 - xPos;\n          }\n\n          // Convert to pixel coordinates\n          const x = xPos * width;\n          const y = height - peak.value / maxValue * height;\n\n          // Check if peak is near the top of the graph (below a minimum distance from top)\n          const isNearTop = y < 60; // 60px from top\n\n          // Draw a vertical line first (always visible)\n          ctx.strokeStyle = markerColor;\n          ctx.setLineDash([2, 2]);\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, height);\n          ctx.stroke();\n          ctx.setLineDash([]);\n\n          // Draw marker at peak position (triangle pointing down or up based on position)\n          ctx.fillStyle = markerColor;\n          ctx.beginPath();\n          if (isNearTop) {\n            // If near top, draw triangle pointing up from a position slightly below the peak\n            const markerY = y + 15;\n            ctx.moveTo(x, markerY);\n            ctx.lineTo(x - 5, markerY + 10);\n            ctx.lineTo(x + 5, markerY + 10);\n          } else {\n            // Normal case - draw triangle pointing down\n            ctx.moveTo(x, y);\n            ctx.lineTo(x - 5, y - 10);\n            ctx.lineTo(x + 5, y - 10);\n          }\n          ctx.closePath();\n          ctx.fill();\n\n          // Prepare label text\n          let label;\n          if (useCalibration) {\n            const wavelength = positionToWavelength(peak.position);\n            label = `${wavelength.toFixed(1)}nm`;\n          } else {\n            label = `Pos: ${peak.position.toFixed(3)}`;\n          }\n          const valueLabel = `I: ${peak.value.toFixed(1)}`;\n\n          // Setup text rendering\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n          ctx.font = '10px monospace';\n          ctx.textAlign = 'center';\n\n          // Measure text dimensions for backgrounds\n          const textWidth = ctx.measureText(label).width + 6;\n          const valueWidth = ctx.measureText(valueLabel).width + 6;\n          if (isNearTop) {\n            // Draw position/wavelength label below the marker\n            const labelY = y + 30;\n\n            // Draw text background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth / 2, labelY - 10, textWidth, 16);\n\n            // Draw label text\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, labelY);\n\n            // Draw value label below that\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth / 2, labelY + 7, valueWidth, 16);\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, labelY + 17);\n          } else {\n            // Standard label position above marker\n            // Draw text background for better readability\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth / 2, y - 25, textWidth, 16);\n\n            // Draw label above marker\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, y - 14);\n\n            // Draw peak value\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth / 2, y - 42, valueWidth, 16);\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, y - 31);\n          }\n        });\n      });\n    }\n\n    // Draw crosshair at cursor position\n    if (showCrosshair && cursorPosition) {\n      const {\n        x,\n        y\n      } = cursorPosition;\n      if (x >= 0 && x <= width && y >= 0 && y <= height) {\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.setLineDash([3, 3]); // Dashed line\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n\n        // Draw horizontal line\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset line style\n\n        // Calculate and display wavelength at cursor position\n        const position = x / width; // Normalize cursor position (0-1)\n\n        // Apply flip if needed to get the actual data position\n        const dataPosition = flipXAxis ? 1 - position : position;\n\n        // Determine wavelength based on cursor position\n        let wavelength;\n        if (useCalibration) {\n          wavelength = positionToWavelength(dataPosition);\n        } else {\n          wavelength = dataPosition; // Just show the position value when not calibrated\n        }\n\n        // Calculate y-values at the cursor position\n        let valueText = '';\n        if (data && data.positions && data.positions.length > 0) {\n          // Find the nearest data point to the cursor\n          const positionIndex = findNearestPositionIndex(data.positions, dataPosition);\n\n          // Build value text based on active channels\n          const channelTexts = [];\n          if (displayChannels.red) {\n            channelTexts.push(`R:${Math.round(data.red[positionIndex])}`);\n          }\n          if (displayChannels.green) {\n            channelTexts.push(`G:${Math.round(data.green[positionIndex])}`);\n          }\n          if (displayChannels.blue) {\n            channelTexts.push(`B:${Math.round(data.blue[positionIndex])}`);\n          }\n          if (displayChannels.intensity) {\n            channelTexts.push(`I:${data.intensity[positionIndex].toFixed(1)}`);\n          }\n          valueText = channelTexts.join(', ');\n        }\n\n        // Create a background for the text for better readability\n        const wavelengthText = useCalibration ? `${wavelength.toFixed(1)}nm` : `Pos: ${wavelength.toFixed(3)}`;\n\n        // Draw text background\n        const textWidth = ctx.measureText(wavelengthText).width + 10;\n        const valueTextWidth = ctx.measureText(valueText).width + 10;\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        ctx.fillRect(x - textWidth / 2, height - 45, textWidth, 20);\n        if (valueText) {\n          ctx.fillRect(x - valueTextWidth / 2, 5, valueTextWidth, 20);\n        }\n\n        // Draw wavelength text below cursor\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        ctx.textAlign = 'center';\n        ctx.fillText(wavelengthText, x, height - 30);\n\n        // Draw value text above cursor\n        if (valueText) {\n          ctx.fillText(valueText, x, 20);\n        }\n      }\n    }\n  };\n\n  // Helper to find the index of the nearest position value to a given position\n  const findNearestPositionIndex = (positions, targetPosition) => {\n    if (!positions || positions.length === 0) return -1;\n    let nearestIndex = 0;\n    let minDistance = Math.abs(positions[0] - targetPosition);\n    for (let i = 1; i < positions.length; i++) {\n      const distance = Math.abs(positions[i] - targetPosition);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestIndex = i;\n      }\n    }\n    return nearestIndex;\n  };\n\n  // Toggle display of a specific channel\n  const toggleChannel = channel => {\n    setDisplayChannels(prev => ({\n      ...prev,\n      [channel]: !prev[channel]\n    }));\n  };\n\n  // Handle mouse movement over the graph\n  const handleMouseMove = e => {\n    if (!graphContainerRef.current) return;\n\n    // Get canvas bounds\n    const rect = graphContainerRef.current.getBoundingClientRect();\n\n    // Calculate cursor position relative to canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Update cursor position state\n    setCursorPosition({\n      x,\n      y\n    });\n\n    // Redraw the graph with crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n\n  // Handle mouse enter/leave events\n  const handleMouseEnter = () => {\n    setShowCrosshair(true);\n  };\n  const handleMouseLeave = () => {\n    setShowCrosshair(false);\n    setCursorPosition(null);\n\n    // Redraw the graph without crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n\n  // Similar resize functionality as before\n  const handleResizeStart = e => {\n    var _graphContainerRef$cu, _graphContainerRef$cu2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_graphContainerRef$cu = graphContainerRef.current) === null || _graphContainerRef$cu === void 0 ? void 0 : _graphContainerRef$cu.clientWidth) || 400;\n    const startHeight = ((_graphContainerRef$cu2 = graphContainerRef.current) === null || _graphContainerRef$cu2 === void 0 ? void 0 : _graphContainerRef$cu2.clientHeight) || graphSize.height;\n\n    // Show resize feedback\n    setIsResizing(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaY = moveEvent.clientY - startY;\n\n      // Only adjust height, keep width as 100%\n      const newHeight = Math.max(100, startHeight + deltaY);\n\n      // Update graph size\n      const newSize = {\n        width: '100%',\n        // Keep width as 100% for responsive behavior\n        height: Math.round(newHeight)\n      };\n      setGraphSize(newSize);\n\n      // Notify parent if needed\n      if (onResize) {\n        onResize(newSize);\n      }\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      // fill this gap\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Export graph data as text file\n  const exportGraphData = () => {\n    // Make sure we have data to export\n    const dataToExport = isAccumulating ? accumulatedData : graphData;\n    if (!dataToExport) {\n      console.warn('No data to export');\n      if (props.onMessage) {\n        props.onMessage('No data to export');\n      }\n      return;\n    }\n    try {\n      const lines = [];\n      // Create a timestamp string with units separated by semicolons: YYYY;MM;DD;hh;mm;ss\n      const now = new Date();\n      const timestamp = now.getFullYear() + ';' + String(now.getMonth() + 1).padStart(2, '0') + ';' + String(now.getDate()).padStart(2, '0') + ';' + String(now.getHours()).padStart(2, '0') + ';' + String(now.getMinutes()).padStart(2, '0') + ';' + String(now.getSeconds()).padStart(2, '0');\n      lines.push(timestamp);\n\n      // Add raw data metadata if available\n      if (dataToExport.isRawData) {\n        const bitDepth = dataToExport.bitDepth || 12;\n        const dataType = dataToExport.dataType || 'raw';\n        lines.push(`# RAW DATA: ${bitDepth}-bit, type: ${dataType}`);\n      }\n\n      // Add information about frame accumulation\n      if (dataToExport.frameCount) {\n        lines.push(`# Accumulated frames: ${dataToExport.frameCount}`);\n      }\n\n      // Add information about memorized data if available\n      if (memorizedData.length > 0) {\n        lines.push(`# Memory entries: ${memorizedData.length}`);\n      }\n\n      // Add column headers with memory columns if available\n      let headers = useCalibration ? \"Wavelength (nm);Intensity;Red;Green;Blue\" : \"Position;Intensity;Red;Green;Blue\";\n\n      // Add headers for memorized data\n      if (memorizedData.length > 0) {\n        memorizedData.forEach((_, index) => {\n          headers += `;Memory${index + 1}_Intensity;Memory${index + 1}_Red;Memory${index + 1}_Green;Memory${index + 1}_Blue`;\n        });\n      }\n      lines.push(headers);\n\n      // Loop through data points\n      for (let i = 0; i < dataToExport.positions.length; i++) {\n        let position = dataToExport.positions[i];\n        // Convert position to wavelength if calibration is enabled\n        let wavelength = position;\n        if (useCalibration) {\n          wavelength = positionToWavelength(position);\n        }\n\n        // Get all channel values for current data\n        const intensity = dataToExport.intensity[i];\n        const red = dataToExport.red[i];\n        const green = dataToExport.green[i];\n        const blue = dataToExport.blue[i];\n\n        // Start the line with current data\n        let line = `${wavelength.toFixed(3)};${intensity.toFixed(2)};${red.toFixed(2)};${green.toFixed(2)};${blue.toFixed(2)}`;\n\n        // Add memorized data if available\n        if (memorizedData.length > 0) {\n          memorizedData.forEach(memData => {\n            // Find the closest position in the memorized data\n            const memIndex = findNearestPositionIndex(memData.positions, position);\n            if (memIndex >= 0) {\n              const memIntensity = memData.intensity[memIndex];\n              const memRed = memData.red[memIndex];\n              const memGreen = memData.green[memIndex];\n              const memBlue = memData.blue[memIndex];\n\n              // Add to the line\n              line += `;${memIntensity.toFixed(2)};${memRed.toFixed(2)};${memGreen.toFixed(2)};${memBlue.toFixed(2)}`;\n            } else {\n              // If no matching position found, add empty values\n              line += `;0;0;0;0`;\n            }\n          });\n        }\n\n        // Add line with all values\n        lines.push(line);\n      }\n\n      // Join lines with newlines\n      const content = lines.join('\\n');\n\n      // Create filename with prefix and optional timestamp\n      // For raw data, add raw indicator to filename\n      let fileName = '';\n      if (dataToExport.isRawData) {\n        fileName = includeDateInFilename ? `${filePrefix}_RAW${dataToExport.bitDepth || 12}bit_${timestamp}.txt` : `${filePrefix}_RAW${dataToExport.bitDepth || 12}bit.txt`;\n      } else {\n        fileName = includeDateInFilename ? `${filePrefix}_${timestamp}.txt` : `${filePrefix}.txt`;\n      }\n\n      // Create Blob with content\n      const blob = new Blob([content], {\n        type: 'text/plain'\n      });\n\n      // Create download link\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Append to document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Show success message\n      if (props.onMessage) {\n        props.onMessage(`Data exported as ${fileName}`);\n      } else {\n        // If no message handler provided, show alert\n        console.log(`Data exported as ${fileName}`);\n        setSaveMessage && setSaveMessage(`Data exported as ${fileName}`);\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    } catch (error) {\n      console.error('Failed to export graph data:', error);\n      if (props.onMessage) {\n        props.onMessage('Error exporting data');\n      } else {\n        setSaveMessage && setSaveMessage('Error exporting data');\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    }\n  };\n\n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    // fill this gap\n  };\n\n  // Handle peak count change\n  const handlePeakCountChange = e => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count >= 0 && count <= 10) {\n      setPeakCount(count);\n    }\n  };\n\n  // Toggle peak markers\n  const togglePeakMarkers = () => {\n    setShowPeakMarkers(!showPeakMarkers);\n  };\n  const styles = {\n    container: {\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      padding: '10px',\n      borderRadius: '4px',\n      position: 'relative',\n      border: isResizing ? '1px dashed #4CAF50' : 'none'\n    },\n    title: {\n      margin: '0 0 10px 0',\n      fontSize: '14px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    controls: {\n      display: 'flex',\n      gap: '5px',\n      alignItems: 'center'\n    },\n    frameCountControl: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '10px',\n      gap: '8px'\n    },\n    frameCountLabel: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.8)'\n    },\n    frameCountInput: {\n      width: '50px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '12px'\n    },\n    calibrationContainer: {\n      marginBottom: '10px',\n      padding: '8px',\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      borderRadius: '4px'\n    },\n    calibrationHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '8px'\n    },\n    calibrationTitle: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.9)',\n      margin: 0\n    },\n    calibrationCheckbox: {\n      marginLeft: '8px'\n    },\n    calibrationPoints: {\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      gap: '10px'\n    },\n    calibrationPointsColumn: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '6px'\n    },\n    calibrationPointsRow: {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '6px'\n    },\n    calibrationLabel: {\n      fontSize: '11px',\n      color: 'rgba(255, 255, 255, 0.7)',\n      width: '40px'\n    },\n    calibrationInput: {\n      width: '60px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '11px'\n    },\n    graphView: {\n      width: graphSize.width,\n      height: `${graphSize.height}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    canvas: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    resizeHandle: {\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      width: '20px',\n      height: '20px',\n      cursor: 'ns-resize',\n      // Only allow vertical resizing\n      zIndex: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\n      borderTopLeftRadius: '4px'\n    },\n    resizeInfo: {\n      position: 'absolute',\n      right: '25px',\n      bottom: '25px',\n      padding: '2px 6px',\n      background: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '3px',\n      fontSize: '11px',\n      zIndex: 100\n    },\n    channelToggles: {\n      display: 'flex',\n      gap: '5px'\n    },\n    channelButton: {\n      fontSize: '10px',\n      padding: '2px 5px',\n      borderRadius: '3px',\n      cursor: 'pointer',\n      border: '1px solid rgba(255, 255, 255, 0.3)',\n      backgroundColor: 'rgba(30, 30, 30, 0.7)'\n    },\n    noData: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      color: 'rgba(255, 255, 255, 0.5)',\n      fontSize: '12px'\n    },\n    memoryButton: {\n      ...buttonVariants.smallIconButton,\n      backgroundColor: 'rgba(100, 160, 100, 0.7)',\n      marginRight: '5px',\n      fontSize: '11px',\n      padding: '3px 6px'\n    },\n    memoryButtons: {\n      display: 'flex',\n      alignItems: 'center',\n      marginRight: '5px',\n      borderRight: '1px solid rgba(255, 255, 255, 0.2)',\n      paddingRight: '5px'\n    },\n    memoryCount: {\n      fontSize: '10px',\n      backgroundColor: 'rgba(80, 120, 80, 0.5)',\n      padding: '1px 5px',\n      borderRadius: '10px',\n      marginLeft: '5px'\n    }\n  };\n\n  // Return the component JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.title,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: 0\n        },\n        children: \"Intensity Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1549,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.channelToggles,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.4)',\n            borderColor: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.2)'\n          },\n          onClick: () => toggleChannel('red'),\n          children: \"R\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.4)',\n            borderColor: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.2)'\n          },\n          onClick: () => toggleChannel('green'),\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1561,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.4)',\n            borderColor: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.2)'\n          },\n          onClick: () => toggleChannel('blue'),\n          children: \"B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1571,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.4)',\n            borderColor: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.2)'\n          },\n          onClick: () => toggleChannel('intensity'),\n          children: \"I\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1581,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: 'rgb(255, 255, 100)',\n            borderColor: showCalibration ? 'rgb(255, 255, 100)' : 'rgba(255, 255, 100, 0.2)',\n            backgroundColor: showCalibration ? 'rgba(60, 60, 0, 0.6)' : 'rgba(30, 30, 30, 0.7)'\n          },\n          onClick: toggleCalibration,\n          title: \"Toggle calibration controls\",\n          children: \"Cal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1591,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1548,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.frameCountControl,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.frameCountLabel,\n        children: \"Frame accumulation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1607,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        max: \"2000\",\n        value: frameAccumCount,\n        onChange: handleFrameCountChange,\n        style: styles.frameCountInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1608,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...buttonVariants.smallIconButton,\n          backgroundColor: isAccumulating ? 'rgba(255, 165, 0, 0.7)' : undefined\n        },\n        onClick: toggleAccumulation,\n        title: isAccumulating ? \"Switch to live data\" : \"Switch to frame accumulation\",\n        children: isAccumulating ? \"Accumulating\" : \"Live\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px',\n          marginLeft: '20px',\n          borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n          paddingLeft: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.frameCountLabel,\n          children: \"Peak markers:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1638,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0\",\n          max: \"10\",\n          value: peakCount,\n          onChange: handlePeakCountChange,\n          style: styles.frameCountInput,\n          title: \"Number of peak markers to display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1639,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallIconButton,\n            backgroundColor: showPeakMarkers ? 'rgba(120, 120, 220, 0.7)' : undefined\n          },\n          onClick: togglePeakMarkers,\n          title: showPeakMarkers ? \"Hide peak markers\" : \"Show peak markers\",\n          children: showPeakMarkers ? \"Peaks On\" : \"Peaks Off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1648,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1630,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          marginLeft: 'auto',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.memoryButtons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: styles.memoryButton,\n            onClick: addToMemory,\n            title: \"Save current graph data to memory\",\n            disabled: !graphData && !accumulatedData,\n            children: \"To Memory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1664,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              ...styles.memoryButton,\n              backgroundColor: 'rgba(180, 80, 80, 0.7)'\n            },\n            onClick: clearMemory,\n            title: \"Clear all memorized data\",\n            disabled: memorizedData.length === 0,\n            children: \"Clear Memory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1672,\n            columnNumber: 13\n          }, this), memorizedData.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.memoryCount,\n            children: memorizedData.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1684,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: filePrefix,\n          onChange: e => setFilePrefix(e.target.value),\n          placeholder: \"File prefix\",\n          style: {\n            ...styles.frameCountInput,\n            width: '100px'\n          },\n          title: \"Prefix for the exported data filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1690,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            fontSize: '11px',\n            color: 'rgba(255, 255, 255, 0.7)',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '3px',\n            marginRight: '5px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: includeDateInFilename,\n            onChange: e => setIncludeDateInFilename(e.target.checked),\n            style: {\n              margin: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1709,\n            columnNumber: 13\n          }, this), \"Date\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1701,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallSecondary,\n            backgroundColor: 'rgba(20, 120, 220, 0.7)'\n          },\n          onClick: exportGraphData,\n          title: \"Export graph data as text file\",\n          disabled: !graphData && !accumulatedData,\n          children: \"\\uD83D\\uDCBE Export Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1717,\n          columnNumber: 11\n        }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '11px',\n            backgroundColor: 'rgba(0, 0, 0, 0.6)',\n            padding: '2px 6px',\n            borderRadius: '3px',\n            marginLeft: '5px',\n            color: 'rgba(255, 255, 255, 0.9)'\n          },\n          children: saveMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1730,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1661,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1606,\n      columnNumber: 7\n    }, this), showCalibration && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.calibrationContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.calibrationHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: styles.calibrationTitle,\n          children: \"Wavelength Calibration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1747,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontSize: '11px',\n              color: 'rgba(255, 255, 255, 0.7)'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: useCalibration,\n              onChange: toggleUseCalibration,\n              style: styles.calibrationCheckbox\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1750,\n              columnNumber: 17\n            }, this), \"Use Calibration\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1749,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1748,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1746,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.calibrationPoints,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.calibrationPointsColumn,\n          children: calibrationPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.calibrationLabel,\n              children: [\"Point \", index + 1, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1765,\n              columnNumber: 19\n            }, this)\n          }, `point-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1764,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1762,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.calibrationPointsColumn,\n          children: calibrationPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginRight: '4px'\n              },\n              children: \"Pos:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1773,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              max: \"1\",\n              step: \"0.0001\",\n              value: point.position,\n              onChange: e => updateCalibrationPoint(index, 'position', e.target.value),\n              style: styles.calibrationInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1774,\n              columnNumber: 19\n            }, this)]\n          }, `pos-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1772,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1770,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.calibrationPointsColumn,\n          children: calibrationPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginRight: '4px'\n              },\n              children: \"\\u03BB:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1790,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"200\",\n              max: \"1200\",\n              step: \"0.01\",\n              value: point.wavelength,\n              onChange: e => updateCalibrationPoint(index, 'wavelength', e.target.value),\n              style: styles.calibrationInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1791,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginLeft: '2px'\n              },\n              children: \"nm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1800,\n              columnNumber: 19\n            }, this)]\n          }, `wavelength-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1789,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1787,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: 'auto',\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontSize: '11px',\n              color: 'rgba(255, 255, 255, 0.7)',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: flipXAxis,\n              onChange: toggleFlipXAxis,\n              style: {\n                marginRight: '5px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1807,\n              columnNumber: 17\n            }, this), \"Flip X-Axis\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1806,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1805,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1761,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1745,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: graphContainerRef,\n      style: styles.graphView,\n      onMouseMove: handleMouseMove,\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: styles.canvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1827,\n        columnNumber: 9\n      }, this), !graphData && !accumulatedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.noData,\n        children: \"Draw a line on the camera feed to see intensity data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1833,\n        columnNumber: 11\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeInfo,\n        children: [\"Height: \", graphSize.height, \"px\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1840,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handleResizeStart,\n        title: \"Resize graph height\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"12\",\n          height: \"12\",\n          viewBox: \"0 0 12 12\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M2,6 L10,6 M2,9 L10,9\",\n            stroke: \"white\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1852,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1851,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1846,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1820,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1547,\n    columnNumber: 5\n  }, this);\n}, \"0x1EHAswbhsi/HAEwx3Xc5lLUY4=\", false, function () {\n  return [useButtonStyles];\n})), \"0x1EHAswbhsi/HAEwx3Xc5lLUY4=\", false, function () {\n  return [useButtonStyles];\n});\n\n// Add display name for debugging\n_c2 = GraphComponent;\nGraphComponent.displayName = 'GraphComponent';\nexport default GraphComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent$React.forwardRef\");\n$RefreshReg$(_c2, \"GraphComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useImperativeHandle","useButtonStyles","spectralConfig","jsxDEV","_jsxDEV","GraphComponent","_s","forwardRef","_c","props","ref","onResize","lineData","onFrameAccumCountChange","onAccumulationToggle","buttonVariants","graphSize","setGraphSize","width","height","isResizing","setIsResizing","showResizeInfo","setShowResizeInfo","displayChannels","setDisplayChannels","red","green","blue","intensity","graphData","setGraphData","memorizedData","setMemorizedData","cursorPosition","setCursorPosition","showCrosshair","setShowCrosshair","frameAccumCount","setFrameAccumCount","accumulatedFrames","setAccumulatedFrames","accumulatedData","setAccumulatedData","isAccumulating","setIsAccumulating","filePrefix","setFilePrefix","includeDateInFilename","setIncludeDateInFilename","saveMessage","setSaveMessage","showPeakMarkers","setShowPeakMarkers","peakCount","setPeakCount","showCalibration","setShowCalibration","calibrationPoints","setCalibrationPoints","position","wavelength","useCalibration","setUseCalibration","flipXAxis","setFlipXAxis","graphContainerRef","canvasRef","getCalibrationSettings","applyCalibrationSettings","settings","Array","isArray","error","console","getPeakSettings","count","showMarkers","applyPeakSettings","pixelData","processedData","wavelengths","calculatedIntensity","i","length","calculateIntensity","map","r","prev","newFrames","summedData","sumFrameData","drawGraph","addToMemory","dataToMemorize","setTimeout","memorizedItem","memoryTimestamp","Date","toISOString","clearMemory","findNearestSensitivityFactor","sensitivities","SENSITIVITY_FACTORS","log","Object","keys","Number","closestWavelength","minDistance","Math","abs","wl","distance","toString","isInChannelRange","channel","ranges","CHANNEL_RANGES","min","max","sensitivityFactor","undefined","frames","template","summedRed","fill","summedGreen","summedBlue","summedIntensity","forEach","frame","val","timestamp","now","positions","lineLength","frameCount","isRawData","bitDepth","dataType","positionToWavelength","sortedPoints","sort","a","b","p1","p2","slope","t","handleFrameCountChange","e","parseInt","target","value","isNaN","toggleAccumulation","newValue","toggleCalibration","toggleUseCalibration","toggleFlipXAxis","updateCalibrationPoint","index","field","numValue","parseFloat","formattedValue","toFixed","points","newPoints","current","canvas","container","clientWidth","clientHeight","findPeaks","values","peaks","peak","x1","x2","x3","y1","y2","y3","denom","A","B","refinedPos","refinedPosition","warn","push","filteredPeaks","minPositionDistance","tooClose","selectedPeak","data","ctx","getContext","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","y","beginPath","moveTo","lineTo","stroke","x","minWavelength","maxWavelength","p","styles","color","maxRed","maxGreen","maxBlue","maxIntensity","channelPeaks","entries","isEnabled","maxValue","xPos","normalizedPos","intensityValues","wavelengthPeaks","peakWavelength","selectedWavelength","font","textAlign","timeText","toLocaleTimeString","statusText","fillText","legendStartY","legendSpacing","round","reduce","displayPosition","dataIdx","point","baseColor","markerColor","replace","isNearTop","setLineDash","markerY","closePath","label","valueLabel","textWidth","measureText","valueWidth","labelY","dataPosition","valueText","positionIndex","findNearestPositionIndex","channelTexts","join","wavelengthText","valueTextWidth","targetPosition","nearestIndex","toggleChannel","handleMouseMove","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseEnter","handleMouseLeave","handleResizeStart","_graphContainerRef$cu","_graphContainerRef$cu2","preventDefault","stopPropagation","startX","startY","startWidth","startHeight","moveEvent","deltaY","newHeight","newSize","handleMouseUp","document","removeEventListener","addEventListener","exportSettings","exportGraphData","dataToExport","onMessage","lines","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","headers","_","line","memData","memIndex","memIntensity","memRed","memGreen","memBlue","content","fileName","blob","Blob","type","url","URL","createObjectURL","link","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","loadSettings","handlePeakCountChange","togglePeakMarkers","backgroundColor","padding","borderRadius","border","title","margin","fontSize","display","justifyContent","alignItems","controls","gap","frameCountControl","marginBottom","frameCountLabel","frameCountInput","calibrationContainer","calibrationHeader","calibrationTitle","calibrationCheckbox","marginLeft","flexDirection","flexWrap","calibrationPointsColumn","calibrationPointsRow","calibrationLabel","calibrationInput","graphView","overflow","resizeHandle","bottom","right","cursor","zIndex","borderTop","borderLeft","borderTopLeftRadius","resizeInfo","background","channelToggles","channelButton","noData","memoryButton","smallIconButton","marginRight","memoryButtons","borderRight","paddingRight","memoryCount","style","children","_jsxFileName","lineNumber","columnNumber","borderColor","onClick","onChange","paddingLeft","disabled","placeholder","checked","smallSecondary","step","onMouseMove","onMouseEnter","onMouseLeave","onMouseDown","viewBox","d","strokeWidth","strokeLinecap","_c2","displayName","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/SpectrometerMQTT/MQTTGraphComponent.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\nimport spectralConfig from './spectral_config.json';\n\nconst GraphComponent = React.forwardRef((props, ref) => {\n  const { onResize, lineData, onFrameAccumCountChange, onAccumulationToggle } = props;\n  const buttonVariants = useButtonStyles();\n  const [graphSize, setGraphSize] = useState({ width: '100%', height: 200 });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [displayChannels, setDisplayChannels] = useState({\n    red: false,\n    green: false,\n    blue: false,\n    intensity: true\n  });\n  const [graphData, setGraphData] = useState(null);\n  \n  // Memory for storing graph data\n  const [memorizedData, setMemorizedData] = useState([]);\n  \n  // Cursor tracking state\n  const [cursorPosition, setCursorPosition] = useState(null);\n  const [showCrosshair, setShowCrosshair] = useState(false);\n  \n  // Frame accumulation state - internally managed but synced with parent\n  const [frameAccumCount, setFrameAccumCount] = useState(10); // Default to 10 frames\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\n  const [accumulatedData, setAccumulatedData] = useState(null);\n  const [isAccumulating, setIsAccumulating] = useState(false);\n  \n  // Export file name prefix\n  const [filePrefix, setFilePrefix] = useState('spectrum');\n  const [includeDateInFilename, setIncludeDateInFilename] = useState(true);\n  \n  // Status message for operations\n  const [saveMessage, setSaveMessage] = useState('');\n  \n  // Peak detection state\n  const [showPeakMarkers, setShowPeakMarkers] = useState(true);\n  const [peakCount, setPeakCount] = useState(3); // Default to showing top 3 peaks\n  \n  // Calibration state\n  const [showCalibration, setShowCalibration] = useState(false);\n  const [calibrationPoints, setCalibrationPoints] = useState([\n    { position: 0.25000, wavelength: 450.0 },\n    { position: 0.75000, wavelength: 650.0 }\n  ]);\n  const [useCalibration, setUseCalibration] = useState(false);\n  const [flipXAxis, setFlipXAxis] = useState(false);\n  \n  const graphContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n  \n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    getCalibrationSettings: () => ({\n      calibrationPoints: [...calibrationPoints],\n      useCalibration,\n      flipXAxis\n    }),\n    \n    applyCalibrationSettings: (settings) => {\n      if (!settings) return false;\n      \n      try {\n        if (settings.calibrationPoints && Array.isArray(settings.calibrationPoints)) {\n          setCalibrationPoints(settings.calibrationPoints);\n        }\n        \n        if (typeof settings.useCalibration === 'boolean') {\n          setUseCalibration(settings.useCalibration);\n          if (settings.useCalibration) {\n            setShowCalibration(true);\n          }\n        }\n        \n        if (typeof settings.flipXAxis === 'boolean') {\n          setFlipXAxis(settings.flipXAxis);\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Error applying calibration settings:', error);\n        return false;\n      }\n    },\n    \n    getPeakSettings: () => ({\n      count: peakCount,\n      showMarkers: showPeakMarkers\n    }),\n    \n    applyPeakSettings: (settings) => {\n      if (!settings) return false;\n      \n      try {\n        if (typeof settings.count === 'number') {\n          setPeakCount(settings.count);\n        }\n        \n        if (typeof settings.showMarkers === 'boolean') {\n          setShowPeakMarkers(settings.showMarkers);\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Error applying peak settings:', error);\n        return false;\n      }\n    }\n  }));\n  \n  // Update graph when line data changes\n  useEffect(() => {\n    if (lineData?.pixelData) {\n      // Process the incoming line data to ensure it has all necessary properties\n      const processedData = { ...lineData.pixelData };\n      \n      // If we have wavelengths but no intensity, calculate intensity\n      if (processedData.wavelengths && processedData.red && processedData.green && processedData.blue && !processedData.intensity) {\n        const calculatedIntensity = [];\n        for (let i = 0; i < processedData.red.length; i++) {\n          const wavelength = processedData.wavelengths[i];\n          calculatedIntensity[i] = calculateIntensity(\n            processedData.red[i], \n            processedData.green[i], \n            processedData.blue[i], \n            wavelength\n          );\n        }\n        processedData.intensity = calculatedIntensity;\n      } else if (!processedData.intensity && processedData.red && processedData.green && processedData.blue) {\n        // If no intensity data and no wavelengths, calculate average of RGB\n        const calculatedIntensity = processedData.red.map((r, i) => \n          (r + processedData.green[i] + processedData.blue[i]) / 3\n        );\n        processedData.intensity = calculatedIntensity;\n      }\n      \n      // Always keep the latest raw frame data for display when not accumulating\n      setGraphData(processedData);\n      \n      if (isAccumulating) {\n        // Add new frame to accumulation buffer\n        setAccumulatedFrames(prev => {\n          const newFrames = [...prev, processedData];\n          \n          // If we've reached our target frame count, process the accumulated data\n          if (newFrames.length >= frameAccumCount) {\n            // Sum the color data across all frames\n            const summedData = sumFrameData(newFrames);\n            \n            // Update accumulated data state\n            setAccumulatedData(summedData);\n            \n            // Draw the accumulated data\n            drawGraph(summedData);\n            \n            // Reset the accumulation buffer\n            return [];\n          }\n          \n          return newFrames;\n        });\n      } else {\n        // If not accumulating, just display the raw frame\n        drawGraph(processedData);\n      }\n    }\n  }, [lineData, isAccumulating, frameAccumCount, useCalibration, calibrationPoints, flipXAxis]);\n  \n  // When accumulated data changes, draw it\n  useEffect(() => {\n    if (accumulatedData && isAccumulating) {\n      drawGraph(accumulatedData);\n    }\n  }, [accumulatedData, useCalibration, calibrationPoints, flipXAxis]);\n  \n  // Function to add current data to memory\n  const addToMemory = () => {\n    const dataToMemorize = isAccumulating ? accumulatedData : graphData;\n    \n    if (!dataToMemorize) {\n      setSaveMessage('No data to memorize');\n      setTimeout(() => setSaveMessage(''), 3000);\n      return;\n    }\n    \n    // Create a copy of the data with a timestamp\n    const memorizedItem = {\n      ...dataToMemorize,\n      memoryTimestamp: new Date().toISOString()\n    };\n    \n    // Add to memory array\n    setMemorizedData(prev => [...prev, memorizedItem]);\n    setSaveMessage(`Data added to memory (${memorizedData.length + 1} items)`);\n    setTimeout(() => setSaveMessage(''), 3000);\n  };\n  \n  // Function to clear memory\n  const clearMemory = () => {\n    setMemorizedData([]);\n    setSaveMessage('Memory cleared');\n    setTimeout(() => setSaveMessage(''), 3000);\n  };\n  \n  // Find the nearest sensitivity factor for a given wavelength\n  const findNearestSensitivityFactor = (wavelength) => {\n    const sensitivities = spectralConfig.SENSITIVITY_FACTORS;\n    console.log('[MQTTGraphComponent] Wavelength:', wavelength);\n    console.log('[MQTTGraphComponent] Sensitivity factors:', sensitivities);\n    const wavelengths = Object.keys(sensitivities).map(Number);\n    \n    // Find the closest wavelength in the sensitivity factors\n    let closestWavelength = wavelengths[0];\n    let minDistance = Math.abs(wavelength - closestWavelength);\n    \n    for (const wl of wavelengths) {\n      const distance = Math.abs(wavelength - wl);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestWavelength = wl;\n      }\n    }\n    \n    return sensitivities[closestWavelength.toString()];\n  };\n\n  // Check if wavelength is in range for a specific channel\n  const isInChannelRange = (wavelength, channel) => {\n    const ranges = spectralConfig.CHANNEL_RANGES;\n    if (!ranges[channel]) return false;\n    \n    const [min, max] = ranges[channel];\n    return wavelength >= min && wavelength <= max;\n  };\n\n  // Calculate intensity based on RGB values and sensitivity factors\n  const calculateIntensity = (red, green, blue, wavelength) => {\n    // Get sensitivity factor for this wavelength\n    const sensitivityFactor = findNearestSensitivityFactor(wavelength);\n    \n    // Determine which channels to use based on wavelength\n    let intensity = 0;\n    \n    if (isInChannelRange(wavelength, 'r') && red !== undefined) {\n      intensity += red;\n    }\n    \n    else if (isInChannelRange(wavelength, 'g') && green !== undefined) {\n      intensity += green;\n    }\n    \n    else if (isInChannelRange(wavelength, 'b') && blue !== undefined) {\n      intensity += blue;\n    }\n    \n    // If no channels in range, use average of all channels\n    if (red !== undefined && green !== undefined && blue !== undefined) {\n      intensity = (red + green + blue) / 3;\n    } else {\n      console.log('[MQTTGraphComponent] No channels in range');\n    }\n    \n    // Apply sensitivity correction\n    if (sensitivityFactor > 0) {\n      intensity = intensity / sensitivityFactor;\n      console.log('[MQTTGraphComponent] Intensity after sensitivity correction:', intensity);\n      console.log('[MQTTGraphComponent] Sensitivity factor:', sensitivityFactor);\n    }\n    \n    return intensity;\n  };\n\n  // Sum pixel data across multiple frames\n  const sumFrameData = (frames) => {\n    if (!frames.length) return null;\n    \n    // Use the first frame as a template for structure\n    const template = frames[0];\n    \n    // Initialize arrays for summed values\n    const summedRed = Array(template.red.length).fill(0);\n    const summedGreen = Array(template.green.length).fill(0);\n    const summedBlue = Array(template.blue.length).fill(0);\n    const summedIntensity = Array(template.intensity ? template.intensity.length : template.red.length).fill(0);\n    \n    // Sum values across all frames\n    frames.forEach(frame => {\n      frame.red.forEach((val, i) => summedRed[i] += val);\n      frame.green.forEach((val, i) => summedGreen[i] += val);\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\n      \n      // If frame has intensity data, use it, otherwise it will be calculated later\n      if (frame.intensity) {\n        frame.intensity.forEach((val, i) => summedIntensity[i] += val);\n      }\n    });\n    \n    // If we have calibrated wavelengths, calculate intensity using sensitivity factors\n    if (template.wavelengths) {\n      for (let i = 0; i < summedRed.length; i++) {\n        const wavelength = template.wavelengths[i];\n        summedIntensity[i] = calculateIntensity(\n          summedRed[i], \n          summedGreen[i], \n          summedBlue[i], \n          wavelength\n        );\n      }\n    }\n\n    // Return the summed data structure\n    return {\n      timestamp: Date.now(),\n      positions: template.positions, // Positions remain the same\n      wavelengths: template.wavelengths, // Pass through wavelengths if available\n      red: summedRed,\n      green: summedGreen,\n      blue: summedBlue,\n      intensity: summedIntensity,\n      lineLength: template.lineLength || summedRed.length,\n      frameCount: frames.length, // Add count of frames that were summed\n      \n      // Preserve raw data metadata if present in template\n      isRawData: template.isRawData || false,\n      bitDepth: template.bitDepth || null,\n      dataType: template.dataType || null\n    };\n  };\n  \n  // Convert position to wavelength using calibration points\n  const positionToWavelength = (position) => {\n    if (!useCalibration || calibrationPoints.length < 2) {\n      return position;\n    }\n    \n    // Sort calibration points by position\n    const sortedPoints = [...calibrationPoints].sort((a, b) => a.position - b.position);\n    \n    // Find the two calibration points that surround the given position\n    let p1, p2;\n    for (let i = 0; i < sortedPoints.length - 1; i++) {\n      if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\n        p1 = sortedPoints[i];\n        p2 = sortedPoints[i + 1];\n        break;\n      }\n    }\n    \n    // If position is outside the calibration range, use extrapolation\n    if (!p1 || !p2) {\n      if (position < sortedPoints[0].position) {\n        // Extrapolate below the first point\n        // Use the first two points for the slope calculation\n        p1 = sortedPoints[0];\n        p2 = sortedPoints[1];\n        // Calculate the slope between first two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p1.wavelength + slope * (position - p1.position);\n      } else {\n        // Extrapolate above the last point\n        // Use the last two points for the slope calculation\n        p1 = sortedPoints[sortedPoints.length - 2];\n        p2 = sortedPoints[sortedPoints.length - 1];\n        // Calculate the slope between last two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p2.wavelength + slope * (position - p2.position);\n      }\n    }\n    \n    // Linear interpolation between the two calibration points\n    const t = (position - p1.position) / (p2.position - p1.position);\n    return p1.wavelength + t * (p2.wavelength - p1.wavelength);\n  };\n  \n  // Handle changing the frame accumulation count\n  const handleFrameCountChange = (e) => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count > 0) {\n      setFrameAccumCount(count);\n      // Reset accumulation when count changes\n      setAccumulatedFrames([]);\n      setAccumulatedData(null);\n      \n      // Notify parent of change\n      if (onFrameAccumCountChange) {\n        onFrameAccumCountChange(count);\n      }\n    }\n  };\n  \n  // Toggle accumulation mode\n  const toggleAccumulation = () => {\n    const newValue = !isAccumulating;\n    setIsAccumulating(newValue);\n    // Reset accumulated data when toggling\n    setAccumulatedFrames([]);\n    setAccumulatedData(null);\n    \n    // Notify parent of change\n    if (onAccumulationToggle) {\n      onAccumulationToggle(newValue);\n    }\n  };\n  \n  // Toggle calibration controls\n  const toggleCalibration = () => {\n    setShowCalibration(!showCalibration);\n  };\n  \n  // Toggle using calibration\n  const toggleUseCalibration = () => {\n    setUseCalibration(!useCalibration);\n  };\n  \n  // Toggle flip X axis\n  const toggleFlipXAxis = () => {\n    setFlipXAxis(!flipXAxis);\n  };\n  \n  // Update calibration point\n  const updateCalibrationPoint = (index, field, value) => {\n    const numValue = parseFloat(value);\n    if (isNaN(numValue)) return;\n    \n    // Format position values to 3 decimal places\n    const formattedValue = field === 'position' ? \n      parseFloat(numValue.toFixed(3)) : \n      numValue;\n    \n    setCalibrationPoints(points => {\n      const newPoints = [...points];\n      newPoints[index] = {\n        ...newPoints[index],\n        [field]: formattedValue\n      };\n      return newPoints;\n    });\n  };\n  \n  // Initialize and resize the canvas when graph size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const container = graphContainerRef.current;\n      \n      if (container) {\n        // Set canvas size to match container\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n        \n        // Redraw graph with new size\n        if (isAccumulating && accumulatedData) {\n          drawGraph(accumulatedData);\n        } else if (graphData) {\n          drawGraph(graphData);\n        }\n      }\n    }\n  }, [graphSize, graphData, accumulatedData, isAccumulating, useCalibration, calibrationPoints, flipXAxis]);\n  \n  // Find peaks in data array\n  const findPeaks = (values, positions, count = 3) => {\n    if (!values || values.length < 3) return [];\n    \n    // Find local maxima (points higher than both neighbors)\n    const peaks = [];\n    \n    for (let i = 1; i < values.length - 1; i++) {\n      if (values[i] > values[i - 1] && values[i] > values[i + 1]) {\n        // This is a local maximum\n        const peak = {\n          index: i,\n          position: positions[i],\n          value: values[i]\n        };\n        \n        // Refine position using quadratic interpolation for better accuracy\n        try {\n          // Based on three points around the peak\n          const x1 = positions[i-1];\n          const x2 = positions[i];\n          const x3 = positions[i+1];\n          const y1 = values[i-1];\n          const y2 = values[i];\n          const y3 = values[i+1];\n          \n          // Only apply refinement if we have valid neighboring points\n          const denom = (x1 - x2) * (x1 - x3) * (x2 - x3);\n          if (denom !== 0) {\n            // Quadratic interpolation formula\n            const A = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom;\n            const B = (x3*x3 * (y1 - y2) + x2*x2 * (y3 - y1) + x1*x1 * (y2 - y3)) / denom;\n            \n            // Calculate refined x position at the peak of the parabola\n            if (A !== 0) {\n              const refinedPos = -B / (2 * A);\n              \n              // Only use refined position if it's within a reasonable range\n              if (refinedPos >= x1 && refinedPos <= x3) {\n                peak.refinedPosition = refinedPos;\n              }\n            }\n          }\n        } catch (e) {\n          console.warn('Error during peak refinement', e);\n          // If refinement fails, use the original position\n        }\n        \n        peaks.push(peak);\n      }\n    }\n    \n    // Sort peaks by value (descending)\n    peaks.sort((a, b) => b.value - a.value);\n    \n    // Filter peaks to ensure they're at least 10nm apart (or equivalent in position space)\n    const filteredPeaks = [];\n    \n    // Default position-based distance (approximately 5% of the position range)\n    const minPositionDistance = 0.05;\n    \n    for (const peak of peaks) {\n      // Check if this peak is too close to any already-selected stronger peak\n      let tooClose = false;\n      \n      for (const selectedPeak of filteredPeaks) {\n        // Use position-based distance (wavelength conversion will happen in the drawing code)\n        const distance = Math.abs(peak.position - selectedPeak.position);\n        \n        if (distance < minPositionDistance) {\n          tooClose = true;\n          break;\n        }\n      }\n      \n      // Add the peak if it's not too close to any stronger peak\n      if (!tooClose) {\n        filteredPeaks.push(peak);\n        \n        // Stop if we have enough peaks\n        if (filteredPeaks.length >= count) {\n          break;\n        }\n      }\n    }\n    \n    return filteredPeaks;\n  };\n  \n  // Draw the graph based on pixel data\n  const drawGraph = (data) => {\n    if (!canvasRef.current || !data) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // Clear the canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Draw background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n    \n    // Horizontal grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const y = height * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n    }\n    \n    // Vertical grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const x = width * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n    }\n    \n    // Calculate min and max wavelength values for calibration upfront\n    let minWavelength, maxWavelength;\n    if (data.wavelengths) {\n      // If data already has wavelengths, use those\n      minWavelength = Math.min(...data.wavelengths);\n      maxWavelength = Math.max(...data.wavelengths);\n    } else if (useCalibration && calibrationPoints.length >= 2) {\n      // Otherwise use calibration points\n      const wavelengths = calibrationPoints.map(p => p.wavelength);\n      minWavelength = Math.min(...wavelengths);\n      maxWavelength = Math.max(...wavelengths);\n    }\n    \n    // Set line styles for different channels\n    const styles = {\n      red: { color: 'rgba(255, 0, 0, 0.8)', width: 1.5 },\n      green: { color: 'rgba(0, 255, 0, 0.8)', width: 1.5 },\n      blue: { color: 'rgba(0, 0, 255, 0.8)', width: 1.5 },\n      intensity: { color: 'rgba(255, 255, 255, 0.8)', width: 2 }\n    };\n    \n    // Ensure intensity data exists - if not, calculate it from RGB\n    if (!data.intensity && data.red && data.green && data.blue) {\n      if (data.wavelengths) {\n        // If we have wavelengths, calculate based on sensitivity factors\n        data.intensity = data.red.map((r, i) => \n          calculateIntensity(r, data.green[i], data.blue[i], data.wavelengths[i])\n        );\n      } else {\n        // If no wavelengths, use simple RGB average\n        data.intensity = data.red.map((r, i) => \n          (r + data.green[i] + data.blue[i]) / 3\n        );\n      }\n    }\n    \n    // Find max values for scaling\n    const maxRed = Math.max(...data.red, 1);\n    const maxGreen = Math.max(...data.green, 1);\n    const maxBlue = Math.max(...data.blue, 1);\n    const maxIntensity = Math.max(...data.intensity, 1);\n    \n    // Store the peak data for each displayed channel\n    const channelPeaks = {};\n    \n    // Plot each enabled channel\n    Object.entries(displayChannels).forEach(([channel, isEnabled]) => {\n      if (!isEnabled || !data[channel]) return;\n      \n      const values = data[channel];\n      const maxValue = channel === 'red' ? maxRed : \n                      channel === 'green' ? maxGreen : \n                      channel === 'blue' ? maxBlue : maxIntensity;\n      \n      // Set line style\n      ctx.strokeStyle = styles[channel].color;\n      ctx.lineWidth = styles[channel].width;\n      \n      // Begin the path\n      ctx.beginPath();\n      \n      // Draw the line\n      for (let i = 0; i < values.length; i++) {\n        // Calculate x position, applying flip if enabled\n        let xPos;\n        if (data.wavelengths && useCalibration) {\n          // If we have real wavelengths and calibration is enabled, normalize to 0-1 range\n          const normalizedPos = (data.wavelengths[i] - minWavelength) / (maxWavelength - minWavelength);\n          xPos = flipXAxis ? 1 - normalizedPos : normalizedPos;\n        } else {\n          // Otherwise use the provided position array\n          xPos = data.positions[i];\n          if (flipXAxis) {\n            xPos = 1 - xPos; // Invert position (0 becomes 1, 1 becomes 0)\n          }\n        }\n        \n        // Convert to pixel coordinates\n        const x = xPos * width;\n        \n        // Invert Y since canvas 0,0 is top-left\n        const y = height - (values[i] / maxValue) * height;\n        \n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      // Draw the path\n      ctx.stroke();\n    });\n    \n    // Detect peaks for intensity channel only if enabled\n    if (showPeakMarkers && displayChannels.intensity) {\n      const intensityValues = data.intensity;\n      // Use original positions for peak detection\n      const peaks = findPeaks(intensityValues, data.positions, peakCount);\n      \n      // If calibration is enabled, perform additional wavelength-based filtering\n      if (useCalibration) {\n        // Convert positions to wavelengths and filter to ensure 10nm minimum distance\n        const wavelengthPeaks = [];\n        \n        // Process peaks in order of intensity (already sorted by findPeaks)\n        for (const peak of peaks) {\n          const peakWavelength = positionToWavelength(peak.position);\n          let tooClose = false;\n          \n          // Check if this peak is too close to any already selected peak\n          for (const selectedPeak of wavelengthPeaks) {\n            const selectedWavelength = positionToWavelength(selectedPeak.position);\n            const distance = Math.abs(peakWavelength - selectedWavelength);\n            \n            if (distance < 10) { // 10nm minimum distance\n              tooClose = true;\n              break;\n            }\n          }\n          \n          // Add the peak if it's not too close to any already selected peak\n          if (!tooClose) {\n            wavelengthPeaks.push(peak);\n          }\n        }\n        \n        channelPeaks['intensity'] = wavelengthPeaks;\n      } else {\n        channelPeaks['intensity'] = peaks;\n      }\n    }\n    \n    // Draw timestamp and status information\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.font = '10px monospace';\n    ctx.textAlign = 'left';\n    \n    // Show time and accumulation status\n    const timeText = `Time: ${new Date(data.timestamp).toLocaleTimeString()}`;\n    const statusText = isAccumulating \n      ? `Accumulating: ${accumulatedFrames.length}/${frameAccumCount} frames` \n      : 'Live data';\n    \n    ctx.fillText(timeText, 5, 15);\n    ctx.fillText(statusText, width - 150, 15);\n    \n    // Draw calibration status if enabled\n    if (useCalibration) {\n      ctx.fillText('Calibrated', width - 150, 45);\n    }\n    \n    // Draw frame count if this is accumulated data\n    if (data.frameCount) {\n      ctx.fillText(`Summed ${data.frameCount} frames`, width - 150, 30);\n    }\n    \n    // Draw raw data and bit depth information if available\n    if (data.isRawData) {\n      const bitDepth = data.bitDepth || 12;\n      const dataType = data.dataType || 'raw';\n      ctx.fillStyle = 'rgba(255, 200, 100, 0.9)';\n      ctx.fillText(`RAW ${bitDepth}-bit | ${dataType}`, 5, 60);\n    }\n    \n    // Draw channel legend\n    const legendStartY = 30;\n    const legendSpacing = 15;\n    \n    if (displayChannels.red) {\n      ctx.fillStyle = styles.red.color;\n      // For raw data, show max value as well\n      if (data.isRawData) {\n        ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)} (max: ${Math.round(maxRed)})`, 5, legendStartY);\n      } else {\n        ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)}`, 5, legendStartY);\n      }\n    }\n    \n    if (displayChannels.green) {\n      ctx.fillStyle = styles.green.color;\n      // For raw data, show max value as well\n      if (data.isRawData) {\n        ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)} (max: ${Math.round(maxGreen)})`, 5, legendStartY + legendSpacing);\n      } else {\n        ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)}`, 5, legendStartY + legendSpacing);\n      }\n    }\n    \n    if (displayChannels.blue) {\n      ctx.fillStyle = styles.blue.color;\n      // For raw data, show max value as well\n      if (data.isRawData) {\n        ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)} (max: ${Math.round(maxBlue)})`, 5, legendStartY + legendSpacing * 2);\n      } else {\n        ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)}`, 5, legendStartY + legendSpacing * 2);\n      }\n    }\n    \n    if (displayChannels.intensity) {\n      ctx.fillStyle = styles.intensity.color;\n      // For raw data, show max value as well\n      if (data.isRawData) {\n        ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)} (max: ${Math.round(maxIntensity)})`, 5, legendStartY + legendSpacing * 3);\n      } else {\n        ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)}`, 5, legendStartY + legendSpacing * 3);\n      }\n    }\n    \n    // Draw wavelength axis labels if calibration is enabled (unified section)\n    if ((useCalibration && minWavelength !== undefined && maxWavelength !== undefined) || data.wavelengths) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.font = '10px monospace';\n      ctx.textAlign = 'center';\n      \n      // Clear the bottom area where labels will go\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'; // Match background color\n      ctx.fillRect(0, height - 20, width, 20);\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'; // Reset text color\n      \n      // Draw axis labels at regular position intervals (0%, 25%, 50%, 75%, 100%)\n      // but show the corresponding wavelength values\n      for (let i = 0; i <= 4; i++) {\n        const position = i / 4; // Regular positions (0, 0.25, 0.5, 0.75, 1)\n        \n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - position : position;\n        const x = displayPosition * width;\n        \n        // Convert position to wavelength using calibration or data.wavelengths\n        let wavelength;\n        if (data.wavelengths) {\n          // If data has wavelengths, interpolate between available values\n          const dataIdx = Math.round(position * (data.wavelengths.length - 1));\n          wavelength = data.wavelengths[dataIdx];\n        } else {\n          // Otherwise use calibration function\n          wavelength = positionToWavelength(position);\n        }\n        \n        ctx.fillText(`${Math.round(wavelength)}nm`, x, height - 5);\n      }\n    }\n    \n    // Draw calibration points if enabled\n    if (useCalibration) {\n      calibrationPoints.forEach(point => {\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - point.position : point.position;\n        // Draw vertical line at calibration point position\n        const x = displayPosition * width;\n        \n        ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n        \n        // Draw wavelength label at the calibration point\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\n        ctx.font = '10px monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${point.wavelength}nm`, x, height - 20); // Higher position to avoid overlap\n      });\n    }\n    \n    // Draw peak markers if enabled\n    if (showPeakMarkers) {\n      // Draw peaks for each enabled channel\n      Object.entries(channelPeaks).forEach(([channel, peaks]) => {\n        // Use the same color as the channel with increased opacity\n        const baseColor = styles[channel].color;\n        const markerColor = baseColor.replace('rgba', 'rgb').replace(/,\\s*[\\d.]+\\)/, ')');\n        \n        // Get max value for this channel for y-coordinate calculation\n        const maxValue = channel === 'red' ? maxRed : \n                        channel === 'green' ? maxGreen : \n                        channel === 'blue' ? maxBlue : maxIntensity;\n        \n        peaks.forEach(peak => {\n          // Get the original position\n          let xPos = peak.position;\n          \n          // Use refined position if available (within reasonable bounds)\n          if (peak.refinedPosition !== undefined) {\n            xPos = peak.refinedPosition;\n          }\n          \n          // Apply flip if enabled\n          if (flipXAxis) {\n            xPos = 1 - xPos;\n          }\n          \n          // Convert to pixel coordinates\n          const x = xPos * width;\n          const y = height - (peak.value / maxValue) * height;\n          \n          // Check if peak is near the top of the graph (below a minimum distance from top)\n          const isNearTop = y < 60; // 60px from top\n          \n          // Draw a vertical line first (always visible)\n          ctx.strokeStyle = markerColor;\n          ctx.setLineDash([2, 2]);\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, height);\n          ctx.stroke();\n          ctx.setLineDash([]);\n          \n          // Draw marker at peak position (triangle pointing down or up based on position)\n          ctx.fillStyle = markerColor;\n          ctx.beginPath();\n          \n          if (isNearTop) {\n            // If near top, draw triangle pointing up from a position slightly below the peak\n            const markerY = y + 15;\n            ctx.moveTo(x, markerY);  \n            ctx.lineTo(x - 5, markerY + 10);\n            ctx.lineTo(x + 5, markerY + 10);\n          } else {\n            // Normal case - draw triangle pointing down\n            ctx.moveTo(x, y);  \n            ctx.lineTo(x - 5, y - 10);\n            ctx.lineTo(x + 5, y - 10);\n          }\n          ctx.closePath();\n          ctx.fill();\n          \n          // Prepare label text\n          let label;\n          if (useCalibration) {\n            const wavelength = positionToWavelength(peak.position);\n            label = `${wavelength.toFixed(1)}nm`;\n          } else {\n            label = `Pos: ${peak.position.toFixed(3)}`;\n          }\n          \n          const valueLabel = `I: ${peak.value.toFixed(1)}`;\n          \n          // Setup text rendering\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n          ctx.font = '10px monospace';\n          ctx.textAlign = 'center';\n          \n          // Measure text dimensions for backgrounds\n          const textWidth = ctx.measureText(label).width + 6;\n          const valueWidth = ctx.measureText(valueLabel).width + 6;\n          \n          if (isNearTop) {\n            // Draw position/wavelength label below the marker\n            const labelY = y + 30;\n            \n            // Draw text background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth/2, labelY - 10, textWidth, 16);\n            \n            // Draw label text\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, labelY);\n            \n            // Draw value label below that\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth/2, labelY + 7, valueWidth, 16);\n            \n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, labelY + 17);\n          } else {\n            // Standard label position above marker\n            // Draw text background for better readability\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth/2, y - 25, textWidth, 16);\n            \n            // Draw label above marker\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, y - 14);\n            \n            // Draw peak value\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth/2, y - 42, valueWidth, 16);\n            \n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, y - 31);\n          }\n        });\n      });\n    }\n    \n    // Draw crosshair at cursor position\n    if (showCrosshair && cursorPosition) {\n      const { x, y } = cursorPosition;\n      \n      if (x >= 0 && x <= width && y >= 0 && y <= height) {\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.setLineDash([3, 3]); // Dashed line\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n        \n        // Draw horizontal line\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset line style\n        \n        // Calculate and display wavelength at cursor position\n        const position = x / width; // Normalize cursor position (0-1)\n        \n        // Apply flip if needed to get the actual data position\n        const dataPosition = flipXAxis ? 1 - position : position;\n        \n        // Determine wavelength based on cursor position\n        let wavelength;\n        if (useCalibration) {\n          wavelength = positionToWavelength(dataPosition);\n        } else {\n          wavelength = dataPosition; // Just show the position value when not calibrated\n        }\n        \n        // Calculate y-values at the cursor position\n        let valueText = '';\n        \n        if (data && data.positions && data.positions.length > 0) {\n          // Find the nearest data point to the cursor\n          const positionIndex = findNearestPositionIndex(data.positions, dataPosition);\n          \n          // Build value text based on active channels\n          const channelTexts = [];\n          if (displayChannels.red) {\n            channelTexts.push(`R:${Math.round(data.red[positionIndex])}`);\n          }\n          if (displayChannels.green) {\n            channelTexts.push(`G:${Math.round(data.green[positionIndex])}`);\n          }\n          if (displayChannels.blue) {\n            channelTexts.push(`B:${Math.round(data.blue[positionIndex])}`);\n          }\n          if (displayChannels.intensity) {\n            channelTexts.push(`I:${data.intensity[positionIndex].toFixed(1)}`);\n          }\n          \n          valueText = channelTexts.join(', ');\n        }\n        \n        // Create a background for the text for better readability\n        const wavelengthText = useCalibration ? `${wavelength.toFixed(1)}nm` : `Pos: ${wavelength.toFixed(3)}`;\n        \n        // Draw text background\n        const textWidth = ctx.measureText(wavelengthText).width + 10;\n        const valueTextWidth = ctx.measureText(valueText).width + 10;\n        \n        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        ctx.fillRect(x - textWidth/2, height - 45, textWidth, 20);\n        \n        if (valueText) {\n          ctx.fillRect(x - valueTextWidth/2, 5, valueTextWidth, 20);\n        }\n        \n        // Draw wavelength text below cursor\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        ctx.textAlign = 'center';\n        ctx.fillText(wavelengthText, x, height - 30);\n        \n        // Draw value text above cursor\n        if (valueText) {\n          ctx.fillText(valueText, x, 20);\n        }\n      }\n    }\n  };\n  \n  // Helper to find the index of the nearest position value to a given position\n  const findNearestPositionIndex = (positions, targetPosition) => {\n    if (!positions || positions.length === 0) return -1;\n    \n    let nearestIndex = 0;\n    let minDistance = Math.abs(positions[0] - targetPosition);\n    \n    for (let i = 1; i < positions.length; i++) {\n      const distance = Math.abs(positions[i] - targetPosition);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestIndex = i;\n      }\n    }\n    \n    return nearestIndex;\n  };\n  \n  // Toggle display of a specific channel\n  const toggleChannel = (channel) => {\n    setDisplayChannels(prev => ({\n      ...prev,\n      [channel]: !prev[channel]\n    }));\n  };\n  \n  // Handle mouse movement over the graph\n  const handleMouseMove = (e) => {\n    if (!graphContainerRef.current) return;\n    \n    // Get canvas bounds\n    const rect = graphContainerRef.current.getBoundingClientRect();\n    \n    // Calculate cursor position relative to canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Update cursor position state\n    setCursorPosition({ x, y });\n    \n    // Redraw the graph with crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n  \n  // Handle mouse enter/leave events\n  const handleMouseEnter = () => {\n    setShowCrosshair(true);\n  };\n  \n  const handleMouseLeave = () => {\n    setShowCrosshair(false);\n    setCursorPosition(null);\n    \n    // Redraw the graph without crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n  \n  // Similar resize functionality as before\n  const handleResizeStart = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = graphContainerRef.current?.clientWidth || 400;\n    const startHeight = graphContainerRef.current?.clientHeight || graphSize.height;\n    \n    // Show resize feedback\n    setIsResizing(true);\n    setShowResizeInfo(true);\n    \n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaY = moveEvent.clientY - startY;\n      \n      // Only adjust height, keep width as 100%\n      const newHeight = Math.max(100, startHeight + deltaY);\n      \n      // Update graph size\n      const newSize = {\n        width: '100%',  // Keep width as 100% for responsive behavior\n        height: Math.round(newHeight)\n      };\n      \n      setGraphSize(newSize);\n      \n      // Notify parent if needed\n      if (onResize) {\n        onResize(newSize);\n      }\n      \n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n    \n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      \n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n    \n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      // fill this gap\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n  \n  // Export graph data as text file\n  const exportGraphData = () => {\n    // Make sure we have data to export\n    const dataToExport = isAccumulating ? accumulatedData : graphData;\n    \n    if (!dataToExport) {\n      console.warn('No data to export');\n      if (props.onMessage) {\n        props.onMessage('No data to export');\n      }\n      return;\n    }\n    \n    try {\n      const lines = [];\n      // Create a timestamp string with units separated by semicolons: YYYY;MM;DD;hh;mm;ss\n      const now = new Date();\n      const timestamp = now.getFullYear() + ';' +\n        String(now.getMonth() + 1).padStart(2, '0') + ';' +\n        String(now.getDate()).padStart(2, '0') + ';' +\n        String(now.getHours()).padStart(2, '0') + ';' +\n        String(now.getMinutes()).padStart(2, '0') + ';' +\n        String(now.getSeconds()).padStart(2, '0');\n        \n      lines.push(timestamp);\n      \n      // Add raw data metadata if available\n      if (dataToExport.isRawData) {\n        const bitDepth = dataToExport.bitDepth || 12;\n        const dataType = dataToExport.dataType || 'raw';\n        lines.push(`# RAW DATA: ${bitDepth}-bit, type: ${dataType}`);\n      }\n      \n      // Add information about frame accumulation\n      if (dataToExport.frameCount) {\n        lines.push(`# Accumulated frames: ${dataToExport.frameCount}`);\n      }\n      \n      // Add information about memorized data if available\n      if (memorizedData.length > 0) {\n        lines.push(`# Memory entries: ${memorizedData.length}`);\n      }\n      \n      // Add column headers with memory columns if available\n      let headers = useCalibration ? \n        \"Wavelength (nm);Intensity;Red;Green;Blue\" : \n        \"Position;Intensity;Red;Green;Blue\";\n      \n      // Add headers for memorized data\n      if (memorizedData.length > 0) {\n        memorizedData.forEach((_, index) => {\n          headers += `;Memory${index+1}_Intensity;Memory${index+1}_Red;Memory${index+1}_Green;Memory${index+1}_Blue`;\n        });\n      }\n      \n      lines.push(headers);\n      \n      // Loop through data points\n      for (let i = 0; i < dataToExport.positions.length; i++) {\n        let position = dataToExport.positions[i];\n        // Convert position to wavelength if calibration is enabled\n        let wavelength = position;\n        if (useCalibration) {\n          wavelength = positionToWavelength(position);\n        }\n        \n        // Get all channel values for current data\n        const intensity = dataToExport.intensity[i];\n        const red = dataToExport.red[i];\n        const green = dataToExport.green[i];\n        const blue = dataToExport.blue[i];\n        \n        // Start the line with current data\n        let line = `${wavelength.toFixed(3)};${intensity.toFixed(2)};${red.toFixed(2)};${green.toFixed(2)};${blue.toFixed(2)}`;\n        \n        // Add memorized data if available\n        if (memorizedData.length > 0) {\n          memorizedData.forEach(memData => {\n            // Find the closest position in the memorized data\n            const memIndex = findNearestPositionIndex(memData.positions, position);\n            if (memIndex >= 0) {\n              const memIntensity = memData.intensity[memIndex];\n              const memRed = memData.red[memIndex];\n              const memGreen = memData.green[memIndex];\n              const memBlue = memData.blue[memIndex];\n              \n              // Add to the line\n              line += `;${memIntensity.toFixed(2)};${memRed.toFixed(2)};${memGreen.toFixed(2)};${memBlue.toFixed(2)}`;\n            } else {\n              // If no matching position found, add empty values\n              line += `;0;0;0;0`;\n            }\n          });\n        }\n        \n        // Add line with all values\n        lines.push(line);\n      }\n      \n      // Join lines with newlines\n      const content = lines.join('\\n');\n      \n      // Create filename with prefix and optional timestamp\n      // For raw data, add raw indicator to filename\n      let fileName = '';\n      if (dataToExport.isRawData) {\n        fileName = includeDateInFilename ? \n          `${filePrefix}_RAW${dataToExport.bitDepth || 12}bit_${timestamp}.txt` : \n          `${filePrefix}_RAW${dataToExport.bitDepth || 12}bit.txt`;\n      } else {\n        fileName = includeDateInFilename ? \n          `${filePrefix}_${timestamp}.txt` : \n          `${filePrefix}.txt`;\n      }\n      \n      // Create Blob with content\n      const blob = new Blob([content], { type: 'text/plain' });\n      \n      // Create download link\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      \n      // Append to document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n      \n      // Show success message\n      if (props.onMessage) {\n        props.onMessage(`Data exported as ${fileName}`);\n      } else {\n        // If no message handler provided, show alert\n        console.log(`Data exported as ${fileName}`);\n        setSaveMessage && setSaveMessage(`Data exported as ${fileName}`);\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n      \n    } catch (error) {\n      console.error('Failed to export graph data:', error);\n      if (props.onMessage) {\n        props.onMessage('Error exporting data');\n      } else {\n        setSaveMessage && setSaveMessage('Error exporting data');\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    }\n  };\n  \n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    // fill this gap\n  };\n  \n  // Handle peak count change\n  const handlePeakCountChange = (e) => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count >= 0 && count <= 10) {\n      setPeakCount(count);\n    }\n  };\n  \n  // Toggle peak markers\n  const togglePeakMarkers = () => {\n    setShowPeakMarkers(!showPeakMarkers);\n  };\n  \n  const styles = {\n    container: {\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      padding: '10px',\n      borderRadius: '4px',\n      position: 'relative',\n      border: isResizing ? '1px dashed #4CAF50' : 'none',\n    },\n    title: {\n      margin: '0 0 10px 0',\n      fontSize: '14px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    controls: {\n      display: 'flex',\n      gap: '5px',\n      alignItems: 'center',\n    },\n    frameCountControl: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '10px',\n      gap: '8px'\n    },\n    frameCountLabel: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.8)'\n    },\n    frameCountInput: {\n      width: '50px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '12px'\n    },\n    calibrationContainer: {\n      marginBottom: '10px',\n      padding: '8px',\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      borderRadius: '4px'\n    },\n    calibrationHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '8px'\n    },\n    calibrationTitle: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.9)',\n      margin: 0\n    },\n    calibrationCheckbox: {\n      marginLeft: '8px'\n    },\n    calibrationPoints: {\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      gap: '10px'\n    },\n    calibrationPointsColumn: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '6px'\n    },\n    calibrationPointsRow: {\n      display: 'flex', \n      alignItems: 'center',\n      gap: '6px'\n    },\n    calibrationLabel: {\n      fontSize: '11px',\n      color: 'rgba(255, 255, 255, 0.7)',\n      width: '40px'\n    },\n    calibrationInput: {\n      width: '60px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '11px'\n    },\n    graphView: {\n      width: graphSize.width,\n      height: `${graphSize.height}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    canvas: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    resizeHandle: {\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      width: '20px',\n      height: '20px',\n      cursor: 'ns-resize', // Only allow vertical resizing\n      zIndex: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\n      borderTopLeftRadius: '4px',\n    },\n    resizeInfo: {\n      position: 'absolute',\n      right: '25px',\n      bottom: '25px',\n      padding: '2px 6px',\n      background: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '3px',\n      fontSize: '11px',\n      zIndex: 100\n    },\n    channelToggles: {\n      display: 'flex',\n      gap: '5px'\n    },\n    channelButton: {\n      fontSize: '10px',\n      padding: '2px 5px',\n      borderRadius: '3px',\n      cursor: 'pointer',\n      border: '1px solid rgba(255, 255, 255, 0.3)',\n      backgroundColor: 'rgba(30, 30, 30, 0.7)'\n    },\n    noData: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      color: 'rgba(255, 255, 255, 0.5)',\n      fontSize: '12px'\n    },\n    memoryButton: {\n      ...buttonVariants.smallIconButton,\n      backgroundColor: 'rgba(100, 160, 100, 0.7)',\n      marginRight: '5px',\n      fontSize: '11px',\n      padding: '3px 6px'\n    },\n    memoryButtons: {\n      display: 'flex',\n      alignItems: 'center',\n      marginRight: '5px',\n      borderRight: '1px solid rgba(255, 255, 255, 0.2)',\n      paddingRight: '5px'\n    },\n    memoryCount: {\n      fontSize: '10px',\n      backgroundColor: 'rgba(80, 120, 80, 0.5)',\n      padding: '1px 5px',\n      borderRadius: '10px',\n      marginLeft: '5px'\n    }\n  };\n  \n  // Return the component JSX\n  return (\n    <div style={styles.container}>\n      <div style={styles.title}>\n        <h3 style={{ margin: 0 }}>Intensity Graph</h3>\n        <div style={styles.channelToggles}>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.4)',\n              borderColor: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.2)'\n            }}\n            onClick={() => toggleChannel('red')}\n          >\n            R\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.4)',\n              borderColor: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.2)'\n            }}\n            onClick={() => toggleChannel('green')}\n          >\n            G\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.4)',\n              borderColor: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.2)'\n            }}\n            onClick={() => toggleChannel('blue')}\n          >\n            B\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.4)',\n              borderColor: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.2)'\n            }}\n            onClick={() => toggleChannel('intensity')}\n          >\n            I\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: 'rgb(255, 255, 100)',\n              borderColor: showCalibration ? 'rgb(255, 255, 100)' : 'rgba(255, 255, 100, 0.2)',\n              backgroundColor: showCalibration ? 'rgba(60, 60, 0, 0.6)' : 'rgba(30, 30, 30, 0.7)'\n            }}\n            onClick={toggleCalibration}\n            title=\"Toggle calibration controls\"\n          >\n            Cal\n          </button>\n        </div>\n      </div>\n      \n      <div style={styles.frameCountControl}>\n        <div style={styles.frameCountLabel}>Frame accumulation:</div>\n        <input \n          type=\"number\" \n          min=\"1\" \n          max=\"2000\"\n          value={frameAccumCount}\n          onChange={handleFrameCountChange}\n          style={styles.frameCountInput}\n        />\n        <button \n          style={{\n            ...buttonVariants.smallIconButton,\n            backgroundColor: isAccumulating ? 'rgba(255, 165, 0, 0.7)' : undefined\n          }}\n          onClick={toggleAccumulation}\n          title={isAccumulating ? \"Switch to live data\" : \"Switch to frame accumulation\"}\n        >\n          {isAccumulating ? \"Accumulating\" : \"Live\"}\n        </button>\n\n        {/*button that pauses graph*/}\n        \n        {/* Peak markers control */}\n        <div style={{ \n          display: 'flex', \n          alignItems: 'center', \n          gap: '5px',\n          marginLeft: '20px',\n          borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n          paddingLeft: '10px'\n        }}>\n          <div style={styles.frameCountLabel}>Peak markers:</div>\n          <input \n            type=\"number\" \n            min=\"0\" \n            max=\"10\"\n            value={peakCount}\n            onChange={handlePeakCountChange}\n            style={styles.frameCountInput}\n            title=\"Number of peak markers to display\"\n          />\n          <button \n            style={{\n              ...buttonVariants.smallIconButton,\n              backgroundColor: showPeakMarkers ? 'rgba(120, 120, 220, 0.7)' : undefined\n            }}\n            onClick={togglePeakMarkers}\n            title={showPeakMarkers ? \"Hide peak markers\" : \"Show peak markers\"}\n          >\n            {showPeakMarkers ? \"Peaks On\" : \"Peaks Off\"}\n          </button>\n        </div>\n        \n        {/* Add export controls */}\n        <div style={{ display: 'flex', marginLeft: 'auto', alignItems: 'center', gap: '5px' }}>\n          {/* Add memory buttons */}\n          <div style={styles.memoryButtons}>\n            <button\n              style={styles.memoryButton}\n              onClick={addToMemory}\n              title=\"Save current graph data to memory\"\n              disabled={!graphData && !accumulatedData}\n            >\n              To Memory\n            </button>\n            <button\n              style={{\n                ...styles.memoryButton,\n                backgroundColor: 'rgba(180, 80, 80, 0.7)'\n              }}\n              onClick={clearMemory}\n              title=\"Clear all memorized data\"\n              disabled={memorizedData.length === 0}\n            >\n              Clear Memory\n            </button>\n            {memorizedData.length > 0 && (\n              <span style={styles.memoryCount}>\n                {memorizedData.length}\n              </span>\n            )}\n          </div>\n          \n          <input\n            type=\"text\"\n            value={filePrefix}\n            onChange={(e) => setFilePrefix(e.target.value)}\n            placeholder=\"File prefix\"\n            style={{\n              ...styles.frameCountInput,\n              width: '100px'\n            }}\n            title=\"Prefix for the exported data filename\"\n          />\n          <label style={{ \n            fontSize: '11px', \n            color: 'rgba(255, 255, 255, 0.7)', \n            display: 'flex', \n            alignItems: 'center',\n            gap: '3px',\n            marginRight: '5px'\n          }}>\n            <input \n              type=\"checkbox\" \n              checked={includeDateInFilename}\n              onChange={(e) => setIncludeDateInFilename(e.target.checked)}\n              style={{ margin: 0 }}\n            />\n            Date\n          </label>\n          <button\n            style={{\n              ...buttonVariants.smallSecondary,\n              backgroundColor: 'rgba(20, 120, 220, 0.7)'\n            }}\n            onClick={exportGraphData}\n            title=\"Export graph data as text file\"\n            disabled={!graphData && !accumulatedData}\n          >\n            💾 Export Data\n          </button>\n          \n          {saveMessage && (\n            <span style={{\n              fontSize: '11px',\n              backgroundColor: 'rgba(0, 0, 0, 0.6)',\n              padding: '2px 6px',\n              borderRadius: '3px',\n              marginLeft: '5px',\n              color: 'rgba(255, 255, 255, 0.9)'\n            }}>\n              {saveMessage}\n            </span>\n          )}\n        </div>\n      </div>\n      \n      {showCalibration && (\n        <div style={styles.calibrationContainer}>\n          <div style={styles.calibrationHeader}>\n            <h4 style={styles.calibrationTitle}>Wavelength Calibration</h4>\n            <div>\n              <label style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)' }}>\n                <input \n                  type=\"checkbox\" \n                  checked={useCalibration}\n                  onChange={toggleUseCalibration}\n                  style={styles.calibrationCheckbox}\n                />\n                Use Calibration\n              </label>\n            </div>\n          </div>\n          \n          <div style={styles.calibrationPoints}>\n            <div style={styles.calibrationPointsColumn}>\n              {calibrationPoints.map((point, index) => (\n                <div key={`point-${index}`} style={styles.calibrationPointsRow}>\n                  <div style={styles.calibrationLabel}>Point {index+1}:</div>\n                </div>\n              ))}\n            </div>\n            \n            <div style={styles.calibrationPointsColumn}>\n              {calibrationPoints.map((point, index) => (\n                <div key={`pos-${index}`} style={styles.calibrationPointsRow}>\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginRight: '4px' }}>Pos:</span>\n                  <input \n                    type=\"number\" \n                    min=\"0\" \n                    max=\"1\" \n                    step=\"0.0001\"\n                    value={point.position}\n                    onChange={(e) => updateCalibrationPoint(index, 'position', e.target.value)}\n                    style={styles.calibrationInput}\n                  />\n                </div>\n              ))}\n            </div>\n            \n            <div style={styles.calibrationPointsColumn}>\n              {calibrationPoints.map((point, index) => (\n                <div key={`wavelength-${index}`} style={styles.calibrationPointsRow}>\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginRight: '4px' }}>λ:</span>\n                  <input \n                    type=\"number\" \n                    min=\"200\" \n                    max=\"1200\" \n                    step=\"0.01\"\n                    value={point.wavelength}\n                    onChange={(e) => updateCalibrationPoint(index, 'wavelength', e.target.value)}\n                    style={styles.calibrationInput}\n                  />\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginLeft: '2px' }}>nm</span>\n                </div>\n              ))}\n            </div>\n            \n            <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center' }}>\n              <label style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', display: 'flex', alignItems: 'center' }}>\n                <input \n                  type=\"checkbox\" \n                  checked={flipXAxis}\n                  onChange={toggleFlipXAxis}\n                  style={{ marginRight: '5px' }}\n                />\n                Flip X-Axis\n              </label>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div \n        ref={graphContainerRef}\n        style={styles.graphView}\n        onMouseMove={handleMouseMove}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <canvas\n          ref={canvasRef}\n          style={styles.canvas}\n        />\n        \n        {!graphData && !accumulatedData && (\n          <div style={styles.noData}>\n            Draw a line on the camera feed to see intensity data\n          </div>\n        )}\n        \n        {/* Resize info overlay */}\n        {showResizeInfo && (\n          <div style={styles.resizeInfo}>\n            Height: {graphSize.height}px\n          </div>\n        )}\n        \n        {/* Resize handle */}\n        <div \n          style={styles.resizeHandle}\n          onMouseDown={handleResizeStart}\n          title=\"Resize graph height\"\n        >\n          <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\">\n            <path \n              d=\"M2,6 L10,6 M2,9 L10,9\" \n              stroke=\"white\" \n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n            />\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n});\n\n// Add display name for debugging\nGraphComponent.displayName = 'GraphComponent';\n\nexport default GraphComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}