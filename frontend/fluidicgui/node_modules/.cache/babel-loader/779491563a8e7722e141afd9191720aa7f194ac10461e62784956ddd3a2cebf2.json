{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\SpectrometerMQTT\\\\MQTTGraphComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = /*#__PURE__*/_s(/*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    onResize,\n    lineData,\n    onFrameAccumCountChange,\n    onAccumulationToggle\n  } = props;\n  const buttonVariants = useButtonStyles();\n  const [graphSize, setGraphSize] = useState({\n    width: '100%',\n    height: 200\n  });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [displayChannels, setDisplayChannels] = useState({\n    red: false,\n    green: false,\n    blue: false,\n    intensity: true\n  });\n  const [graphData, setGraphData] = useState(null);\n\n  // Memory for storing graph data\n  const [memorizedData, setMemorizedData] = useState([]);\n\n  // Cursor tracking state\n  const [cursorPosition, setCursorPosition] = useState(null);\n  const [showCrosshair, setShowCrosshair] = useState(false);\n\n  // Frame accumulation state - internally managed but synced with parent\n  const [frameAccumCount, setFrameAccumCount] = useState(10); // Default to 10 frames\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\n  const [accumulatedData, setAccumulatedData] = useState(null);\n  const [isAccumulating, setIsAccumulating] = useState(false);\n\n  // Export file name prefix\n  const [filePrefix, setFilePrefix] = useState('spectrum');\n  const [includeDateInFilename, setIncludeDateInFilename] = useState(true);\n\n  // Status message for operations\n  const [saveMessage, setSaveMessage] = useState('');\n\n  // Peak detection state\n  const [showPeakMarkers, setShowPeakMarkers] = useState(true);\n  const [peakCount, setPeakCount] = useState(3); // Default to showing top 3 peaks\n\n  // Calibration state\n  const [showCalibration, setShowCalibration] = useState(false);\n  const [calibrationPoints, setCalibrationPoints] = useState([{\n    position: 0.25000,\n    wavelength: 450.0\n  }, {\n    position: 0.75000,\n    wavelength: 650.0\n  }]);\n  const [useCalibration, setUseCalibration] = useState(false);\n  const [flipXAxis, setFlipXAxis] = useState(false);\n  const graphContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    getCalibrationSettings: () => ({\n      calibrationPoints: [...calibrationPoints],\n      useCalibration,\n      flipXAxis\n    }),\n    applyCalibrationSettings: settings => {\n      if (!settings) return false;\n      try {\n        if (settings.calibrationPoints && Array.isArray(settings.calibrationPoints)) {\n          setCalibrationPoints(settings.calibrationPoints);\n        }\n        if (typeof settings.useCalibration === 'boolean') {\n          setUseCalibration(settings.useCalibration);\n          if (settings.useCalibration) {\n            setShowCalibration(true);\n          }\n        }\n        if (typeof settings.flipXAxis === 'boolean') {\n          setFlipXAxis(settings.flipXAxis);\n        }\n        return true;\n      } catch (error) {\n        console.error('Error applying calibration settings:', error);\n        return false;\n      }\n    },\n    getPeakSettings: () => ({\n      count: peakCount,\n      showMarkers: showPeakMarkers\n    }),\n    applyPeakSettings: settings => {\n      if (!settings) return false;\n      try {\n        if (typeof settings.count === 'number') {\n          setPeakCount(settings.count);\n        }\n        if (typeof settings.showMarkers === 'boolean') {\n          setShowPeakMarkers(settings.showMarkers);\n        }\n        return true;\n      } catch (error) {\n        console.error('Error applying peak settings:', error);\n        return false;\n      }\n    }\n  }));\n\n  // Update graph when line data changes\n  useEffect(() => {\n    if (lineData !== null && lineData !== void 0 && lineData.pixelData) {\n      // Always keep the latest raw frame data for display when not accumulating\n      setGraphData(lineData.pixelData);\n      if (isAccumulating) {\n        // Add new frame to accumulation buffer\n        setAccumulatedFrames(prev => {\n          const newFrames = [...prev, lineData.pixelData];\n\n          // If we've reached our target frame count, process the accumulated data\n          if (newFrames.length >= frameAccumCount) {\n            // Sum the color data across all frames\n            const summedData = sumFrameData(newFrames);\n\n            // Update accumulated data state\n            setAccumulatedData(summedData);\n\n            // Draw the accumulated data\n            drawGraph(summedData);\n\n            // Reset the accumulation buffer\n            return [];\n          }\n          return newFrames;\n        });\n      } else {\n        // If not accumulating, just display the raw frame\n        drawGraph(lineData.pixelData);\n      }\n    }\n  }, [lineData, isAccumulating, frameAccumCount, useCalibration, calibrationPoints, flipXAxis]);\n\n  // When accumulated data changes, draw it\n  useEffect(() => {\n    if (accumulatedData && isAccumulating) {\n      drawGraph(accumulatedData);\n    }\n  }, [accumulatedData, useCalibration, calibrationPoints, flipXAxis]);\n\n  // Function to add current data to memory\n  const addToMemory = () => {\n    const dataToMemorize = isAccumulating ? accumulatedData : graphData;\n    if (!dataToMemorize) {\n      setSaveMessage('No data to memorize');\n      setTimeout(() => setSaveMessage(''), 3000);\n      return;\n    }\n\n    // Create a copy of the data with a timestamp\n    const memorizedItem = {\n      ...dataToMemorize,\n      memoryTimestamp: new Date().toISOString()\n    };\n\n    // Add to memory array\n    setMemorizedData(prev => [...prev, memorizedItem]);\n    setSaveMessage(`Data added to memory (${memorizedData.length + 1} items)`);\n    setTimeout(() => setSaveMessage(''), 3000);\n  };\n\n  // Function to clear memory\n  const clearMemory = () => {\n    setMemorizedData([]);\n    setSaveMessage('Memory cleared');\n    setTimeout(() => setSaveMessage(''), 3000);\n  };\n\n  // Sum pixel data across multiple frames\n  const sumFrameData = frames => {\n    if (!frames.length) return null;\n\n    // Use the first frame as a template for structure\n    const template = frames[0];\n\n    // Initialize arrays for summed values\n    const summedRed = Array(template.red.length).fill(0);\n    const summedGreen = Array(template.green.length).fill(0);\n    const summedBlue = Array(template.blue.length).fill(0);\n    const summedIntensity = Array(template.intensity.length).fill(0);\n\n    // Sum values across all frames\n    frames.forEach(frame => {\n      frame.red.forEach((val, i) => summedRed[i] += val);\n      frame.green.forEach((val, i) => summedGreen[i] += val);\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\n      frame.intensity.forEach((val, i) => summedIntensity[i] += val);\n    });\n\n    // Return the summed data structure\n    return {\n      timestamp: Date.now(),\n      positions: template.positions,\n      // Positions remain the same\n      red: summedRed,\n      green: summedGreen,\n      blue: summedBlue,\n      intensity: summedIntensity,\n      lineLength: template.lineLength,\n      frameCount: frames.length // Add count of frames that were summed\n    };\n  };\n\n  // Convert position to wavelength using calibration points\n  const positionToWavelength = position => {\n    if (!useCalibration || calibrationPoints.length < 2) {\n      return position;\n    }\n\n    // Sort calibration points by position\n    const sortedPoints = [...calibrationPoints].sort((a, b) => a.position - b.position);\n\n    // Find the two calibration points that surround the given position\n    let p1, p2;\n    for (let i = 0; i < sortedPoints.length - 1; i++) {\n      if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\n        p1 = sortedPoints[i];\n        p2 = sortedPoints[i + 1];\n        break;\n      }\n    }\n\n    // If position is outside the calibration range, use extrapolation\n    if (!p1 || !p2) {\n      if (position < sortedPoints[0].position) {\n        // Extrapolate below the first point\n        // Use the first two points for the slope calculation\n        p1 = sortedPoints[0];\n        p2 = sortedPoints[1];\n        // Calculate the slope between first two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p1.wavelength + slope * (position - p1.position);\n      } else {\n        // Extrapolate above the last point\n        // Use the last two points for the slope calculation\n        p1 = sortedPoints[sortedPoints.length - 2];\n        p2 = sortedPoints[sortedPoints.length - 1];\n        // Calculate the slope between last two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p2.wavelength + slope * (position - p2.position);\n      }\n    }\n\n    // Linear interpolation between the two calibration points\n    const t = (position - p1.position) / (p2.position - p1.position);\n    return p1.wavelength + t * (p2.wavelength - p1.wavelength);\n  };\n\n  // Handle changing the frame accumulation count\n  const handleFrameCountChange = e => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count > 0) {\n      setFrameAccumCount(count);\n      // Reset accumulation when count changes\n      setAccumulatedFrames([]);\n      setAccumulatedData(null);\n\n      // Notify parent of change\n      if (onFrameAccumCountChange) {\n        onFrameAccumCountChange(count);\n      }\n    }\n  };\n\n  // Toggle accumulation mode\n  const toggleAccumulation = () => {\n    const newValue = !isAccumulating;\n    setIsAccumulating(newValue);\n    // Reset accumulated data when toggling\n    setAccumulatedFrames([]);\n    setAccumulatedData(null);\n\n    // Notify parent of change\n    if (onAccumulationToggle) {\n      onAccumulationToggle(newValue);\n    }\n  };\n\n  // Toggle calibration controls\n  const toggleCalibration = () => {\n    setShowCalibration(!showCalibration);\n  };\n\n  // Toggle using calibration\n  const toggleUseCalibration = () => {\n    setUseCalibration(!useCalibration);\n  };\n\n  // Toggle flip X axis\n  const toggleFlipXAxis = () => {\n    setFlipXAxis(!flipXAxis);\n  };\n\n  // Update calibration point\n  const updateCalibrationPoint = (index, field, value) => {\n    const numValue = parseFloat(value);\n    if (isNaN(numValue)) return;\n\n    // Format position values to 3 decimal places\n    const formattedValue = field === 'position' ? parseFloat(numValue.toFixed(3)) : numValue;\n    setCalibrationPoints(points => {\n      const newPoints = [...points];\n      newPoints[index] = {\n        ...newPoints[index],\n        [field]: formattedValue\n      };\n      return newPoints;\n    });\n  };\n\n  // Initialize and resize the canvas when graph size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const container = graphContainerRef.current;\n      if (container) {\n        // Set canvas size to match container\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n\n        // Redraw graph with new size\n        if (isAccumulating && accumulatedData) {\n          drawGraph(accumulatedData);\n        } else if (graphData) {\n          drawGraph(graphData);\n        }\n      }\n    }\n  }, [graphSize, graphData, accumulatedData, isAccumulating, useCalibration, calibrationPoints, flipXAxis]);\n\n  // Find peaks in data array\n  const findPeaks = (values, positions, count = 3) => {\n    if (!values || values.length < 3) return [];\n\n    // Find local maxima (points higher than both neighbors)\n    const peaks = [];\n    for (let i = 1; i < values.length - 1; i++) {\n      if (values[i] > values[i - 1] && values[i] > values[i + 1]) {\n        // This is a local maximum\n        const peak = {\n          index: i,\n          position: positions[i],\n          value: values[i]\n        };\n\n        // Refine position using quadratic interpolation for better accuracy\n        try {\n          // Based on three points around the peak\n          const x1 = positions[i - 1];\n          const x2 = positions[i];\n          const x3 = positions[i + 1];\n          const y1 = values[i - 1];\n          const y2 = values[i];\n          const y3 = values[i + 1];\n\n          // Only apply refinement if we have valid neighboring points\n          const denom = (x1 - x2) * (x1 - x3) * (x2 - x3);\n          if (denom !== 0) {\n            // Quadratic interpolation formula\n            const A = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom;\n            const B = (x3 * x3 * (y1 - y2) + x2 * x2 * (y3 - y1) + x1 * x1 * (y2 - y3)) / denom;\n\n            // Calculate refined x position at the peak of the parabola\n            if (A !== 0) {\n              const refinedPos = -B / (2 * A);\n\n              // Only use refined position if it's within a reasonable range\n              if (refinedPos >= x1 && refinedPos <= x3) {\n                peak.refinedPosition = refinedPos;\n              }\n            }\n          }\n        } catch (e) {\n          console.warn('Error during peak refinement', e);\n          // If refinement fails, use the original position\n        }\n        peaks.push(peak);\n      }\n    }\n\n    // Sort peaks by value (descending)\n    peaks.sort((a, b) => b.value - a.value);\n\n    // Filter peaks to ensure they're at least 10nm apart (or equivalent in position space)\n    const filteredPeaks = [];\n\n    // Default position-based distance (approximately 5% of the position range)\n    const minPositionDistance = 0.05;\n    for (const peak of peaks) {\n      // Check if this peak is too close to any already-selected stronger peak\n      let tooClose = false;\n      for (const selectedPeak of filteredPeaks) {\n        // Use position-based distance (wavelength conversion will happen in the drawing code)\n        const distance = Math.abs(peak.position - selectedPeak.position);\n        if (distance < minPositionDistance) {\n          tooClose = true;\n          break;\n        }\n      }\n\n      // Add the peak if it's not too close to any stronger peak\n      if (!tooClose) {\n        filteredPeaks.push(peak);\n\n        // Stop if we have enough peaks\n        if (filteredPeaks.length >= count) {\n          break;\n        }\n      }\n    }\n    return filteredPeaks;\n  };\n\n  // Draw the graph based on pixel data\n  const drawGraph = data => {\n    if (!canvasRef.current || !data) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Draw background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n\n    // Horizontal grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const y = height * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n    }\n\n    // Vertical grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const x = width * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n    }\n\n    // Calculate min and max wavelength values for calibration upfront\n    let minWavelength, maxWavelength;\n    if (useCalibration && calibrationPoints.length >= 2) {\n      const wavelengths = calibrationPoints.map(p => p.wavelength);\n      minWavelength = Math.min(...wavelengths);\n      maxWavelength = Math.max(...wavelengths);\n    }\n\n    // Set line styles for different channels\n    const styles = {\n      red: {\n        color: 'rgba(255, 0, 0, 0.8)',\n        width: 1.5\n      },\n      green: {\n        color: 'rgba(0, 255, 0, 0.8)',\n        width: 1.5\n      },\n      blue: {\n        color: 'rgba(0, 0, 255, 0.8)',\n        width: 1.5\n      },\n      intensity: {\n        color: 'rgba(255, 255, 255, 0.8)',\n        width: 2\n      }\n    };\n\n    // Find max values for scaling\n    const maxRed = Math.max(...data.red, 1);\n    const maxGreen = Math.max(...data.green, 1);\n    const maxBlue = Math.max(...data.blue, 1);\n    const maxIntensity = Math.max(...data.intensity, 1);\n\n    // Store the peak data for each displayed channel\n    const channelPeaks = {};\n\n    // Plot each enabled channel\n    Object.entries(displayChannels).forEach(([channel, isEnabled]) => {\n      if (!isEnabled) return;\n      const values = data[channel];\n      const maxValue = channel === 'red' ? maxRed : channel === 'green' ? maxGreen : channel === 'blue' ? maxBlue : maxIntensity;\n\n      // Set line style\n      ctx.strokeStyle = styles[channel].color;\n      ctx.lineWidth = styles[channel].width;\n\n      // Begin the path\n      ctx.beginPath();\n\n      // Draw the line\n      for (let i = 0; i < values.length; i++) {\n        // Calculate x position, applying flip if enabled\n        let xPos = data.positions[i];\n        if (flipXAxis) {\n          xPos = 1 - xPos; // Invert position (0 becomes 1, 1 becomes 0)\n        }\n\n        // Convert to pixel coordinates\n        const x = xPos * width;\n\n        // Invert Y since canvas 0,0 is top-left\n        const y = height - values[i] / maxValue * height;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n\n      // Draw the path\n      ctx.stroke();\n    });\n\n    // Detect peaks for intensity channel only if enabled\n    if (showPeakMarkers && displayChannels.intensity) {\n      const intensityValues = data.intensity;\n      // Use original positions for peak detection\n      const peaks = findPeaks(intensityValues, data.positions, peakCount);\n\n      // If calibration is enabled, perform additional wavelength-based filtering\n      if (useCalibration) {\n        // Convert positions to wavelengths and filter to ensure 10nm minimum distance\n        const wavelengthPeaks = [];\n\n        // Process peaks in order of intensity (already sorted by findPeaks)\n        for (const peak of peaks) {\n          const peakWavelength = positionToWavelength(peak.position);\n          let tooClose = false;\n\n          // Check if this peak is too close to any already selected peak\n          for (const selectedPeak of wavelengthPeaks) {\n            const selectedWavelength = positionToWavelength(selectedPeak.position);\n            const distance = Math.abs(peakWavelength - selectedWavelength);\n            if (distance < 10) {\n              // 10nm minimum distance\n              tooClose = true;\n              break;\n            }\n          }\n\n          // Add the peak if it's not too close to any already selected peak\n          if (!tooClose) {\n            wavelengthPeaks.push(peak);\n          }\n        }\n        channelPeaks['intensity'] = wavelengthPeaks;\n      } else {\n        channelPeaks['intensity'] = peaks;\n      }\n    }\n\n    // Draw timestamp and status information\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.font = '10px monospace';\n    ctx.textAlign = 'left';\n\n    // Show time and accumulation status\n    const timeText = `Time: ${new Date(data.timestamp).toLocaleTimeString()}`;\n    const statusText = isAccumulating ? `Accumulating: ${accumulatedFrames.length}/${frameAccumCount} frames` : 'Live data';\n    ctx.fillText(timeText, 5, 15);\n    ctx.fillText(statusText, width - 150, 15);\n\n    // Draw calibration status if enabled\n    if (useCalibration) {\n      ctx.fillText('Calibrated', width - 150, 45);\n    }\n\n    // Draw frame count if this is accumulated data\n    if (data.frameCount) {\n      ctx.fillText(`Summed ${data.frameCount} frames`, width - 150, 30);\n    }\n\n    // Draw channel legend\n    const legendStartY = 30;\n    const legendSpacing = 15;\n    if (displayChannels.red) {\n      ctx.fillStyle = styles.red.color;\n      ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)}`, 5, legendStartY);\n    }\n    if (displayChannels.green) {\n      ctx.fillStyle = styles.green.color;\n      ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)}`, 5, legendStartY + legendSpacing);\n    }\n    if (displayChannels.blue) {\n      ctx.fillStyle = styles.blue.color;\n      ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)}`, 5, legendStartY + legendSpacing * 2);\n    }\n    if (displayChannels.intensity) {\n      ctx.fillStyle = styles.intensity.color;\n      ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)}`, 5, legendStartY + legendSpacing * 3);\n    }\n\n    // Draw wavelength axis labels if calibration is enabled (unified section)\n    if (useCalibration && minWavelength !== undefined && maxWavelength !== undefined) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.font = '10px monospace';\n      ctx.textAlign = 'center';\n\n      // Clear the bottom area where labels will go\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'; // Match background color\n      ctx.fillRect(0, height - 20, width, 20);\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'; // Reset text color\n\n      // Draw axis labels at regular position intervals (0%, 25%, 50%, 75%, 100%)\n      // but show the corresponding wavelength values\n      for (let i = 0; i <= 4; i++) {\n        const position = i / 4; // Regular positions (0, 0.25, 0.5, 0.75, 1)\n\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - position : position;\n        const x = displayPosition * width;\n\n        // Convert position to wavelength using calibration\n        const wavelength = positionToWavelength(position);\n        ctx.fillText(`${Math.round(wavelength)}nm`, x, height - 5);\n      }\n    }\n\n    // Draw calibration points if enabled\n    if (useCalibration) {\n      calibrationPoints.forEach(point => {\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - point.position : point.position;\n        // Draw vertical line at calibration point position\n        const x = displayPosition * width;\n        ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n\n        // Draw wavelength label at the calibration point\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\n        ctx.font = '10px monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${point.wavelength}nm`, x, height - 20); // Higher position to avoid overlap\n      });\n    }\n\n    // Draw peak markers if enabled\n    if (showPeakMarkers) {\n      // Draw peaks for each enabled channel\n      Object.entries(channelPeaks).forEach(([channel, peaks]) => {\n        // Use the same color as the channel with increased opacity\n        const baseColor = styles[channel].color;\n        const markerColor = baseColor.replace('rgba', 'rgb').replace(/,\\s*[\\d.]+\\)/, ')');\n\n        // Get max value for this channel for y-coordinate calculation\n        const maxValue = channel === 'red' ? maxRed : channel === 'green' ? maxGreen : channel === 'blue' ? maxBlue : maxIntensity;\n        peaks.forEach(peak => {\n          // Get the original position\n          let xPos = peak.position;\n\n          // Use refined position if available (within reasonable bounds)\n          if (peak.refinedPosition !== undefined) {\n            xPos = peak.refinedPosition;\n          }\n\n          // Apply flip if enabled\n          if (flipXAxis) {\n            xPos = 1 - xPos;\n          }\n\n          // Convert to pixel coordinates\n          const x = xPos * width;\n          const y = height - peak.value / maxValue * height;\n\n          // Check if peak is near the top of the graph (below a minimum distance from top)\n          const isNearTop = y < 60; // 60px from top\n\n          // Draw a vertical line first (always visible)\n          ctx.strokeStyle = markerColor;\n          ctx.setLineDash([2, 2]);\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, height);\n          ctx.stroke();\n          ctx.setLineDash([]);\n\n          // Draw marker at peak position (triangle pointing down or up based on position)\n          ctx.fillStyle = markerColor;\n          ctx.beginPath();\n          if (isNearTop) {\n            // If near top, draw triangle pointing up from a position slightly below the peak\n            const markerY = y + 15;\n            ctx.moveTo(x, markerY);\n            ctx.lineTo(x - 5, markerY + 10);\n            ctx.lineTo(x + 5, markerY + 10);\n          } else {\n            // Normal case - draw triangle pointing down\n            ctx.moveTo(x, y);\n            ctx.lineTo(x - 5, y - 10);\n            ctx.lineTo(x + 5, y - 10);\n          }\n          ctx.closePath();\n          ctx.fill();\n\n          // Prepare label text\n          let label;\n          if (useCalibration) {\n            const wavelength = positionToWavelength(peak.position);\n            label = `${wavelength.toFixed(1)}nm`;\n          } else {\n            label = `Pos: ${peak.position.toFixed(3)}`;\n          }\n          const valueLabel = `I: ${peak.value.toFixed(1)}`;\n\n          // Setup text rendering\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n          ctx.font = '10px monospace';\n          ctx.textAlign = 'center';\n\n          // Measure text dimensions for backgrounds\n          const textWidth = ctx.measureText(label).width + 6;\n          const valueWidth = ctx.measureText(valueLabel).width + 6;\n          if (isNearTop) {\n            // Draw position/wavelength label below the marker\n            const labelY = y + 30;\n\n            // Draw text background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth / 2, labelY - 10, textWidth, 16);\n\n            // Draw label text\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, labelY);\n\n            // Draw value label below that\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth / 2, labelY + 7, valueWidth, 16);\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, labelY + 17);\n          } else {\n            // Standard label position above marker\n            // Draw text background for better readability\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth / 2, y - 25, textWidth, 16);\n\n            // Draw label above marker\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, y - 14);\n\n            // Draw peak value\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth / 2, y - 42, valueWidth, 16);\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, y - 31);\n          }\n        });\n      });\n    }\n\n    // Draw crosshair at cursor position\n    if (showCrosshair && cursorPosition) {\n      const {\n        x,\n        y\n      } = cursorPosition;\n      if (x >= 0 && x <= width && y >= 0 && y <= height) {\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.setLineDash([3, 3]); // Dashed line\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n\n        // Draw horizontal line\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset line style\n\n        // Calculate and display wavelength at cursor position\n        const position = x / width; // Normalize cursor position (0-1)\n\n        // Apply flip if needed to get the actual data position\n        const dataPosition = flipXAxis ? 1 - position : position;\n\n        // Determine wavelength based on cursor position\n        let wavelength;\n        if (useCalibration) {\n          wavelength = positionToWavelength(dataPosition);\n        } else {\n          wavelength = dataPosition; // Just show the position value when not calibrated\n        }\n\n        // Calculate y-values at the cursor position\n        let valueText = '';\n        if (data && data.positions && data.positions.length > 0) {\n          // Find the nearest data point to the cursor\n          const positionIndex = findNearestPositionIndex(data.positions, dataPosition);\n\n          // Build value text based on active channels\n          const channelTexts = [];\n          if (displayChannels.red) {\n            channelTexts.push(`R:${Math.round(data.red[positionIndex])}`);\n          }\n          if (displayChannels.green) {\n            channelTexts.push(`G:${Math.round(data.green[positionIndex])}`);\n          }\n          if (displayChannels.blue) {\n            channelTexts.push(`B:${Math.round(data.blue[positionIndex])}`);\n          }\n          if (displayChannels.intensity) {\n            channelTexts.push(`I:${data.intensity[positionIndex].toFixed(1)}`);\n          }\n          valueText = channelTexts.join(', ');\n        }\n\n        // Create a background for the text for better readability\n        const wavelengthText = useCalibration ? `${wavelength.toFixed(1)}nm` : `Pos: ${wavelength.toFixed(3)}`;\n\n        // Draw text background\n        const textWidth = ctx.measureText(wavelengthText).width + 10;\n        const valueTextWidth = ctx.measureText(valueText).width + 10;\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        ctx.fillRect(x - textWidth / 2, height - 45, textWidth, 20);\n        if (valueText) {\n          ctx.fillRect(x - valueTextWidth / 2, 5, valueTextWidth, 20);\n        }\n\n        // Draw wavelength text below cursor\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        ctx.textAlign = 'center';\n        ctx.fillText(wavelengthText, x, height - 30);\n\n        // Draw value text above cursor\n        if (valueText) {\n          ctx.fillText(valueText, x, 20);\n        }\n      }\n    }\n  };\n\n  // Helper to find the index of the nearest position value to a given position\n  const findNearestPositionIndex = (positions, targetPosition) => {\n    if (!positions || positions.length === 0) return -1;\n    let nearestIndex = 0;\n    let minDistance = Math.abs(positions[0] - targetPosition);\n    for (let i = 1; i < positions.length; i++) {\n      const distance = Math.abs(positions[i] - targetPosition);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestIndex = i;\n      }\n    }\n    return nearestIndex;\n  };\n\n  // Toggle display of a specific channel\n  const toggleChannel = channel => {\n    setDisplayChannels(prev => ({\n      ...prev,\n      [channel]: !prev[channel]\n    }));\n  };\n\n  // Handle mouse movement over the graph\n  const handleMouseMove = e => {\n    if (!graphContainerRef.current) return;\n\n    // Get canvas bounds\n    const rect = graphContainerRef.current.getBoundingClientRect();\n\n    // Calculate cursor position relative to canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Update cursor position state\n    setCursorPosition({\n      x,\n      y\n    });\n\n    // Redraw the graph with crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n\n  // Handle mouse enter/leave events\n  const handleMouseEnter = () => {\n    setShowCrosshair(true);\n  };\n  const handleMouseLeave = () => {\n    setShowCrosshair(false);\n    setCursorPosition(null);\n\n    // Redraw the graph without crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n\n  // Similar resize functionality as before\n  const handleResizeStart = e => {\n    var _graphContainerRef$cu, _graphContainerRef$cu2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_graphContainerRef$cu = graphContainerRef.current) === null || _graphContainerRef$cu === void 0 ? void 0 : _graphContainerRef$cu.clientWidth) || 400;\n    const startHeight = ((_graphContainerRef$cu2 = graphContainerRef.current) === null || _graphContainerRef$cu2 === void 0 ? void 0 : _graphContainerRef$cu2.clientHeight) || graphSize.height;\n\n    // Show resize feedback\n    setIsResizing(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaY = moveEvent.clientY - startY;\n\n      // Only adjust height, keep width as 100%\n      const newHeight = Math.max(100, startHeight + deltaY);\n\n      // Update graph size\n      const newSize = {\n        width: '100%',\n        // Keep width as 100% for responsive behavior\n        height: Math.round(newHeight)\n      };\n      setGraphSize(newSize);\n\n      // Notify parent if needed\n      if (onResize) {\n        onResize(newSize);\n      }\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      // fill this gap\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Export graph data as text file\n  const exportGraphData = () => {\n    // Make sure we have data to export\n    const dataToExport = isAccumulating ? accumulatedData : graphData;\n    if (!dataToExport) {\n      console.warn('No data to export');\n      if (props.onMessage) {\n        props.onMessage('No data to export');\n      }\n      return;\n    }\n    try {\n      const lines = [];\n      // Create a timestamp string with units separated by semicolons: YYYY;MM;DD;hh;mm;ss\n      const now = new Date();\n      const timestamp = now.getFullYear() + ';' + String(now.getMonth() + 1).padStart(2, '0') + ';' + String(now.getDate()).padStart(2, '0') + ';' + String(now.getHours()).padStart(2, '0') + ';' + String(now.getMinutes()).padStart(2, '0') + ';' + String(now.getSeconds()).padStart(2, '0');\n      lines.push(timestamp);\n\n      // Add information about memorized data if available\n      if (memorizedData.length > 0) {\n        lines.push(`Memory entries: ${memorizedData.length}`);\n      }\n\n      // Add column headers with memory columns if available\n      let headers = useCalibration ? \"Wavelength (nm);Intensity;Red;Green;Blue\" : \"Position;Intensity;Red;Green;Blue\";\n\n      // Add headers for memorized data\n      if (memorizedData.length > 0) {\n        memorizedData.forEach((_, index) => {\n          headers += `;Memory${index + 1}_Intensity;Memory${index + 1}_Red;Memory${index + 1}_Green;Memory${index + 1}_Blue`;\n        });\n      }\n      lines.push(headers);\n\n      // Loop through data points\n      for (let i = 0; i < dataToExport.positions.length; i++) {\n        let position = dataToExport.positions[i];\n        // Convert position to wavelength if calibration is enabled\n        let wavelength = position;\n        if (useCalibration) {\n          wavelength = positionToWavelength(position);\n        }\n\n        // Get all channel values for current data\n        const intensity = dataToExport.intensity[i];\n        const red = dataToExport.red[i];\n        const green = dataToExport.green[i];\n        const blue = dataToExport.blue[i];\n\n        // Start the line with current data\n        let line = `${wavelength.toFixed(3)};${intensity.toFixed(2)};${red.toFixed(2)};${green.toFixed(2)};${blue.toFixed(2)}`;\n\n        // Add memorized data if available\n        if (memorizedData.length > 0) {\n          memorizedData.forEach(memData => {\n            // Find the closest position in the memorized data\n            const memIndex = findNearestPositionIndex(memData.positions, position);\n            if (memIndex >= 0) {\n              const memIntensity = memData.intensity[memIndex];\n              const memRed = memData.red[memIndex];\n              const memGreen = memData.green[memIndex];\n              const memBlue = memData.blue[memIndex];\n\n              // Add to the line\n              line += `;${memIntensity.toFixed(2)};${memRed.toFixed(2)};${memGreen.toFixed(2)};${memBlue.toFixed(2)}`;\n            } else {\n              // If no matching position found, add empty values\n              line += `;0;0;0;0`;\n            }\n          });\n        }\n\n        // Add line with all values\n        lines.push(line);\n      }\n\n      // Join lines with newlines\n      const content = lines.join('\\n');\n\n      // Create filename with prefix and optional timestamp\n      const fileName = includeDateInFilename ? `${filePrefix}_${timestamp}.txt` : `${filePrefix}.txt`;\n\n      // Create Blob with content\n      const blob = new Blob([content], {\n        type: 'text/plain'\n      });\n\n      // Create download link\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Append to document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Show success message\n      if (props.onMessage) {\n        props.onMessage(`Data exported as ${fileName}`);\n      } else {\n        // If no message handler provided, show alert\n        console.log(`Data exported as ${fileName}`);\n        setSaveMessage && setSaveMessage(`Data exported as ${fileName}`);\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    } catch (error) {\n      console.error('Failed to export graph data:', error);\n      if (props.onMessage) {\n        props.onMessage('Error exporting data');\n      } else {\n        setSaveMessage && setSaveMessage('Error exporting data');\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    }\n  };\n\n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    // fill this gap\n  };\n\n  // Handle peak count change\n  const handlePeakCountChange = e => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count >= 0 && count <= 10) {\n      setPeakCount(count);\n    }\n  };\n\n  // Toggle peak markers\n  const togglePeakMarkers = () => {\n    setShowPeakMarkers(!showPeakMarkers);\n  };\n  const styles = {\n    container: {\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      padding: '10px',\n      borderRadius: '4px',\n      position: 'relative',\n      border: isResizing ? '1px dashed #4CAF50' : 'none'\n    },\n    title: {\n      margin: '0 0 10px 0',\n      fontSize: '14px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    controls: {\n      display: 'flex',\n      gap: '5px',\n      alignItems: 'center'\n    },\n    frameCountControl: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '10px',\n      gap: '8px'\n    },\n    frameCountLabel: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.8)'\n    },\n    frameCountInput: {\n      width: '50px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '12px'\n    },\n    calibrationContainer: {\n      marginBottom: '10px',\n      padding: '8px',\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      borderRadius: '4px'\n    },\n    calibrationHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '8px'\n    },\n    calibrationTitle: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.9)',\n      margin: 0\n    },\n    calibrationCheckbox: {\n      marginLeft: '8px'\n    },\n    calibrationPoints: {\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      gap: '10px'\n    },\n    calibrationPointsColumn: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '6px'\n    },\n    calibrationPointsRow: {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '6px'\n    },\n    calibrationLabel: {\n      fontSize: '11px',\n      color: 'rgba(255, 255, 255, 0.7)',\n      width: '40px'\n    },\n    calibrationInput: {\n      width: '60px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '11px'\n    },\n    graphView: {\n      width: graphSize.width,\n      height: `${graphSize.height}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    canvas: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    resizeHandle: {\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      width: '20px',\n      height: '20px',\n      cursor: 'ns-resize',\n      // Only allow vertical resizing\n      zIndex: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\n      borderTopLeftRadius: '4px'\n    },\n    resizeInfo: {\n      position: 'absolute',\n      right: '25px',\n      bottom: '25px',\n      padding: '2px 6px',\n      background: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '3px',\n      fontSize: '11px',\n      zIndex: 100\n    },\n    channelToggles: {\n      display: 'flex',\n      gap: '5px'\n    },\n    channelButton: {\n      fontSize: '10px',\n      padding: '2px 5px',\n      borderRadius: '3px',\n      cursor: 'pointer',\n      border: '1px solid rgba(255, 255, 255, 0.3)',\n      backgroundColor: 'rgba(30, 30, 30, 0.7)'\n    },\n    noData: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      color: 'rgba(255, 255, 255, 0.5)',\n      fontSize: '12px'\n    },\n    memoryButton: {\n      ...buttonVariants.smallIconButton,\n      backgroundColor: 'rgba(100, 160, 100, 0.7)',\n      marginRight: '5px',\n      fontSize: '11px',\n      padding: '3px 6px'\n    },\n    memoryButtons: {\n      display: 'flex',\n      alignItems: 'center',\n      marginRight: '5px',\n      borderRight: '1px solid rgba(255, 255, 255, 0.2)',\n      paddingRight: '5px'\n    },\n    memoryCount: {\n      fontSize: '10px',\n      backgroundColor: 'rgba(80, 120, 80, 0.5)',\n      padding: '1px 5px',\n      borderRadius: '10px',\n      marginLeft: '5px'\n    }\n  };\n\n  // Return the component JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.title,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: 0\n        },\n        children: \"Intensity Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.channelToggles,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.4)',\n            borderColor: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.2)'\n          },\n          onClick: () => toggleChannel('red'),\n          children: \"R\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.4)',\n            borderColor: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.2)'\n          },\n          onClick: () => toggleChannel('green'),\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.4)',\n            borderColor: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.2)'\n          },\n          onClick: () => toggleChannel('blue'),\n          children: \"B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.4)',\n            borderColor: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.2)'\n          },\n          onClick: () => toggleChannel('intensity'),\n          children: \"I\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.channelButton,\n            color: 'rgb(255, 255, 100)',\n            borderColor: showCalibration ? 'rgb(255, 255, 100)' : 'rgba(255, 255, 100, 0.2)',\n            backgroundColor: showCalibration ? 'rgba(60, 60, 0, 0.6)' : 'rgba(30, 30, 30, 0.7)'\n          },\n          onClick: toggleCalibration,\n          title: \"Toggle calibration controls\",\n          children: \"Cal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.frameCountControl,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.frameCountLabel,\n        children: \"Frame accumulation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        max: \"2000\",\n        value: frameAccumCount,\n        onChange: handleFrameCountChange,\n        style: styles.frameCountInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...buttonVariants.smallIconButton,\n          backgroundColor: isAccumulating ? 'rgba(255, 165, 0, 0.7)' : undefined\n        },\n        onClick: toggleAccumulation,\n        title: isAccumulating ? \"Switch to live data\" : \"Switch to frame accumulation\",\n        children: isAccumulating ? \"Accumulating\" : \"Live\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px',\n          marginLeft: '20px',\n          borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n          paddingLeft: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.frameCountLabel,\n          children: \"Peak markers:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0\",\n          max: \"10\",\n          value: peakCount,\n          onChange: handlePeakCountChange,\n          style: styles.frameCountInput,\n          title: \"Number of peak markers to display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallIconButton,\n            backgroundColor: showPeakMarkers ? 'rgba(120, 120, 220, 0.7)' : undefined\n          },\n          onClick: togglePeakMarkers,\n          title: showPeakMarkers ? \"Hide peak markers\" : \"Show peak markers\",\n          children: showPeakMarkers ? \"Peaks On\" : \"Peaks Off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1448,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          marginLeft: 'auto',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.memoryButtons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: styles.memoryButton,\n            onClick: addToMemory,\n            title: \"Save current graph data to memory\",\n            disabled: !graphData && !accumulatedData,\n            children: \"To Memory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1464,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              ...styles.memoryButton,\n              backgroundColor: 'rgba(180, 80, 80, 0.7)'\n            },\n            onClick: clearMemory,\n            title: \"Clear all memorized data\",\n            disabled: memorizedData.length === 0,\n            children: \"Clear Memory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1472,\n            columnNumber: 13\n          }, this), memorizedData.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.memoryCount,\n            children: memorizedData.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1484,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: filePrefix,\n          onChange: e => setFilePrefix(e.target.value),\n          placeholder: \"File prefix\",\n          style: {\n            ...styles.frameCountInput,\n            width: '100px'\n          },\n          title: \"Prefix for the exported data filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1490,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            fontSize: '11px',\n            color: 'rgba(255, 255, 255, 0.7)',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '3px',\n            marginRight: '5px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: includeDateInFilename,\n            onChange: e => setIncludeDateInFilename(e.target.checked),\n            style: {\n              margin: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1509,\n            columnNumber: 13\n          }, this), \"Date\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1501,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallSecondary,\n            backgroundColor: 'rgba(20, 120, 220, 0.7)'\n          },\n          onClick: exportGraphData,\n          title: \"Export graph data as text file\",\n          disabled: !graphData && !accumulatedData,\n          children: \"\\uD83D\\uDCBE Export Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1517,\n          columnNumber: 11\n        }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '11px',\n            backgroundColor: 'rgba(0, 0, 0, 0.6)',\n            padding: '2px 6px',\n            borderRadius: '3px',\n            marginLeft: '5px',\n            color: 'rgba(255, 255, 255, 0.9)'\n          },\n          children: saveMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1530,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1461,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1406,\n      columnNumber: 7\n    }, this), showCalibration && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.calibrationContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.calibrationHeader,\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          style: styles.calibrationTitle,\n          children: \"Wavelength Calibration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1547,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1546,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.calibrationPoints,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.calibrationPointsColumn,\n          children: [calibrationPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.calibrationLabel,\n              children: [\"Point \", index + 1, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1554,\n              columnNumber: 19\n            }, this)\n          }, `point-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1553,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.calibrationLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1558,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1557,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.calibrationLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1561,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1560,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1551,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.calibrationPointsColumn,\n          children: [calibrationPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginRight: '4px'\n              },\n              children: \"Pos:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1568,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              max: \"1\",\n              step: \"0.0001\",\n              value: point.position,\n              onChange: e => updateCalibrationPoint(index, 'position', e.target.value),\n              style: styles.calibrationInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1569,\n              columnNumber: 19\n            }, this)]\n          }, `pos-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1567,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: useCalibration,\n                onChange: toggleUseCalibration,\n                style: {\n                  marginRight: '5px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1582,\n                columnNumber: 19\n              }, this), \"Use Calibration\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1581,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1580,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: flipXAxis,\n                onChange: toggleFlipXAxis,\n                style: {\n                  marginRight: '5px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1593,\n                columnNumber: 19\n              }, this), \"Flip X-Axis\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1592,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1591,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1565,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.calibrationPointsColumn,\n          children: calibrationPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.calibrationPointsRow,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginRight: '4px'\n              },\n              children: \"\\u03BB:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1607,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"200\",\n              max: \"1200\",\n              step: \"0.01\",\n              value: point.wavelength,\n              onChange: e => updateCalibrationPoint(index, 'wavelength', e.target.value),\n              style: styles.calibrationInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1608,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '11px',\n                color: 'rgba(255, 255, 255, 0.7)',\n                marginLeft: '2px'\n              },\n              children: \"nm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1617,\n              columnNumber: 19\n            }, this)]\n          }, `wavelength-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1606,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1604,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1545,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: graphContainerRef,\n      style: styles.graphView,\n      onMouseMove: handleMouseMove,\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: styles.canvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1632,\n        columnNumber: 9\n      }, this), !graphData && !accumulatedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.noData,\n        children: \"Draw a line on the camera feed to see intensity data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1638,\n        columnNumber: 11\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeInfo,\n        children: [\"Height: \", graphSize.height, \"px\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1645,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handleResizeStart,\n        title: \"Resize graph height\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"12\",\n          height: \"12\",\n          viewBox: \"0 0 12 12\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M2,6 L10,6 M2,9 L10,9\",\n            stroke: \"white\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1657,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1656,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1651,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1625,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1347,\n    columnNumber: 5\n  }, this);\n}, \"0x1EHAswbhsi/HAEwx3Xc5lLUY4=\", false, function () {\n  return [useButtonStyles];\n})), \"0x1EHAswbhsi/HAEwx3Xc5lLUY4=\", false, function () {\n  return [useButtonStyles];\n});\n\n// Add display name for debugging\n_c2 = GraphComponent;\nGraphComponent.displayName = 'GraphComponent';\nexport default GraphComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent$React.forwardRef\");\n$RefreshReg$(_c2, \"GraphComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useImperativeHandle","useButtonStyles","jsxDEV","_jsxDEV","GraphComponent","_s","forwardRef","_c","props","ref","onResize","lineData","onFrameAccumCountChange","onAccumulationToggle","buttonVariants","graphSize","setGraphSize","width","height","isResizing","setIsResizing","showResizeInfo","setShowResizeInfo","displayChannels","setDisplayChannels","red","green","blue","intensity","graphData","setGraphData","memorizedData","setMemorizedData","cursorPosition","setCursorPosition","showCrosshair","setShowCrosshair","frameAccumCount","setFrameAccumCount","accumulatedFrames","setAccumulatedFrames","accumulatedData","setAccumulatedData","isAccumulating","setIsAccumulating","filePrefix","setFilePrefix","includeDateInFilename","setIncludeDateInFilename","saveMessage","setSaveMessage","showPeakMarkers","setShowPeakMarkers","peakCount","setPeakCount","showCalibration","setShowCalibration","calibrationPoints","setCalibrationPoints","position","wavelength","useCalibration","setUseCalibration","flipXAxis","setFlipXAxis","graphContainerRef","canvasRef","getCalibrationSettings","applyCalibrationSettings","settings","Array","isArray","error","console","getPeakSettings","count","showMarkers","applyPeakSettings","pixelData","prev","newFrames","length","summedData","sumFrameData","drawGraph","addToMemory","dataToMemorize","setTimeout","memorizedItem","memoryTimestamp","Date","toISOString","clearMemory","frames","template","summedRed","fill","summedGreen","summedBlue","summedIntensity","forEach","frame","val","i","timestamp","now","positions","lineLength","frameCount","positionToWavelength","sortedPoints","sort","a","b","p1","p2","slope","t","handleFrameCountChange","e","parseInt","target","value","isNaN","toggleAccumulation","newValue","toggleCalibration","toggleUseCalibration","toggleFlipXAxis","updateCalibrationPoint","index","field","numValue","parseFloat","formattedValue","toFixed","points","newPoints","current","canvas","container","clientWidth","clientHeight","findPeaks","values","peaks","peak","x1","x2","x3","y1","y2","y3","denom","A","B","refinedPos","refinedPosition","warn","push","filteredPeaks","minPositionDistance","tooClose","selectedPeak","distance","Math","abs","data","ctx","getContext","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","y","beginPath","moveTo","lineTo","stroke","x","minWavelength","maxWavelength","wavelengths","map","p","min","max","styles","color","maxRed","maxGreen","maxBlue","maxIntensity","channelPeaks","Object","entries","channel","isEnabled","maxValue","xPos","intensityValues","wavelengthPeaks","peakWavelength","selectedWavelength","font","textAlign","timeText","toLocaleTimeString","statusText","fillText","legendStartY","legendSpacing","round","reduce","undefined","displayPosition","point","baseColor","markerColor","replace","isNearTop","setLineDash","markerY","closePath","label","valueLabel","textWidth","measureText","valueWidth","labelY","dataPosition","valueText","positionIndex","findNearestPositionIndex","channelTexts","join","wavelengthText","valueTextWidth","targetPosition","nearestIndex","minDistance","toggleChannel","handleMouseMove","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseEnter","handleMouseLeave","handleResizeStart","_graphContainerRef$cu","_graphContainerRef$cu2","preventDefault","stopPropagation","startX","startY","startWidth","startHeight","moveEvent","deltaY","newHeight","newSize","handleMouseUp","document","removeEventListener","addEventListener","exportSettings","exportGraphData","dataToExport","onMessage","lines","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","headers","_","line","memData","memIndex","memIntensity","memRed","memGreen","memBlue","content","fileName","blob","Blob","type","url","URL","createObjectURL","link","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","log","loadSettings","handlePeakCountChange","togglePeakMarkers","backgroundColor","padding","borderRadius","border","title","margin","fontSize","display","justifyContent","alignItems","controls","gap","frameCountControl","marginBottom","frameCountLabel","frameCountInput","calibrationContainer","calibrationHeader","calibrationTitle","calibrationCheckbox","marginLeft","flexDirection","flexWrap","calibrationPointsColumn","calibrationPointsRow","calibrationLabel","calibrationInput","graphView","overflow","resizeHandle","bottom","right","cursor","zIndex","borderTop","borderLeft","borderTopLeftRadius","resizeInfo","background","channelToggles","channelButton","noData","memoryButton","smallIconButton","marginRight","memoryButtons","borderRight","paddingRight","memoryCount","style","children","_jsxFileName","lineNumber","columnNumber","borderColor","onClick","onChange","paddingLeft","disabled","placeholder","checked","smallSecondary","step","onMouseMove","onMouseEnter","onMouseLeave","onMouseDown","viewBox","d","strokeWidth","strokeLinecap","_c2","displayName","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/SpectrometerMQTT/MQTTGraphComponent.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\n\nconst GraphComponent = React.forwardRef((props, ref) => {\n  const { onResize, lineData, onFrameAccumCountChange, onAccumulationToggle } = props;\n  const buttonVariants = useButtonStyles();\n  const [graphSize, setGraphSize] = useState({ width: '100%', height: 200 });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [displayChannels, setDisplayChannels] = useState({\n    red: false,\n    green: false,\n    blue: false,\n    intensity: true\n  });\n  const [graphData, setGraphData] = useState(null);\n  \n  // Memory for storing graph data\n  const [memorizedData, setMemorizedData] = useState([]);\n  \n  // Cursor tracking state\n  const [cursorPosition, setCursorPosition] = useState(null);\n  const [showCrosshair, setShowCrosshair] = useState(false);\n  \n  // Frame accumulation state - internally managed but synced with parent\n  const [frameAccumCount, setFrameAccumCount] = useState(10); // Default to 10 frames\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\n  const [accumulatedData, setAccumulatedData] = useState(null);\n  const [isAccumulating, setIsAccumulating] = useState(false);\n  \n  // Export file name prefix\n  const [filePrefix, setFilePrefix] = useState('spectrum');\n  const [includeDateInFilename, setIncludeDateInFilename] = useState(true);\n  \n  // Status message for operations\n  const [saveMessage, setSaveMessage] = useState('');\n  \n  // Peak detection state\n  const [showPeakMarkers, setShowPeakMarkers] = useState(true);\n  const [peakCount, setPeakCount] = useState(3); // Default to showing top 3 peaks\n  \n  // Calibration state\n  const [showCalibration, setShowCalibration] = useState(false);\n  const [calibrationPoints, setCalibrationPoints] = useState([\n    { position: 0.25000, wavelength: 450.0 },\n    { position: 0.75000, wavelength: 650.0 }\n  ]);\n  const [useCalibration, setUseCalibration] = useState(false);\n  const [flipXAxis, setFlipXAxis] = useState(false);\n  \n  const graphContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n  \n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    getCalibrationSettings: () => ({\n      calibrationPoints: [...calibrationPoints],\n      useCalibration,\n      flipXAxis\n    }),\n    \n    applyCalibrationSettings: (settings) => {\n      if (!settings) return false;\n      \n      try {\n        if (settings.calibrationPoints && Array.isArray(settings.calibrationPoints)) {\n          setCalibrationPoints(settings.calibrationPoints);\n        }\n        \n        if (typeof settings.useCalibration === 'boolean') {\n          setUseCalibration(settings.useCalibration);\n          if (settings.useCalibration) {\n            setShowCalibration(true);\n          }\n        }\n        \n        if (typeof settings.flipXAxis === 'boolean') {\n          setFlipXAxis(settings.flipXAxis);\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Error applying calibration settings:', error);\n        return false;\n      }\n    },\n    \n    getPeakSettings: () => ({\n      count: peakCount,\n      showMarkers: showPeakMarkers\n    }),\n    \n    applyPeakSettings: (settings) => {\n      if (!settings) return false;\n      \n      try {\n        if (typeof settings.count === 'number') {\n          setPeakCount(settings.count);\n        }\n        \n        if (typeof settings.showMarkers === 'boolean') {\n          setShowPeakMarkers(settings.showMarkers);\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Error applying peak settings:', error);\n        return false;\n      }\n    }\n  }));\n  \n  // Update graph when line data changes\n  useEffect(() => {\n    if (lineData?.pixelData) {\n      // Always keep the latest raw frame data for display when not accumulating\n      setGraphData(lineData.pixelData);\n      \n      if (isAccumulating) {\n        // Add new frame to accumulation buffer\n        setAccumulatedFrames(prev => {\n          const newFrames = [...prev, lineData.pixelData];\n          \n          // If we've reached our target frame count, process the accumulated data\n          if (newFrames.length >= frameAccumCount) {\n            // Sum the color data across all frames\n            const summedData = sumFrameData(newFrames);\n            \n            // Update accumulated data state\n            setAccumulatedData(summedData);\n            \n            // Draw the accumulated data\n            drawGraph(summedData);\n            \n            // Reset the accumulation buffer\n            return [];\n          }\n          \n          return newFrames;\n        });\n      } else {\n        // If not accumulating, just display the raw frame\n        drawGraph(lineData.pixelData);\n      }\n    }\n  }, [lineData, isAccumulating, frameAccumCount, useCalibration, calibrationPoints, flipXAxis]);\n  \n  // When accumulated data changes, draw it\n  useEffect(() => {\n    if (accumulatedData && isAccumulating) {\n      drawGraph(accumulatedData);\n    }\n  }, [accumulatedData, useCalibration, calibrationPoints, flipXAxis]);\n  \n  // Function to add current data to memory\n  const addToMemory = () => {\n    const dataToMemorize = isAccumulating ? accumulatedData : graphData;\n    \n    if (!dataToMemorize) {\n      setSaveMessage('No data to memorize');\n      setTimeout(() => setSaveMessage(''), 3000);\n      return;\n    }\n    \n    // Create a copy of the data with a timestamp\n    const memorizedItem = {\n      ...dataToMemorize,\n      memoryTimestamp: new Date().toISOString()\n    };\n    \n    // Add to memory array\n    setMemorizedData(prev => [...prev, memorizedItem]);\n    setSaveMessage(`Data added to memory (${memorizedData.length + 1} items)`);\n    setTimeout(() => setSaveMessage(''), 3000);\n  };\n  \n  // Function to clear memory\n  const clearMemory = () => {\n    setMemorizedData([]);\n    setSaveMessage('Memory cleared');\n    setTimeout(() => setSaveMessage(''), 3000);\n  };\n  \n  // Sum pixel data across multiple frames\n  const sumFrameData = (frames) => {\n    if (!frames.length) return null;\n    \n    // Use the first frame as a template for structure\n    const template = frames[0];\n    \n    // Initialize arrays for summed values\n    const summedRed = Array(template.red.length).fill(0);\n    const summedGreen = Array(template.green.length).fill(0);\n    const summedBlue = Array(template.blue.length).fill(0);\n    const summedIntensity = Array(template.intensity.length).fill(0);\n    \n    // Sum values across all frames\n    frames.forEach(frame => {\n      frame.red.forEach((val, i) => summedRed[i] += val);\n      frame.green.forEach((val, i) => summedGreen[i] += val);\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\n      frame.intensity.forEach((val, i) => summedIntensity[i] += val);\n    });\n\n    // Return the summed data structure\n    return {\n      timestamp: Date.now(),\n      positions: template.positions, // Positions remain the same\n      red: summedRed,\n      green: summedGreen,\n      blue: summedBlue,\n      intensity: summedIntensity,\n      lineLength: template.lineLength,\n      frameCount: frames.length // Add count of frames that were summed\n    };\n  };\n  \n  // Convert position to wavelength using calibration points\n  const positionToWavelength = (position) => {\n    if (!useCalibration || calibrationPoints.length < 2) {\n      return position;\n    }\n    \n    // Sort calibration points by position\n    const sortedPoints = [...calibrationPoints].sort((a, b) => a.position - b.position);\n    \n    // Find the two calibration points that surround the given position\n    let p1, p2;\n    for (let i = 0; i < sortedPoints.length - 1; i++) {\n      if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\n        p1 = sortedPoints[i];\n        p2 = sortedPoints[i + 1];\n        break;\n      }\n    }\n    \n    // If position is outside the calibration range, use extrapolation\n    if (!p1 || !p2) {\n      if (position < sortedPoints[0].position) {\n        // Extrapolate below the first point\n        // Use the first two points for the slope calculation\n        p1 = sortedPoints[0];\n        p2 = sortedPoints[1];\n        // Calculate the slope between first two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p1.wavelength + slope * (position - p1.position);\n      } else {\n        // Extrapolate above the last point\n        // Use the last two points for the slope calculation\n        p1 = sortedPoints[sortedPoints.length - 2];\n        p2 = sortedPoints[sortedPoints.length - 1];\n        // Calculate the slope between last two calibration points\n        const slope = (p2.wavelength - p1.wavelength) / (p2.position - p1.position);\n        // Extrapolate using y = mx + b formula\n        return p2.wavelength + slope * (position - p2.position);\n      }\n    }\n    \n    // Linear interpolation between the two calibration points\n    const t = (position - p1.position) / (p2.position - p1.position);\n    return p1.wavelength + t * (p2.wavelength - p1.wavelength);\n  };\n  \n  // Handle changing the frame accumulation count\n  const handleFrameCountChange = (e) => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count > 0) {\n      setFrameAccumCount(count);\n      // Reset accumulation when count changes\n      setAccumulatedFrames([]);\n      setAccumulatedData(null);\n      \n      // Notify parent of change\n      if (onFrameAccumCountChange) {\n        onFrameAccumCountChange(count);\n      }\n    }\n  };\n  \n  // Toggle accumulation mode\n  const toggleAccumulation = () => {\n    const newValue = !isAccumulating;\n    setIsAccumulating(newValue);\n    // Reset accumulated data when toggling\n    setAccumulatedFrames([]);\n    setAccumulatedData(null);\n    \n    // Notify parent of change\n    if (onAccumulationToggle) {\n      onAccumulationToggle(newValue);\n    }\n  };\n  \n  // Toggle calibration controls\n  const toggleCalibration = () => {\n    setShowCalibration(!showCalibration);\n  };\n  \n  // Toggle using calibration\n  const toggleUseCalibration = () => {\n    setUseCalibration(!useCalibration);\n  };\n  \n  // Toggle flip X axis\n  const toggleFlipXAxis = () => {\n    setFlipXAxis(!flipXAxis);\n  };\n  \n  // Update calibration point\n  const updateCalibrationPoint = (index, field, value) => {\n    const numValue = parseFloat(value);\n    if (isNaN(numValue)) return;\n    \n    // Format position values to 3 decimal places\n    const formattedValue = field === 'position' ? \n      parseFloat(numValue.toFixed(3)) : \n      numValue;\n    \n    setCalibrationPoints(points => {\n      const newPoints = [...points];\n      newPoints[index] = {\n        ...newPoints[index],\n        [field]: formattedValue\n      };\n      return newPoints;\n    });\n  };\n  \n  // Initialize and resize the canvas when graph size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const container = graphContainerRef.current;\n      \n      if (container) {\n        // Set canvas size to match container\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n        \n        // Redraw graph with new size\n        if (isAccumulating && accumulatedData) {\n          drawGraph(accumulatedData);\n        } else if (graphData) {\n          drawGraph(graphData);\n        }\n      }\n    }\n  }, [graphSize, graphData, accumulatedData, isAccumulating, useCalibration, calibrationPoints, flipXAxis]);\n  \n  // Find peaks in data array\n  const findPeaks = (values, positions, count = 3) => {\n    if (!values || values.length < 3) return [];\n    \n    // Find local maxima (points higher than both neighbors)\n    const peaks = [];\n    \n    for (let i = 1; i < values.length - 1; i++) {\n      if (values[i] > values[i - 1] && values[i] > values[i + 1]) {\n        // This is a local maximum\n        const peak = {\n          index: i,\n          position: positions[i],\n          value: values[i]\n        };\n        \n        // Refine position using quadratic interpolation for better accuracy\n        try {\n          // Based on three points around the peak\n          const x1 = positions[i-1];\n          const x2 = positions[i];\n          const x3 = positions[i+1];\n          const y1 = values[i-1];\n          const y2 = values[i];\n          const y3 = values[i+1];\n          \n          // Only apply refinement if we have valid neighboring points\n          const denom = (x1 - x2) * (x1 - x3) * (x2 - x3);\n          if (denom !== 0) {\n            // Quadratic interpolation formula\n            const A = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom;\n            const B = (x3*x3 * (y1 - y2) + x2*x2 * (y3 - y1) + x1*x1 * (y2 - y3)) / denom;\n            \n            // Calculate refined x position at the peak of the parabola\n            if (A !== 0) {\n              const refinedPos = -B / (2 * A);\n              \n              // Only use refined position if it's within a reasonable range\n              if (refinedPos >= x1 && refinedPos <= x3) {\n                peak.refinedPosition = refinedPos;\n              }\n            }\n          }\n        } catch (e) {\n          console.warn('Error during peak refinement', e);\n          // If refinement fails, use the original position\n        }\n        \n        peaks.push(peak);\n      }\n    }\n    \n    // Sort peaks by value (descending)\n    peaks.sort((a, b) => b.value - a.value);\n    \n    // Filter peaks to ensure they're at least 10nm apart (or equivalent in position space)\n    const filteredPeaks = [];\n    \n    // Default position-based distance (approximately 5% of the position range)\n    const minPositionDistance = 0.05;\n    \n    for (const peak of peaks) {\n      // Check if this peak is too close to any already-selected stronger peak\n      let tooClose = false;\n      \n      for (const selectedPeak of filteredPeaks) {\n        // Use position-based distance (wavelength conversion will happen in the drawing code)\n        const distance = Math.abs(peak.position - selectedPeak.position);\n        \n        if (distance < minPositionDistance) {\n          tooClose = true;\n          break;\n        }\n      }\n      \n      // Add the peak if it's not too close to any stronger peak\n      if (!tooClose) {\n        filteredPeaks.push(peak);\n        \n        // Stop if we have enough peaks\n        if (filteredPeaks.length >= count) {\n          break;\n        }\n      }\n    }\n    \n    return filteredPeaks;\n  };\n  \n  // Draw the graph based on pixel data\n  const drawGraph = (data) => {\n    if (!canvasRef.current || !data) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // Clear the canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Draw background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n    \n    // Horizontal grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const y = height * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n    }\n    \n    // Vertical grid lines (at 25%, 50%, 75%)\n    for (let i = 1; i < 4; i++) {\n      const x = width * (i / 4);\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n    }\n    \n    // Calculate min and max wavelength values for calibration upfront\n    let minWavelength, maxWavelength;\n    if (useCalibration && calibrationPoints.length >= 2) {\n      const wavelengths = calibrationPoints.map(p => p.wavelength);\n      minWavelength = Math.min(...wavelengths);\n      maxWavelength = Math.max(...wavelengths);\n    }\n    \n    // Set line styles for different channels\n    const styles = {\n      red: { color: 'rgba(255, 0, 0, 0.8)', width: 1.5 },\n      green: { color: 'rgba(0, 255, 0, 0.8)', width: 1.5 },\n      blue: { color: 'rgba(0, 0, 255, 0.8)', width: 1.5 },\n      intensity: { color: 'rgba(255, 255, 255, 0.8)', width: 2 }\n    };\n    \n    // Find max values for scaling\n    const maxRed = Math.max(...data.red, 1);\n    const maxGreen = Math.max(...data.green, 1);\n    const maxBlue = Math.max(...data.blue, 1);\n    const maxIntensity = Math.max(...data.intensity, 1);\n    \n    // Store the peak data for each displayed channel\n    const channelPeaks = {};\n    \n    // Plot each enabled channel\n    Object.entries(displayChannels).forEach(([channel, isEnabled]) => {\n      if (!isEnabled) return;\n      \n      const values = data[channel];\n      const maxValue = channel === 'red' ? maxRed : \n                      channel === 'green' ? maxGreen : \n                      channel === 'blue' ? maxBlue : maxIntensity;\n      \n      // Set line style\n      ctx.strokeStyle = styles[channel].color;\n      ctx.lineWidth = styles[channel].width;\n      \n      // Begin the path\n      ctx.beginPath();\n      \n      // Draw the line\n      for (let i = 0; i < values.length; i++) {\n        // Calculate x position, applying flip if enabled\n        let xPos = data.positions[i];\n        if (flipXAxis) {\n          xPos = 1 - xPos; // Invert position (0 becomes 1, 1 becomes 0)\n        }\n        \n        // Convert to pixel coordinates\n        const x = xPos * width;\n        \n        // Invert Y since canvas 0,0 is top-left\n        const y = height - (values[i] / maxValue) * height;\n        \n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      // Draw the path\n      ctx.stroke();\n    });\n    \n    // Detect peaks for intensity channel only if enabled\n    if (showPeakMarkers && displayChannels.intensity) {\n      const intensityValues = data.intensity;\n      // Use original positions for peak detection\n      const peaks = findPeaks(intensityValues, data.positions, peakCount);\n      \n      // If calibration is enabled, perform additional wavelength-based filtering\n      if (useCalibration) {\n        // Convert positions to wavelengths and filter to ensure 10nm minimum distance\n        const wavelengthPeaks = [];\n        \n        // Process peaks in order of intensity (already sorted by findPeaks)\n        for (const peak of peaks) {\n          const peakWavelength = positionToWavelength(peak.position);\n          let tooClose = false;\n          \n          // Check if this peak is too close to any already selected peak\n          for (const selectedPeak of wavelengthPeaks) {\n            const selectedWavelength = positionToWavelength(selectedPeak.position);\n            const distance = Math.abs(peakWavelength - selectedWavelength);\n            \n            if (distance < 10) { // 10nm minimum distance\n              tooClose = true;\n              break;\n            }\n          }\n          \n          // Add the peak if it's not too close to any already selected peak\n          if (!tooClose) {\n            wavelengthPeaks.push(peak);\n          }\n        }\n        \n        channelPeaks['intensity'] = wavelengthPeaks;\n      } else {\n        channelPeaks['intensity'] = peaks;\n      }\n    }\n    \n    // Draw timestamp and status information\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.font = '10px monospace';\n    ctx.textAlign = 'left';\n    \n    // Show time and accumulation status\n    const timeText = `Time: ${new Date(data.timestamp).toLocaleTimeString()}`;\n    const statusText = isAccumulating \n      ? `Accumulating: ${accumulatedFrames.length}/${frameAccumCount} frames` \n      : 'Live data';\n    \n    ctx.fillText(timeText, 5, 15);\n    ctx.fillText(statusText, width - 150, 15);\n    \n    // Draw calibration status if enabled\n    if (useCalibration) {\n      ctx.fillText('Calibrated', width - 150, 45);\n    }\n    \n    // Draw frame count if this is accumulated data\n    if (data.frameCount) {\n      ctx.fillText(`Summed ${data.frameCount} frames`, width - 150, 30);\n    }\n    \n    // Draw channel legend\n    const legendStartY = 30;\n    const legendSpacing = 15;\n    \n    if (displayChannels.red) {\n      ctx.fillStyle = styles.red.color;\n      ctx.fillText(`Red: ${Math.round(data.red.reduce((a, b) => a + b, 0) / data.red.length)}`, 5, legendStartY);\n    }\n    \n    if (displayChannels.green) {\n      ctx.fillStyle = styles.green.color;\n      ctx.fillText(`Green: ${Math.round(data.green.reduce((a, b) => a + b, 0) / data.green.length)}`, 5, legendStartY + legendSpacing);\n    }\n    \n    if (displayChannels.blue) {\n      ctx.fillStyle = styles.blue.color;\n      ctx.fillText(`Blue: ${Math.round(data.blue.reduce((a, b) => a + b, 0) / data.blue.length)}`, 5, legendStartY + legendSpacing * 2);\n    }\n    \n    if (displayChannels.intensity) {\n      ctx.fillStyle = styles.intensity.color;\n      ctx.fillText(`Intensity: ${(data.intensity.reduce((a, b) => a + b, 0) / data.intensity.length).toFixed(2)}`, 5, legendStartY + legendSpacing * 3);\n    }\n    \n    // Draw wavelength axis labels if calibration is enabled (unified section)\n    if (useCalibration && minWavelength !== undefined && maxWavelength !== undefined) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.font = '10px monospace';\n      ctx.textAlign = 'center';\n      \n      // Clear the bottom area where labels will go\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'; // Match background color\n      ctx.fillRect(0, height - 20, width, 20);\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'; // Reset text color\n      \n      // Draw axis labels at regular position intervals (0%, 25%, 50%, 75%, 100%)\n      // but show the corresponding wavelength values\n      for (let i = 0; i <= 4; i++) {\n        const position = i / 4; // Regular positions (0, 0.25, 0.5, 0.75, 1)\n        \n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - position : position;\n        const x = displayPosition * width;\n        \n        // Convert position to wavelength using calibration\n        const wavelength = positionToWavelength(position);\n        \n        ctx.fillText(`${Math.round(wavelength)}nm`, x, height - 5);\n      }\n    }\n    \n    // Draw calibration points if enabled\n    if (useCalibration) {\n      calibrationPoints.forEach(point => {\n        // Apply flip if enabled\n        const displayPosition = flipXAxis ? 1 - point.position : point.position;\n        // Draw vertical line at calibration point position\n        const x = displayPosition * width;\n        \n        ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n        \n        // Draw wavelength label at the calibration point\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\n        ctx.font = '10px monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${point.wavelength}nm`, x, height - 20); // Higher position to avoid overlap\n      });\n    }\n    \n    // Draw peak markers if enabled\n    if (showPeakMarkers) {\n      // Draw peaks for each enabled channel\n      Object.entries(channelPeaks).forEach(([channel, peaks]) => {\n        // Use the same color as the channel with increased opacity\n        const baseColor = styles[channel].color;\n        const markerColor = baseColor.replace('rgba', 'rgb').replace(/,\\s*[\\d.]+\\)/, ')');\n        \n        // Get max value for this channel for y-coordinate calculation\n        const maxValue = channel === 'red' ? maxRed : \n                        channel === 'green' ? maxGreen : \n                        channel === 'blue' ? maxBlue : maxIntensity;\n        \n        peaks.forEach(peak => {\n          // Get the original position\n          let xPos = peak.position;\n          \n          // Use refined position if available (within reasonable bounds)\n          if (peak.refinedPosition !== undefined) {\n            xPos = peak.refinedPosition;\n          }\n          \n          // Apply flip if enabled\n          if (flipXAxis) {\n            xPos = 1 - xPos;\n          }\n          \n          // Convert to pixel coordinates\n          const x = xPos * width;\n          const y = height - (peak.value / maxValue) * height;\n          \n          // Check if peak is near the top of the graph (below a minimum distance from top)\n          const isNearTop = y < 60; // 60px from top\n          \n          // Draw a vertical line first (always visible)\n          ctx.strokeStyle = markerColor;\n          ctx.setLineDash([2, 2]);\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, height);\n          ctx.stroke();\n          ctx.setLineDash([]);\n          \n          // Draw marker at peak position (triangle pointing down or up based on position)\n          ctx.fillStyle = markerColor;\n          ctx.beginPath();\n          \n          if (isNearTop) {\n            // If near top, draw triangle pointing up from a position slightly below the peak\n            const markerY = y + 15;\n            ctx.moveTo(x, markerY);  \n            ctx.lineTo(x - 5, markerY + 10);\n            ctx.lineTo(x + 5, markerY + 10);\n          } else {\n            // Normal case - draw triangle pointing down\n            ctx.moveTo(x, y);  \n            ctx.lineTo(x - 5, y - 10);\n            ctx.lineTo(x + 5, y - 10);\n          }\n          ctx.closePath();\n          ctx.fill();\n          \n          // Prepare label text\n          let label;\n          if (useCalibration) {\n            const wavelength = positionToWavelength(peak.position);\n            label = `${wavelength.toFixed(1)}nm`;\n          } else {\n            label = `Pos: ${peak.position.toFixed(3)}`;\n          }\n          \n          const valueLabel = `I: ${peak.value.toFixed(1)}`;\n          \n          // Setup text rendering\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n          ctx.font = '10px monospace';\n          ctx.textAlign = 'center';\n          \n          // Measure text dimensions for backgrounds\n          const textWidth = ctx.measureText(label).width + 6;\n          const valueWidth = ctx.measureText(valueLabel).width + 6;\n          \n          if (isNearTop) {\n            // Draw position/wavelength label below the marker\n            const labelY = y + 30;\n            \n            // Draw text background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth/2, labelY - 10, textWidth, 16);\n            \n            // Draw label text\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, labelY);\n            \n            // Draw value label below that\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth/2, labelY + 7, valueWidth, 16);\n            \n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, labelY + 17);\n          } else {\n            // Standard label position above marker\n            // Draw text background for better readability\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - textWidth/2, y - 25, textWidth, 16);\n            \n            // Draw label above marker\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(label, x, y - 14);\n            \n            // Draw peak value\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n            ctx.fillRect(x - valueWidth/2, y - 42, valueWidth, 16);\n            \n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.fillText(valueLabel, x, y - 31);\n          }\n        });\n      });\n    }\n    \n    // Draw crosshair at cursor position\n    if (showCrosshair && cursorPosition) {\n      const { x, y } = cursorPosition;\n      \n      if (x >= 0 && x <= width && y >= 0 && y <= height) {\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 1;\n        ctx.setLineDash([3, 3]); // Dashed line\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n        \n        // Draw horizontal line\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset line style\n        \n        // Calculate and display wavelength at cursor position\n        const position = x / width; // Normalize cursor position (0-1)\n        \n        // Apply flip if needed to get the actual data position\n        const dataPosition = flipXAxis ? 1 - position : position;\n        \n        // Determine wavelength based on cursor position\n        let wavelength;\n        if (useCalibration) {\n          wavelength = positionToWavelength(dataPosition);\n        } else {\n          wavelength = dataPosition; // Just show the position value when not calibrated\n        }\n        \n        // Calculate y-values at the cursor position\n        let valueText = '';\n        \n        if (data && data.positions && data.positions.length > 0) {\n          // Find the nearest data point to the cursor\n          const positionIndex = findNearestPositionIndex(data.positions, dataPosition);\n          \n          // Build value text based on active channels\n          const channelTexts = [];\n          if (displayChannels.red) {\n            channelTexts.push(`R:${Math.round(data.red[positionIndex])}`);\n          }\n          if (displayChannels.green) {\n            channelTexts.push(`G:${Math.round(data.green[positionIndex])}`);\n          }\n          if (displayChannels.blue) {\n            channelTexts.push(`B:${Math.round(data.blue[positionIndex])}`);\n          }\n          if (displayChannels.intensity) {\n            channelTexts.push(`I:${data.intensity[positionIndex].toFixed(1)}`);\n          }\n          \n          valueText = channelTexts.join(', ');\n        }\n        \n        // Create a background for the text for better readability\n        const wavelengthText = useCalibration ? `${wavelength.toFixed(1)}nm` : `Pos: ${wavelength.toFixed(3)}`;\n        \n        // Draw text background\n        const textWidth = ctx.measureText(wavelengthText).width + 10;\n        const valueTextWidth = ctx.measureText(valueText).width + 10;\n        \n        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        ctx.fillRect(x - textWidth/2, height - 45, textWidth, 20);\n        \n        if (valueText) {\n          ctx.fillRect(x - valueTextWidth/2, 5, valueTextWidth, 20);\n        }\n        \n        // Draw wavelength text below cursor\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        ctx.textAlign = 'center';\n        ctx.fillText(wavelengthText, x, height - 30);\n        \n        // Draw value text above cursor\n        if (valueText) {\n          ctx.fillText(valueText, x, 20);\n        }\n      }\n    }\n  };\n  \n  // Helper to find the index of the nearest position value to a given position\n  const findNearestPositionIndex = (positions, targetPosition) => {\n    if (!positions || positions.length === 0) return -1;\n    \n    let nearestIndex = 0;\n    let minDistance = Math.abs(positions[0] - targetPosition);\n    \n    for (let i = 1; i < positions.length; i++) {\n      const distance = Math.abs(positions[i] - targetPosition);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestIndex = i;\n      }\n    }\n    \n    return nearestIndex;\n  };\n  \n  // Toggle display of a specific channel\n  const toggleChannel = (channel) => {\n    setDisplayChannels(prev => ({\n      ...prev,\n      [channel]: !prev[channel]\n    }));\n  };\n  \n  // Handle mouse movement over the graph\n  const handleMouseMove = (e) => {\n    if (!graphContainerRef.current) return;\n    \n    // Get canvas bounds\n    const rect = graphContainerRef.current.getBoundingClientRect();\n    \n    // Calculate cursor position relative to canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Update cursor position state\n    setCursorPosition({ x, y });\n    \n    // Redraw the graph with crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n  \n  // Handle mouse enter/leave events\n  const handleMouseEnter = () => {\n    setShowCrosshair(true);\n  };\n  \n  const handleMouseLeave = () => {\n    setShowCrosshair(false);\n    setCursorPosition(null);\n    \n    // Redraw the graph without crosshair\n    if (isAccumulating && accumulatedData) {\n      drawGraph(accumulatedData);\n    } else if (graphData) {\n      drawGraph(graphData);\n    }\n  };\n  \n  // Similar resize functionality as before\n  const handleResizeStart = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = graphContainerRef.current?.clientWidth || 400;\n    const startHeight = graphContainerRef.current?.clientHeight || graphSize.height;\n    \n    // Show resize feedback\n    setIsResizing(true);\n    setShowResizeInfo(true);\n    \n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaY = moveEvent.clientY - startY;\n      \n      // Only adjust height, keep width as 100%\n      const newHeight = Math.max(100, startHeight + deltaY);\n      \n      // Update graph size\n      const newSize = {\n        width: '100%',  // Keep width as 100% for responsive behavior\n        height: Math.round(newHeight)\n      };\n      \n      setGraphSize(newSize);\n      \n      // Notify parent if needed\n      if (onResize) {\n        onResize(newSize);\n      }\n      \n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n    \n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      \n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n    \n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      // fill this gap\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n  \n  // Export graph data as text file\n  const exportGraphData = () => {\n    // Make sure we have data to export\n    const dataToExport = isAccumulating ? accumulatedData : graphData;\n    \n    if (!dataToExport) {\n      console.warn('No data to export');\n      if (props.onMessage) {\n        props.onMessage('No data to export');\n      }\n      return;\n    }\n    \n    try {\n      const lines = [];\n      // Create a timestamp string with units separated by semicolons: YYYY;MM;DD;hh;mm;ss\n      const now = new Date();\n      const timestamp = now.getFullYear() + ';' +\n        String(now.getMonth() + 1).padStart(2, '0') + ';' +\n        String(now.getDate()).padStart(2, '0') + ';' +\n        String(now.getHours()).padStart(2, '0') + ';' +\n        String(now.getMinutes()).padStart(2, '0') + ';' +\n        String(now.getSeconds()).padStart(2, '0');\n        \n      lines.push(timestamp);\n      \n      // Add information about memorized data if available\n      if (memorizedData.length > 0) {\n        lines.push(`Memory entries: ${memorizedData.length}`);\n      }\n      \n      // Add column headers with memory columns if available\n      let headers = useCalibration ? \n        \"Wavelength (nm);Intensity;Red;Green;Blue\" : \n        \"Position;Intensity;Red;Green;Blue\";\n      \n      // Add headers for memorized data\n      if (memorizedData.length > 0) {\n        memorizedData.forEach((_, index) => {\n          headers += `;Memory${index+1}_Intensity;Memory${index+1}_Red;Memory${index+1}_Green;Memory${index+1}_Blue`;\n        });\n      }\n      \n      lines.push(headers);\n      \n      // Loop through data points\n      for (let i = 0; i < dataToExport.positions.length; i++) {\n        let position = dataToExport.positions[i];\n        // Convert position to wavelength if calibration is enabled\n        let wavelength = position;\n        if (useCalibration) {\n          wavelength = positionToWavelength(position);\n        }\n        \n        // Get all channel values for current data\n        const intensity = dataToExport.intensity[i];\n        const red = dataToExport.red[i];\n        const green = dataToExport.green[i];\n        const blue = dataToExport.blue[i];\n        \n        // Start the line with current data\n        let line = `${wavelength.toFixed(3)};${intensity.toFixed(2)};${red.toFixed(2)};${green.toFixed(2)};${blue.toFixed(2)}`;\n        \n        // Add memorized data if available\n        if (memorizedData.length > 0) {\n          memorizedData.forEach(memData => {\n            // Find the closest position in the memorized data\n            const memIndex = findNearestPositionIndex(memData.positions, position);\n            if (memIndex >= 0) {\n              const memIntensity = memData.intensity[memIndex];\n              const memRed = memData.red[memIndex];\n              const memGreen = memData.green[memIndex];\n              const memBlue = memData.blue[memIndex];\n              \n              // Add to the line\n              line += `;${memIntensity.toFixed(2)};${memRed.toFixed(2)};${memGreen.toFixed(2)};${memBlue.toFixed(2)}`;\n            } else {\n              // If no matching position found, add empty values\n              line += `;0;0;0;0`;\n            }\n          });\n        }\n        \n        // Add line with all values\n        lines.push(line);\n      }\n      \n      // Join lines with newlines\n      const content = lines.join('\\n');\n      \n      // Create filename with prefix and optional timestamp\n      const fileName = includeDateInFilename ? \n        `${filePrefix}_${timestamp}.txt` : \n        `${filePrefix}.txt`;\n      \n      // Create Blob with content\n      const blob = new Blob([content], { type: 'text/plain' });\n      \n      // Create download link\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      \n      // Append to document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n      \n      // Show success message\n      if (props.onMessage) {\n        props.onMessage(`Data exported as ${fileName}`);\n      } else {\n        // If no message handler provided, show alert\n        console.log(`Data exported as ${fileName}`);\n        setSaveMessage && setSaveMessage(`Data exported as ${fileName}`);\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n      \n    } catch (error) {\n      console.error('Failed to export graph data:', error);\n      if (props.onMessage) {\n        props.onMessage('Error exporting data');\n      } else {\n        setSaveMessage && setSaveMessage('Error exporting data');\n        setTimeout(() => setSaveMessage && setSaveMessage(''), 3000);\n      }\n    }\n  };\n  \n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    // fill this gap\n  };\n  \n  // Handle peak count change\n  const handlePeakCountChange = (e) => {\n    const count = parseInt(e.target.value);\n    if (!isNaN(count) && count >= 0 && count <= 10) {\n      setPeakCount(count);\n    }\n  };\n  \n  // Toggle peak markers\n  const togglePeakMarkers = () => {\n    setShowPeakMarkers(!showPeakMarkers);\n  };\n  \n  const styles = {\n    container: {\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      padding: '10px',\n      borderRadius: '4px',\n      position: 'relative',\n      border: isResizing ? '1px dashed #4CAF50' : 'none',\n    },\n    title: {\n      margin: '0 0 10px 0',\n      fontSize: '14px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    controls: {\n      display: 'flex',\n      gap: '5px',\n      alignItems: 'center',\n    },\n    frameCountControl: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '10px',\n      gap: '8px'\n    },\n    frameCountLabel: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.8)'\n    },\n    frameCountInput: {\n      width: '50px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '12px'\n    },\n    calibrationContainer: {\n      marginBottom: '10px',\n      padding: '8px',\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      borderRadius: '4px'\n    },\n    calibrationHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '8px'\n    },\n    calibrationTitle: {\n      fontSize: '12px',\n      color: 'rgba(255, 255, 255, 0.9)',\n      margin: 0\n    },\n    calibrationCheckbox: {\n      marginLeft: '8px'\n    },\n    calibrationPoints: {\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      gap: '10px'\n    },\n    calibrationPointsColumn: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '6px'\n    },\n    calibrationPointsRow: {\n      display: 'flex', \n      alignItems: 'center',\n      gap: '6px'\n    },\n    calibrationLabel: {\n      fontSize: '11px',\n      color: 'rgba(255, 255, 255, 0.7)',\n      width: '40px'\n    },\n    calibrationInput: {\n      width: '60px',\n      padding: '2px 4px',\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      fontSize: '11px'\n    },\n    graphView: {\n      width: graphSize.width,\n      height: `${graphSize.height}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    canvas: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    resizeHandle: {\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      width: '20px',\n      height: '20px',\n      cursor: 'ns-resize', // Only allow vertical resizing\n      zIndex: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\n      borderTopLeftRadius: '4px',\n    },\n    resizeInfo: {\n      position: 'absolute',\n      right: '25px',\n      bottom: '25px',\n      padding: '2px 6px',\n      background: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '3px',\n      fontSize: '11px',\n      zIndex: 100\n    },\n    channelToggles: {\n      display: 'flex',\n      gap: '5px'\n    },\n    channelButton: {\n      fontSize: '10px',\n      padding: '2px 5px',\n      borderRadius: '3px',\n      cursor: 'pointer',\n      border: '1px solid rgba(255, 255, 255, 0.3)',\n      backgroundColor: 'rgba(30, 30, 30, 0.7)'\n    },\n    noData: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      color: 'rgba(255, 255, 255, 0.5)',\n      fontSize: '12px'\n    },\n    memoryButton: {\n      ...buttonVariants.smallIconButton,\n      backgroundColor: 'rgba(100, 160, 100, 0.7)',\n      marginRight: '5px',\n      fontSize: '11px',\n      padding: '3px 6px'\n    },\n    memoryButtons: {\n      display: 'flex',\n      alignItems: 'center',\n      marginRight: '5px',\n      borderRight: '1px solid rgba(255, 255, 255, 0.2)',\n      paddingRight: '5px'\n    },\n    memoryCount: {\n      fontSize: '10px',\n      backgroundColor: 'rgba(80, 120, 80, 0.5)',\n      padding: '1px 5px',\n      borderRadius: '10px',\n      marginLeft: '5px'\n    }\n  };\n  \n  // Return the component JSX\n  return (\n    <div style={styles.container}>\n      <div style={styles.title}>\n        <h3 style={{ margin: 0 }}>Intensity Graph</h3>\n        <div style={styles.channelToggles}>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.4)',\n              borderColor: displayChannels.red ? 'rgb(255, 100, 100)' : 'rgba(255, 100, 100, 0.2)'\n            }}\n            onClick={() => toggleChannel('red')}\n          >\n            R\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.4)',\n              borderColor: displayChannels.green ? 'rgb(100, 255, 100)' : 'rgba(100, 255, 100, 0.2)'\n            }}\n            onClick={() => toggleChannel('green')}\n          >\n            G\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.4)',\n              borderColor: displayChannels.blue ? 'rgb(100, 100, 255)' : 'rgba(100, 100, 255, 0.2)'\n            }}\n            onClick={() => toggleChannel('blue')}\n          >\n            B\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.4)',\n              borderColor: displayChannels.intensity ? 'rgb(220, 220, 220)' : 'rgba(220, 220, 220, 0.2)'\n            }}\n            onClick={() => toggleChannel('intensity')}\n          >\n            I\n          </button>\n          <button \n            style={{\n              ...styles.channelButton,\n              color: 'rgb(255, 255, 100)',\n              borderColor: showCalibration ? 'rgb(255, 255, 100)' : 'rgba(255, 255, 100, 0.2)',\n              backgroundColor: showCalibration ? 'rgba(60, 60, 0, 0.6)' : 'rgba(30, 30, 30, 0.7)'\n            }}\n            onClick={toggleCalibration}\n            title=\"Toggle calibration controls\"\n          >\n            Cal\n          </button>\n        </div>\n      </div>\n      \n      <div style={styles.frameCountControl}>\n        <div style={styles.frameCountLabel}>Frame accumulation:</div>\n        <input \n          type=\"number\" \n          min=\"1\" \n          max=\"2000\"\n          value={frameAccumCount}\n          onChange={handleFrameCountChange}\n          style={styles.frameCountInput}\n        />\n        <button \n          style={{\n            ...buttonVariants.smallIconButton,\n            backgroundColor: isAccumulating ? 'rgba(255, 165, 0, 0.7)' : undefined\n          }}\n          onClick={toggleAccumulation}\n          title={isAccumulating ? \"Switch to live data\" : \"Switch to frame accumulation\"}\n        >\n          {isAccumulating ? \"Accumulating\" : \"Live\"}\n        </button>\n\n        {/*button that pauses graph*/}\n        \n        {/* Peak markers control */}\n        <div style={{ \n          display: 'flex', \n          alignItems: 'center', \n          gap: '5px',\n          marginLeft: '20px',\n          borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n          paddingLeft: '10px'\n        }}>\n          <div style={styles.frameCountLabel}>Peak markers:</div>\n          <input \n            type=\"number\" \n            min=\"0\" \n            max=\"10\"\n            value={peakCount}\n            onChange={handlePeakCountChange}\n            style={styles.frameCountInput}\n            title=\"Number of peak markers to display\"\n          />\n          <button \n            style={{\n              ...buttonVariants.smallIconButton,\n              backgroundColor: showPeakMarkers ? 'rgba(120, 120, 220, 0.7)' : undefined\n            }}\n            onClick={togglePeakMarkers}\n            title={showPeakMarkers ? \"Hide peak markers\" : \"Show peak markers\"}\n          >\n            {showPeakMarkers ? \"Peaks On\" : \"Peaks Off\"}\n          </button>\n        </div>\n        \n        {/* Add export controls */}\n        <div style={{ display: 'flex', marginLeft: 'auto', alignItems: 'center', gap: '5px' }}>\n          {/* Add memory buttons */}\n          <div style={styles.memoryButtons}>\n            <button\n              style={styles.memoryButton}\n              onClick={addToMemory}\n              title=\"Save current graph data to memory\"\n              disabled={!graphData && !accumulatedData}\n            >\n              To Memory\n            </button>\n            <button\n              style={{\n                ...styles.memoryButton,\n                backgroundColor: 'rgba(180, 80, 80, 0.7)'\n              }}\n              onClick={clearMemory}\n              title=\"Clear all memorized data\"\n              disabled={memorizedData.length === 0}\n            >\n              Clear Memory\n            </button>\n            {memorizedData.length > 0 && (\n              <span style={styles.memoryCount}>\n                {memorizedData.length}\n              </span>\n            )}\n          </div>\n          \n          <input\n            type=\"text\"\n            value={filePrefix}\n            onChange={(e) => setFilePrefix(e.target.value)}\n            placeholder=\"File prefix\"\n            style={{\n              ...styles.frameCountInput,\n              width: '100px'\n            }}\n            title=\"Prefix for the exported data filename\"\n          />\n          <label style={{ \n            fontSize: '11px', \n            color: 'rgba(255, 255, 255, 0.7)', \n            display: 'flex', \n            alignItems: 'center',\n            gap: '3px',\n            marginRight: '5px'\n          }}>\n            <input \n              type=\"checkbox\" \n              checked={includeDateInFilename}\n              onChange={(e) => setIncludeDateInFilename(e.target.checked)}\n              style={{ margin: 0 }}\n            />\n            Date\n          </label>\n          <button\n            style={{\n              ...buttonVariants.smallSecondary,\n              backgroundColor: 'rgba(20, 120, 220, 0.7)'\n            }}\n            onClick={exportGraphData}\n            title=\"Export graph data as text file\"\n            disabled={!graphData && !accumulatedData}\n          >\n            💾 Export Data\n          </button>\n          \n          {saveMessage && (\n            <span style={{\n              fontSize: '11px',\n              backgroundColor: 'rgba(0, 0, 0, 0.6)',\n              padding: '2px 6px',\n              borderRadius: '3px',\n              marginLeft: '5px',\n              color: 'rgba(255, 255, 255, 0.9)'\n            }}>\n              {saveMessage}\n            </span>\n          )}\n        </div>\n      </div>\n      \n      {showCalibration && (\n        <div style={styles.calibrationContainer}>\n          <div style={styles.calibrationHeader}>\n            <h4 style={styles.calibrationTitle}>Wavelength Calibration</h4>\n          </div>\n          \n          <div style={styles.calibrationPoints}>\n            <div style={styles.calibrationPointsColumn}>\n              {calibrationPoints.map((point, index) => (\n                <div key={`point-${index}`} style={styles.calibrationPointsRow}>\n                  <div style={styles.calibrationLabel}>Point {index+1}:</div>\n                </div>\n              ))}\n              <div style={styles.calibrationPointsRow}>\n                <div style={styles.calibrationLabel}></div>\n              </div>\n              <div style={styles.calibrationPointsRow}>\n                <div style={styles.calibrationLabel}></div>\n              </div>\n            </div>\n            \n            <div style={styles.calibrationPointsColumn}>\n              {calibrationPoints.map((point, index) => (\n                <div key={`pos-${index}`} style={styles.calibrationPointsRow}>\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginRight: '4px' }}>Pos:</span>\n                  <input \n                    type=\"number\" \n                    min=\"0\" \n                    max=\"1\" \n                    step=\"0.0001\"\n                    value={point.position}\n                    onChange={(e) => updateCalibrationPoint(index, 'position', e.target.value)}\n                    style={styles.calibrationInput}\n                  />\n                </div>\n              ))}\n              <div style={styles.calibrationPointsRow}>\n                <label style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', display: 'flex', alignItems: 'center' }}>\n                  <input \n                    type=\"checkbox\" \n                    checked={useCalibration}\n                    onChange={toggleUseCalibration}\n                    style={{ marginRight: '5px' }}\n                  />\n                  Use Calibration\n                </label>\n              </div>\n              <div style={styles.calibrationPointsRow}>\n                <label style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', display: 'flex', alignItems: 'center' }}>\n                  <input \n                    type=\"checkbox\" \n                    checked={flipXAxis}\n                    onChange={toggleFlipXAxis}\n                    style={{ marginRight: '5px' }}\n                  />\n                  Flip X-Axis\n                </label>\n              </div>\n            </div>\n            \n            <div style={styles.calibrationPointsColumn}>\n              {calibrationPoints.map((point, index) => (\n                <div key={`wavelength-${index}`} style={styles.calibrationPointsRow}>\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginRight: '4px' }}>λ:</span>\n                  <input \n                    type=\"number\" \n                    min=\"200\" \n                    max=\"1200\" \n                    step=\"0.01\"\n                    value={point.wavelength}\n                    onChange={(e) => updateCalibrationPoint(index, 'wavelength', e.target.value)}\n                    style={styles.calibrationInput}\n                  />\n                  <span style={{ fontSize: '11px', color: 'rgba(255, 255, 255, 0.7)', marginLeft: '2px' }}>nm</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div \n        ref={graphContainerRef}\n        style={styles.graphView}\n        onMouseMove={handleMouseMove}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <canvas\n          ref={canvasRef}\n          style={styles.canvas}\n        />\n        \n        {!graphData && !accumulatedData && (\n          <div style={styles.noData}>\n            Draw a line on the camera feed to see intensity data\n          </div>\n        )}\n        \n        {/* Resize info overlay */}\n        {showResizeInfo && (\n          <div style={styles.resizeInfo}>\n            Height: {graphSize.height}px\n          </div>\n        )}\n        \n        {/* Resize handle */}\n        <div \n          style={styles.resizeHandle}\n          onMouseDown={handleResizeStart}\n          title=\"Resize graph height\"\n        >\n          <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\">\n            <path \n              d=\"M2,6 L10,6 M2,9 L10,9\" \n              stroke=\"white\" \n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n            />\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n});\n\n// Add display name for debugging\nGraphComponent.displayName = 'GraphComponent';\n\nexport default GraphComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}